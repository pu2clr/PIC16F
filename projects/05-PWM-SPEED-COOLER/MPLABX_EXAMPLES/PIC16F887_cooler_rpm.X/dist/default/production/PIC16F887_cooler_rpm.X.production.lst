

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Jan  3 21:49:25 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    45                           	dabs	1,0x7E,2
    46     0000                     
    47                           ; Generated 12/10/2023 GMT
    48                           ; 
    49                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution. Publication is not required when
    63                           ;        this file is used in an embedded application.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81     0000                     	;# 
    82     0001                     	;# 
    83     0002                     	;# 
    84     0003                     	;# 
    85     0004                     	;# 
    86     0005                     	;# 
    87     0006                     	;# 
    88     0007                     	;# 
    89     0008                     	;# 
    90     0009                     	;# 
    91     000A                     	;# 
    92     000B                     	;# 
    93     000C                     	;# 
    94     000D                     	;# 
    95     000E                     	;# 
    96     000E                     	;# 
    97     000F                     	;# 
    98     0010                     	;# 
    99     0011                     	;# 
   100     0012                     	;# 
   101     0013                     	;# 
   102     0014                     	;# 
   103     0015                     	;# 
   104     0015                     	;# 
   105     0016                     	;# 
   106     0017                     	;# 
   107     0018                     	;# 
   108     0019                     	;# 
   109     001A                     	;# 
   110     001B                     	;# 
   111     001B                     	;# 
   112     001C                     	;# 
   113     001D                     	;# 
   114     001E                     	;# 
   115     001F                     	;# 
   116     0081                     	;# 
   117     0085                     	;# 
   118     0086                     	;# 
   119     0087                     	;# 
   120     0088                     	;# 
   121     0089                     	;# 
   122     008C                     	;# 
   123     008D                     	;# 
   124     008E                     	;# 
   125     008F                     	;# 
   126     0090                     	;# 
   127     0091                     	;# 
   128     0092                     	;# 
   129     0093                     	;# 
   130     0093                     	;# 
   131     0093                     	;# 
   132     0094                     	;# 
   133     0095                     	;# 
   134     0096                     	;# 
   135     0097                     	;# 
   136     0098                     	;# 
   137     0099                     	;# 
   138     009A                     	;# 
   139     009B                     	;# 
   140     009C                     	;# 
   141     009D                     	;# 
   142     009E                     	;# 
   143     009F                     	;# 
   144     0105                     	;# 
   145     0107                     	;# 
   146     0108                     	;# 
   147     0109                     	;# 
   148     010C                     	;# 
   149     010C                     	;# 
   150     010D                     	;# 
   151     010E                     	;# 
   152     010F                     	;# 
   153     0185                     	;# 
   154     0187                     	;# 
   155     0188                     	;# 
   156     0189                     	;# 
   157     018C                     	;# 
   158     018D                     	;# 
   159     0000                     	;# 
   160     0001                     	;# 
   161     0002                     	;# 
   162     0003                     	;# 
   163     0004                     	;# 
   164     0005                     	;# 
   165     0006                     	;# 
   166     0007                     	;# 
   167     0008                     	;# 
   168     0009                     	;# 
   169     000A                     	;# 
   170     000B                     	;# 
   171     000C                     	;# 
   172     000D                     	;# 
   173     000E                     	;# 
   174     000E                     	;# 
   175     000F                     	;# 
   176     0010                     	;# 
   177     0011                     	;# 
   178     0012                     	;# 
   179     0013                     	;# 
   180     0014                     	;# 
   181     0015                     	;# 
   182     0015                     	;# 
   183     0016                     	;# 
   184     0017                     	;# 
   185     0018                     	;# 
   186     0019                     	;# 
   187     001A                     	;# 
   188     001B                     	;# 
   189     001B                     	;# 
   190     001C                     	;# 
   191     001D                     	;# 
   192     001E                     	;# 
   193     001F                     	;# 
   194     0081                     	;# 
   195     0085                     	;# 
   196     0086                     	;# 
   197     0087                     	;# 
   198     0088                     	;# 
   199     0089                     	;# 
   200     008C                     	;# 
   201     008D                     	;# 
   202     008E                     	;# 
   203     008F                     	;# 
   204     0090                     	;# 
   205     0091                     	;# 
   206     0092                     	;# 
   207     0093                     	;# 
   208     0093                     	;# 
   209     0093                     	;# 
   210     0094                     	;# 
   211     0095                     	;# 
   212     0096                     	;# 
   213     0097                     	;# 
   214     0098                     	;# 
   215     0099                     	;# 
   216     009A                     	;# 
   217     009B                     	;# 
   218     009C                     	;# 
   219     009D                     	;# 
   220     009E                     	;# 
   221     009F                     	;# 
   222     0105                     	;# 
   223     0107                     	;# 
   224     0108                     	;# 
   225     0109                     	;# 
   226     010C                     	;# 
   227     010C                     	;# 
   228     010D                     	;# 
   229     010E                     	;# 
   230     010F                     	;# 
   231     0185                     	;# 
   232     0187                     	;# 
   233     0188                     	;# 
   234     0189                     	;# 
   235     018C                     	;# 
   236     018D                     	;# 
   237     0000                     	;# 
   238     0001                     	;# 
   239     0002                     	;# 
   240     0003                     	;# 
   241     0004                     	;# 
   242     0005                     	;# 
   243     0006                     	;# 
   244     0007                     	;# 
   245     0008                     	;# 
   246     0009                     	;# 
   247     000A                     	;# 
   248     000B                     	;# 
   249     000C                     	;# 
   250     000D                     	;# 
   251     000E                     	;# 
   252     000E                     	;# 
   253     000F                     	;# 
   254     0010                     	;# 
   255     0011                     	;# 
   256     0012                     	;# 
   257     0013                     	;# 
   258     0014                     	;# 
   259     0015                     	;# 
   260     0015                     	;# 
   261     0016                     	;# 
   262     0017                     	;# 
   263     0018                     	;# 
   264     0019                     	;# 
   265     001A                     	;# 
   266     001B                     	;# 
   267     001B                     	;# 
   268     001C                     	;# 
   269     001D                     	;# 
   270     001E                     	;# 
   271     001F                     	;# 
   272     0081                     	;# 
   273     0085                     	;# 
   274     0086                     	;# 
   275     0087                     	;# 
   276     0088                     	;# 
   277     0089                     	;# 
   278     008C                     	;# 
   279     008D                     	;# 
   280     008E                     	;# 
   281     008F                     	;# 
   282     0090                     	;# 
   283     0091                     	;# 
   284     0092                     	;# 
   285     0093                     	;# 
   286     0093                     	;# 
   287     0093                     	;# 
   288     0094                     	;# 
   289     0095                     	;# 
   290     0096                     	;# 
   291     0097                     	;# 
   292     0098                     	;# 
   293     0099                     	;# 
   294     009A                     	;# 
   295     009B                     	;# 
   296     009C                     	;# 
   297     009D                     	;# 
   298     009E                     	;# 
   299     009F                     	;# 
   300     0105                     	;# 
   301     0107                     	;# 
   302     0108                     	;# 
   303     0109                     	;# 
   304     010C                     	;# 
   305     010C                     	;# 
   306     010D                     	;# 
   307     010E                     	;# 
   308     010F                     	;# 
   309     0185                     	;# 
   310     0187                     	;# 
   311     0188                     	;# 
   312     0189                     	;# 
   313     018C                     	;# 
   314     018D                     	;# 
   315                           
   316                           	psect	idataBANK1
   317     0C76                     __pidataBANK1:
   318                           
   319                           ;initializer for main@F1787
   320     0C76  3408               	retlw	8
   321     0C77  3400               	retlw	0
   322     0C78  3402               	retlw	2
   323     0C79  3403               	retlw	3
   324     0C7A  3404               	retlw	4
   325     0C7B  3405               	retlw	5
   326     0C7C  3406               	retlw	6
   327     0C7D  3407               	retlw	7
   328     001E                     _ADRESH	set	30
   329     001F                     _ADCON0bits	set	31
   330     001F                     _ADCON0	set	31
   331     000B                     _INTCONbits	set	11
   332     0006                     _PORTBbits	set	6
   333     0001                     _TMR0	set	1
   334     0015                     _CCPR1L	set	21
   335     0017                     _CCP1CON	set	23
   336     0012                     _T2CON	set	18
   337     0008                     _PORTD	set	8
   338     0088                     _TRISD	set	136
   339     009E                     _ADRESL	set	158
   340     009F                     _ADCON1	set	159
   341     0087                     _TRISC	set	135
   342     0081                     _OPTION_REGbits	set	129
   343     0086                     _TRISBbits	set	134
   344     0092                     _PR2	set	146
   345     0188                     _ANSEL	set	392
   346     0189                     _ANSELH	set	393
   347                           
   348                           	psect	strings
   349     0800                     __pstrings:
   350     0800                     stringtab:
   351     0800                     __stringtab:
   352                           
   353                           ;	String table - string pointers are 1 byte each
   354     0800  1BFF               	btfsc	btemp+1,7
   355     0801  280A               	ljmp	stringcode
   356     0802  1383               	bcf	3,7
   357     0803  187F               	btfsc	btemp+1,0
   358     0804  1783               	bsf	3,7
   359     0805  0800               	movf	0,w
   360     0806  0A84               	incf	4,f
   361     0807  1903               	skipnz
   362     0808  0AFF               	incf	btemp+1,f
   363     0809  0008               	return
   364     080A                     stringcode:
   365     080A                     stringdir:
   366     080A  3008               	movlw	high stringdir
   367     080B  008A               	movwf	10
   368     080C  0804               	movf	4,w
   369     080D  0A84               	incf	4,f
   370     080E  0782               	addwf	2,f
   371     080F                     __stringbase:
   372     080F  3400               	retlw	0
   373     0810                     __end_of__stringtab:
   374     0810                     STR_1:
   375     0810  3443               	retlw	67	;'C'
   376     0811  344F               	retlw	79	;'O'
   377     0812  344F               	retlw	79	;'O'
   378     0813  344C               	retlw	76	;'L'
   379     0814  3445               	retlw	69	;'E'
   380     0815  3452               	retlw	82	;'R'
   381     0816  3420               	retlw	32	;' '
   382     0817  3452               	retlw	82	;'R'
   383     0818  3450               	retlw	80	;'P'
   384     0819  344D               	retlw	77	;'M'
   385     081A  3420               	retlw	32	;' '
   386     081B  3443               	retlw	67	;'C'
   387     081C  346F               	retlw	111	;'o'
   388     081D  3475               	retlw	117	;'u'
   389     081E  346E               	retlw	110	;'n'
   390     081F  3474               	retlw	116	;'t'
   391     0820  3465               	retlw	101	;'e'
   392     0821  3472               	retlw	114	;'r'
   393     0822  3400               	retlw	0
   394     0823                     STR_2:
   395     0823  3452               	retlw	82	;'R'
   396     0824  3450               	retlw	80	;'P'
   397     0825  344D               	retlw	77	;'M'
   398     0826  343A               	retlw	58	;':'
   399     0827  3420               	retlw	32	;' '
   400     0828  3400               	retlw	0
   401     0829                     STR_3:
   402     0829  3425               	retlw	37	;'%'
   403     082A  3434               	retlw	52	;'4'
   404     082B  3475               	retlw	117	;'u'
   405     082C  3400               	retlw	0
   406                           
   407                           	psect	cinit
   408     07E3                     start_initialization:	
   409                           ; #config settings
   410                           
   411     07E3                     __initialization:
   412                           
   413                           ; Initialize objects allocated to BANK1
   414     07E3  1383               	bcf	3,7	;select IRP bank0
   415     07E4  30C8               	movlw	low (__pdataBANK1+8)
   416     07E5  00FD               	movwf	btemp+-1
   417     07E6  300C               	movlw	high __pidataBANK1
   418     07E7  00FE               	movwf	btemp
   419     07E8  3076               	movlw	low __pidataBANK1
   420     07E9  00FF               	movwf	btemp+1
   421     07EA  30C0               	movlw	low __pdataBANK1
   422     07EB  0084               	movwf	4
   423     07EC  120A  158A  24B1  120A  118A  	fcall	init_ram0
   424                           
   425                           ; Clear objects allocated to BANK1
   426     07F1  30A0               	movlw	low __pbssBANK1
   427     07F2  0084               	movwf	4
   428     07F3  30C0               	movlw	low (__pbssBANK1+32)
   429     07F4  120A  158A  246E   	fcall	clear_ram0
   430                           
   431                           ; Clear objects allocated to BANK0
   432     07F7  01EB               	clrf	__pbssBANK0& (0+127)
   433     07F8  01EC               	clrf	(__pbssBANK0+1)& (0+127)
   434     07F9  01ED               	clrf	(__pbssBANK0+2)& (0+127)
   435     07FA  01EE               	clrf	(__pbssBANK0+3)& (0+127)
   436     07FB  01EF               	clrf	(__pbssBANK0+4)& (0+127)
   437     07FC                     end_of_initialization:	
   438                           ;End of C runtime variable initialization code
   439                           
   440     07FC                     __end_of__initialization:
   441     07FC  0183               	clrf	3
   442     07FD  120A  118A  29E4   	ljmp	_main	;jump to C main() function
   443                           
   444                           	psect	bssBANK0
   445     006B                     __pbssBANK0:
   446     006B                     _width:
   447     006B                     	ds	2
   448     006D                     _prec:
   449     006D                     	ds	2
   450     006F                     _flags:
   451     006F                     	ds	1
   452                           
   453                           	psect	bssBANK1
   454     00A0                     __pbssBANK1:
   455     00A0                     _dbuf:
   456     00A0                     	ds	32
   457                           
   458                           	psect	dataBANK1
   459     00C0                     __pdataBANK1:
   460     00C0                     main@F1787:
   461     00C0                     	ds	8
   462                           
   463                           	psect	inittext
   464     0CAD                     init_fetch0:	
   465                           ;	Called with low address in FSR and high address in W
   466                           
   467     0CAD  087E               	movf	126,w
   468     0CAE  008A               	movwf	10
   469     0CAF  087F               	movf	127,w
   470     0CB0  0082               	movwf	2
   471     0CB1                     init_ram0:	
   472                           ;Called with:
   473                           ;	high address of idata address in btemp 
   474                           ;	low address of idata address in btemp+1 
   475                           ;	low address of data in FSR
   476                           ;	high address + 1 of data in btemp-1
   477                           
   478     0CB1  24AD  120A  158A   	fcall	init_fetch0
   479     0CB4  0080               	movwf	0
   480     0CB5  0A84               	incf	4,f
   481     0CB6  0804               	movf	4,w
   482     0CB7  067D               	xorwf	125,w
   483     0CB8  1903               	btfsc	3,2
   484     0CB9  3400               	retlw	0
   485     0CBA  0AFF               	incf	127,f
   486     0CBB  1903               	btfsc	3,2
   487     0CBC  0AFE               	incf	126,f
   488     0CBD  2CB1               	goto	init_ram0
   489                           
   490                           	psect	clrtext
   491     0C6E                     clear_ram0:	
   492                           ;	Called with FSR containing the base address, and
   493                           ;	W with the last address+1
   494                           
   495     0C6E  0064               	clrwdt	;clear the watchdog before getting into this loop
   496     0C6F                     clrloop0:
   497     0C6F  0180               	clrf	0	;clear RAM location pointed to by FSR
   498     0C70  0A84               	incf	4,f	;increment pointer
   499     0C71  0604               	xorwf	4,w	;XOR with final address
   500     0C72  1903               	btfsc	3,2	;have we reached the end yet?
   501     0C73  3400               	retlw	0	;all done for this memory range, return
   502     0C74  0604               	xorwf	4,w	;XOR again to restore value
   503     0C75  2C6F               	goto	clrloop0	;do the next byte
   504                           
   505                           	psect	cstackCOMMON
   506     0070                     __pcstackCOMMON:
   507     0070                     ?_Lcd_Clear:
   508     0070                     ?_putch:	
   509                           ; 1 bytes @ 0x0
   510                           
   511     0070                     ??_putch:	
   512                           ; 1 bytes @ 0x0
   513                           
   514     0070                     ?_SetBit:	
   515                           ; 1 bytes @ 0x0
   516                           
   517     0070                     ?_PulseEnable:	
   518                           ; 1 bytes @ 0x0
   519                           
   520     0070                     ?_Lcd_Init:	
   521                           ; 1 bytes @ 0x0
   522                           
   523     0070                     ?_initPWM:	
   524                           ; 1 bytes @ 0x0
   525                           
   526     0070                     ??_initPWM:	
   527                           ; 1 bytes @ 0x0
   528                           
   529     0070                     ?_initRPM:	
   530                           ; 1 bytes @ 0x0
   531                           
   532     0070                     ??_initRPM:	
   533                           ; 1 bytes @ 0x0
   534                           
   535     0070                     ?_initADC:	
   536                           ; 1 bytes @ 0x0
   537                           
   538     0070                     ??_initADC:	
   539                           ; 1 bytes @ 0x0
   540                           
   541     0070                     ?_main:	
   542                           ; 1 bytes @ 0x0
   543                           
   544     0070                     ?__Umul8_16:	
   545                           ; 1 bytes @ 0x0
   546                           
   547     0070                     ?_fputc:	
   548                           ; 2 bytes @ 0x0
   549                           
   550     0070                     ?_countPulses:	
   551                           ; 2 bytes @ 0x0
   552                           
   553     0070                     ?_readADC:	
   554                           ; 2 bytes @ 0x0
   555                           
   556     0070                     ?___wmul:	
   557                           ; 2 bytes @ 0x0
   558                           
   559     0070                     ?___lwdiv:	
   560                           ; 2 bytes @ 0x0
   561                           
   562     0070                     ?___lwmod:	
   563                           ; 2 bytes @ 0x0
   564                           
   565     0070                     ?___xxtofl:	
   566                           ; 2 bytes @ 0x0
   567                           
   568     0070                     __Umul8_16@multiplicand:	
   569                           ; 4 bytes @ 0x0
   570                           
   571     0070                     putch@c:	
   572                           ; 1 bytes @ 0x0
   573                           
   574     0070                     SetBit@port:	
   575                           ; 1 bytes @ 0x0
   576                           
   577     0070                     ___wmul@multiplier:	
   578                           ; 2 bytes @ 0x0
   579                           
   580     0070                     ___lwdiv@divisor:	
   581                           ; 2 bytes @ 0x0
   582                           
   583     0070                     ___lwmod@divisor:	
   584                           ; 2 bytes @ 0x0
   585                           
   586     0070                     fputc@c:	
   587                           ; 2 bytes @ 0x0
   588                           
   589     0070                     ___xxtofl@val:	
   590                           ; 2 bytes @ 0x0
   591                           
   592                           
   593                           ; 4 bytes @ 0x0
   594     0070                     	ds	2
   595     0072                     ??__Umul8_16:
   596     0072                     ??_countPulses:	
   597                           ; 1 bytes @ 0x2
   598                           
   599     0072                     ??_readADC:	
   600                           ; 1 bytes @ 0x2
   601                           
   602     0072                     SetBit@pin:	
   603                           ; 1 bytes @ 0x2
   604                           
   605     0072                     fputc@fp:	
   606                           ; 1 bytes @ 0x2
   607                           
   608     0072                     countPulses@pulseCount:	
   609                           ; 1 bytes @ 0x2
   610                           
   611     0072                     ___wmul@multiplicand:	
   612                           ; 2 bytes @ 0x2
   613                           
   614     0072                     ___lwdiv@dividend:	
   615                           ; 2 bytes @ 0x2
   616                           
   617     0072                     ___lwmod@dividend:	
   618                           ; 2 bytes @ 0x2
   619                           
   620                           
   621                           ; 2 bytes @ 0x2
   622     0072                     	ds	1
   623     0073                     ??_fputc:
   624     0073                     SetBit@value:	
   625                           ; 1 bytes @ 0x3
   626                           
   627                           
   628                           ; 1 bytes @ 0x3
   629     0073                     	ds	1
   630     0074                     ??_SetBit:
   631     0074                     ??___wmul:	
   632                           ; 1 bytes @ 0x4
   633                           
   634     0074                     ??___lwdiv:	
   635                           ; 1 bytes @ 0x4
   636                           
   637     0074                     ??___lwmod:	
   638                           ; 1 bytes @ 0x4
   639                           
   640     0074                     ??___xxtofl:	
   641                           ; 1 bytes @ 0x4
   642                           
   643     0074                     countPulses@lastState:	
   644                           ; 1 bytes @ 0x4
   645                           
   646     0074                     ___wmul@product:	
   647                           ; 1 bytes @ 0x4
   648                           
   649     0074                     __Umul8_16@product:	
   650                           ; 2 bytes @ 0x4
   651                           
   652                           
   653                           ; 2 bytes @ 0x4
   654     0074                     	ds	1
   655     0075                     countPulses@currentState:
   656     0075                     ___lwmod@counter:	
   657                           ; 1 bytes @ 0x5
   658                           
   659     0075                     ___lwdiv@quotient:	
   660                           ; 1 bytes @ 0x5
   661                           
   662                           
   663                           ; 2 bytes @ 0x5
   664     0075                     	ds	1
   665     0076                     ??_PulseEnable:
   666     0076                     ?_read_prec_or_width:	
   667                           ; 1 bytes @ 0x6
   668                           
   669     0076                     read_prec_or_width@ap:	
   670                           ; 2 bytes @ 0x6
   671                           
   672     0076                     __Umul8_16@word_mpld:	
   673                           ; 1 bytes @ 0x6
   674                           
   675                           
   676                           ; 2 bytes @ 0x6
   677     0076                     	ds	1
   678     0077                     ___lwdiv@counter:
   679                           
   680                           ; 1 bytes @ 0x7
   681     0077                     	ds	1
   682     0078                     ??_read_prec_or_width:
   683     0078                     ?_fputs:	
   684                           ; 1 bytes @ 0x8
   685                           
   686     0078                     PulseEnable@config:	
   687                           ; 2 bytes @ 0x8
   688                           
   689     0078                     __Umul8_16@multiplier:	
   690                           ; 1 bytes @ 0x8
   691                           
   692     0078                     ___xxtofl@sign:	
   693                           ; 1 bytes @ 0x8
   694                           
   695     0078                     fputs@fp:	
   696                           ; 1 bytes @ 0x8
   697                           
   698                           
   699                           ; 1 bytes @ 0x8
   700     0078                     	ds	1
   701     0079                     ??_fputs:
   702     0079                     ?_Lcd_Command:	
   703                           ; 1 bytes @ 0x9
   704                           
   705     0079                     ?_Lcd_WriteChar:	
   706                           ; 1 bytes @ 0x9
   707                           
   708     0079                     Lcd_Command@cmd:	
   709                           ; 1 bytes @ 0x9
   710                           
   711     0079                     Lcd_WriteChar@data:	
   712                           ; 1 bytes @ 0x9
   713                           
   714     0079                     ___xxtofl@exp:	
   715                           ; 1 bytes @ 0x9
   716                           
   717     0079                     read_prec_or_width@c:	
   718                           ; 1 bytes @ 0x9
   719                           
   720                           
   721                           ; 1 bytes @ 0x9
   722     0079                     	ds	1
   723     007A                     ??_Lcd_Command:
   724     007A                     ??_Lcd_WriteChar:	
   725                           ; 1 bytes @ 0xA
   726                           
   727     007A                     read_prec_or_width@n:	
   728                           ; 1 bytes @ 0xA
   729                           
   730     007A                     ___xxtofl@arg:	
   731                           ; 2 bytes @ 0xA
   732                           
   733                           
   734                           ; 4 bytes @ 0xA
   735     007A                     	ds	1
   736     007B                     ?_pad:
   737     007B                     pad@buf:	
   738                           ; 1 bytes @ 0xB
   739                           
   740                           
   741                           ; 1 bytes @ 0xB
   742     007B                     	ds	1
   743     007C                     Lcd_Command@config:
   744     007C                     Lcd_WriteChar@config:	
   745                           ; 1 bytes @ 0xC
   746                           
   747     007C                     read_prec_or_width@fmt:	
   748                           ; 1 bytes @ 0xC
   749                           
   750     007C                     pad@p:	
   751                           ; 1 bytes @ 0xC
   752                           
   753                           
   754                           ; 2 bytes @ 0xC
   755     007C                     	ds	1
   756     007D                     ??_Lcd_WriteString:
   757     007D                     Lcd_WriteString@config:	
   758                           ; 1 bytes @ 0xD
   759                           
   760     007D                     Lcd_Clear@config:	
   761                           ; 1 bytes @ 0xD
   762                           
   763                           
   764                           ; 1 bytes @ 0xD
   765     007D                     	ds	1
   766     007E                     ??_vfprintf:
   767     007E                     ??_utoa:	
   768                           ; 1 bytes @ 0xE
   769                           
   770                           
   771                           	psect	cstackBANK0
   772     0020                     __pcstackBANK0:	
   773                           ; 1 bytes @ 0xE
   774                           
   775     0020                     ??_Lcd_Clear:
   776     0020                     ?_Lcd_WriteString:	
   777                           ; 1 bytes @ 0x0
   778                           
   779     0020                     ?_Lcd_SetCursor:	
   780                           ; 1 bytes @ 0x0
   781                           
   782     0020                     ?___flmul:	
   783                           ; 1 bytes @ 0x0
   784                           
   785     0020                     Lcd_SetCursor@row:	
   786                           ; 4 bytes @ 0x0
   787                           
   788     0020                     fputs@c:	
   789                           ; 1 bytes @ 0x0
   790                           
   791     0020                     Lcd_WriteString@str:	
   792                           ; 1 bytes @ 0x0
   793                           
   794     0020                     ___flmul@b:	
   795                           ; 2 bytes @ 0x0
   796                           
   797                           
   798                           ; 4 bytes @ 0x0
   799     0020                     	ds	1
   800     0021                     Lcd_SetCursor@column:
   801     0021                     fputs@i:	
   802                           ; 1 bytes @ 0x1
   803                           
   804                           
   805                           ; 2 bytes @ 0x1
   806     0021                     	ds	1
   807     0022                     ??_Lcd_Init:
   808     0022                     ??_Lcd_SetCursor:	
   809                           ; 1 bytes @ 0x2
   810                           
   811                           
   812                           ; 1 bytes @ 0x2
   813     0022                     	ds	1
   814     0023                     fputs@s:
   815                           
   816                           ; 1 bytes @ 0x3
   817     0023                     	ds	1
   818     0024                     ??_pad:
   819     0024                     Lcd_Init@config:	
   820                           ; 1 bytes @ 0x4
   821                           
   822     0024                     Lcd_SetCursor@address:	
   823                           ; 1 bytes @ 0x4
   824                           
   825     0024                     ___flmul@a:	
   826                           ; 1 bytes @ 0x4
   827                           
   828                           
   829                           ; 4 bytes @ 0x4
   830     0024                     	ds	1
   831     0025                     Lcd_SetCursor@config:
   832     0025                     pad@i:	
   833                           ; 1 bytes @ 0x5
   834                           
   835                           
   836                           ; 2 bytes @ 0x5
   837     0025                     	ds	2
   838     0027                     pad@fp:
   839                           
   840                           ; 1 bytes @ 0x7
   841     0027                     	ds	1
   842     0028                     ??___flmul:
   843     0028                     ?_utoa:	
   844                           ; 1 bytes @ 0x8
   845                           
   846     0028                     utoa@d:	
   847                           ; 1 bytes @ 0x8
   848                           
   849                           
   850                           ; 2 bytes @ 0x8
   851     0028                     	ds	2
   852     002A                     utoa@w:
   853                           
   854                           ; 2 bytes @ 0xA
   855     002A                     	ds	2
   856     002C                     utoa@fp:
   857                           
   858                           ; 1 bytes @ 0xC
   859     002C                     	ds	1
   860     002D                     ___flmul@sign:
   861     002D                     utoa@p:	
   862                           ; 1 bytes @ 0xD
   863                           
   864                           
   865                           ; 1 bytes @ 0xD
   866     002D                     	ds	1
   867     002E                     ___flmul@aexp:
   868     002E                     utoa@i:	
   869                           ; 1 bytes @ 0xE
   870                           
   871                           
   872                           ; 2 bytes @ 0xE
   873     002E                     	ds	1
   874     002F                     ___flmul@grs:
   875                           
   876                           ; 4 bytes @ 0xF
   877     002F                     	ds	1
   878     0030                     ?_vfpfcnvrt:
   879     0030                     vfpfcnvrt@fmt:	
   880                           ; 1 bytes @ 0x10
   881                           
   882                           
   883                           ; 1 bytes @ 0x10
   884     0030                     	ds	1
   885     0031                     vfpfcnvrt@ap:
   886                           
   887                           ; 1 bytes @ 0x11
   888     0031                     	ds	1
   889     0032                     ??_vfpfcnvrt:
   890                           
   891                           ; 1 bytes @ 0x12
   892     0032                     	ds	1
   893     0033                     ___flmul@bexp:
   894                           
   895                           ; 1 bytes @ 0x13
   896     0033                     	ds	1
   897     0034                     ___flmul@prod:
   898     0034                     vfpfcnvrt@convarg:	
   899                           ; 4 bytes @ 0x14
   900                           
   901                           
   902                           ; 4 bytes @ 0x14
   903     0034                     	ds	4
   904     0038                     vfpfcnvrt@fp:
   905     0038                     ___flmul@temp:	
   906                           ; 1 bytes @ 0x18
   907                           
   908                           
   909                           ; 2 bytes @ 0x18
   910     0038                     	ds	1
   911     0039                     vfpfcnvrt@cp:
   912                           
   913                           ; 1 bytes @ 0x19
   914     0039                     	ds	1
   915     003A                     ?_vfprintf:
   916     003A                     ?___fltol:	
   917                           ; 2 bytes @ 0x1A
   918                           
   919     003A                     vfprintf@fmt:	
   920                           ; 4 bytes @ 0x1A
   921                           
   922     003A                     ___fltol@f1:	
   923                           ; 1 bytes @ 0x1A
   924                           
   925                           
   926                           ; 4 bytes @ 0x1A
   927     003A                     	ds	1
   928     003B                     vfprintf@ap:
   929                           
   930                           ; 1 bytes @ 0x1B
   931     003B                     	ds	1
   932     003C                     vfprintf@fp:
   933                           
   934                           ; 1 bytes @ 0x1C
   935     003C                     	ds	1
   936     003D                     vfprintf@cfmt:
   937                           
   938                           ; 1 bytes @ 0x1D
   939     003D                     	ds	1
   940     003E                     ??___fltol:
   941     003E                     ?_sprintf:	
   942                           ; 1 bytes @ 0x1E
   943                           
   944     003E                     sprintf@fmt:	
   945                           ; 2 bytes @ 0x1E
   946                           
   947                           
   948                           ; 1 bytes @ 0x1E
   949     003E                     	ds	3
   950     0041                     ??_sprintf:
   951                           
   952                           ; 1 bytes @ 0x21
   953     0041                     	ds	1
   954     0042                     ___fltol@sign1:
   955     0042                     sprintf@ap:	
   956                           ; 1 bytes @ 0x22
   957                           
   958                           
   959                           ; 1 bytes @ 0x22
   960     0042                     	ds	1
   961     0043                     ___fltol@exp1:
   962     0043                     sprintf@s:	
   963                           ; 1 bytes @ 0x23
   964                           
   965                           
   966                           ; 1 bytes @ 0x23
   967     0043                     	ds	1
   968     0044                     sprintf@f:
   969                           
   970                           ; 11 bytes @ 0x24
   971     0044                     	ds	11
   972     004F                     ??_main:
   973                           
   974                           ; 1 bytes @ 0x2F
   975     004F                     	ds	4
   976     0053                     main@rpm:
   977                           
   978                           ; 10 bytes @ 0x33
   979     0053                     	ds	10
   980     005D                     main@adcResult:
   981                           
   982                           ; 2 bytes @ 0x3D
   983     005D                     	ds	2
   984     005F                     main@pulses:
   985                           
   986                           ; 2 bytes @ 0x3F
   987     005F                     	ds	2
   988     0061                     main@fanRPM:
   989                           
   990                           ; 2 bytes @ 0x41
   991     0061                     	ds	2
   992     0063                     main@lcd:
   993                           
   994                           ; 8 bytes @ 0x43
   995     0063                     	ds	8
   996                           
   997                           	psect	maintext
   998     01E4                     __pmaintext:	
   999 ;;
  1000 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1001 ;;
  1002 ;; *************** function _main *****************
  1003 ;; Defined at:
  1004 ;;		line 80 in file "newmain.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  rpm            10   51[BANK0 ] unsigned char [10]
  1009 ;;  fanRPM          2   65[BANK0 ] unsigned int 
  1010 ;;  pulses          2   63[BANK0 ] unsigned int 
  1011 ;;  adcResult       2   61[BANK0 ] unsigned int 
  1012 ;;  lcd             8   67[BANK0 ] struct .
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : B00/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1022 ;;      Params:         0       0       0       0       0
  1023 ;;      Locals:         0      24       0       0       0
  1024 ;;      Temps:          0       4       0       0       0
  1025 ;;      Totals:         0      28       0       0       0
  1026 ;;Total ram usage:       28 bytes
  1027 ;; Hardware stack levels required when called: 8
  1028 ;; This function calls:
  1029 ;;		_Lcd_Clear
  1030 ;;		_Lcd_Init
  1031 ;;		_Lcd_SetCursor
  1032 ;;		_Lcd_WriteString
  1033 ;;		___flmul
  1034 ;;		___fltol
  1035 ;;		___xxtofl
  1036 ;;		_countPulses
  1037 ;;		_initADC
  1038 ;;		_initPWM
  1039 ;;		_initRPM
  1040 ;;		_readADC
  1041 ;;		_sprintf
  1042 ;; This function is called by:
  1043 ;;		Startup code after reset
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047     01E4                     _main:	
  1048                           ;psect for function _main
  1049                           
  1050                           
  1051                           ;newmain.c: 83:     };
  1052                           
  1053                           ;incstack = 0
  1054                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1055     01E4  120A  158A  2494  120A  118A  	fcall	_initPWM
  1056                           
  1057                           ;newmain.c: 84: 
  1058     01E9  120A  158A  24A0  120A  118A  	fcall	_initADC
  1059                           
  1060                           ;newmain.c: 85: 
  1061     01EE  120A  158A  247E  120A  118A  	fcall	_initRPM
  1062                           
  1063                           ;newmain.c: 90: 
  1064     01F3  3063               	movlw	main@lcd& (0+255)
  1065     01F4  0084               	movwf	4
  1066     01F5  30C0               	movlw	low main@F1787
  1067     01F6  00CF               	movwf	??_main
  1068     01F7  0804               	movf	4,w
  1069     01F8  00D0               	movwf	??_main+1
  1070     01F9  3008               	movlw	8
  1071     01FA  00D1               	movwf	??_main+2
  1072     01FB                     u3060:
  1073     01FB  084F               	movf	??_main,w
  1074     01FC  0084               	movwf	4
  1075     01FD  1383               	bcf	3,7	;select IRP bank1
  1076     01FE  0800               	movf	0,w
  1077     01FF  00D2               	movwf	??_main+3
  1078     0200  0ACF               	incf	??_main,f
  1079     0201  0850               	movf	??_main+1,w
  1080     0202  0084               	movwf	4
  1081     0203  0852               	movf	??_main+3,w
  1082     0204  0080               	movwf	0
  1083     0205  0AD0               	incf	??_main+1,f
  1084     0206  0BD1               	decfsz	??_main+2,f
  1085     0207  29FB               	goto	u3060
  1086                           
  1087                           ;newmain.c: 101:         unsigned int adcResult = readADC();
  1088     0208  1683               	bsf	3,5	;RP0=1, select bank1
  1089     0209  0188               	clrf	8	;volatile
  1090                           
  1091                           ;newmain.c: 103:         unsigned int pulses = countPulses();
  1092     020A  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1093     020B  120A  118A  2045  120A  118A  	fcall	_Lcd_Init
  1094                           
  1095                           ;newmain.c: 104:         unsigned int fanRPM = (unsigned int) ((pulses / 2) * (60 / (256
      +                          .0 / 4000000 * 256)/10));
  1096     0210  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1097     0211  120A  158A  24BE  120A  118A  	fcall	_Lcd_Clear
  1098                           
  1099                           ;newmain.c: 107:         Lcd_SetCursor(&lcd, 2, 6);
  1100     0216  1283               	bcf	3,5	;RP0=0, select bank0
  1101     0217  1303               	bcf	3,6	;RP1=0, select bank0
  1102     0218  01A0               	clrf	Lcd_SetCursor@row
  1103     0219  0AA0               	incf	Lcd_SetCursor@row,f
  1104     021A  01A1               	clrf	Lcd_SetCursor@column
  1105     021B  0AA1               	incf	Lcd_SetCursor@column,f
  1106     021C  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1107     021D  120A  158A  2527  120A  118A  	fcall	_Lcd_SetCursor
  1108                           
  1109                           ;newmain.c: 108:         Lcd_WriteString(&lcd, rpm);
  1110     0222  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1111     0223  1283               	bcf	3,5	;RP0=0, select bank0
  1112     0224  1303               	bcf	3,6	;RP1=0, select bank0
  1113     0225  00A0               	movwf	Lcd_WriteString@str
  1114     0226  3080               	movlw	128
  1115     0227  00A1               	movwf	Lcd_WriteString@str+1
  1116     0228  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1117     0229  120A  158A  25B5  120A  118A  	fcall	_Lcd_WriteString
  1118                           
  1119                           ;newmain.c: 109: 
  1120     022E  3002               	movlw	2
  1121     022F  00A0               	movwf	Lcd_SetCursor@row
  1122     0230  01A1               	clrf	Lcd_SetCursor@column
  1123     0231  0AA1               	incf	Lcd_SetCursor@column,f
  1124     0232  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1125     0233  120A  158A  2527  120A  118A  	fcall	_Lcd_SetCursor
  1126                           
  1127                           ;newmain.c: 110: 
  1128     0238  3014               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1129     0239  1283               	bcf	3,5	;RP0=0, select bank0
  1130     023A  1303               	bcf	3,6	;RP1=0, select bank0
  1131     023B  00A0               	movwf	Lcd_WriteString@str
  1132     023C  3080               	movlw	128
  1133     023D  00A1               	movwf	Lcd_WriteString@str+1
  1134     023E  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1135     023F  120A  158A  25B5  120A  118A  	fcall	_Lcd_WriteString
  1136     0244                     l1980:
  1137                           
  1138                           ;newmain.c: 114:     }
  1139     0244  120A  158A  2489  120A  118A  	fcall	_readADC
  1140     0249  0871               	movf	?_readADC+1,w
  1141     024A  1283               	bcf	3,5	;RP0=0, select bank0
  1142     024B  00DE               	movwf	main@adcResult+1
  1143     024C  0870               	movf	?_readADC,w
  1144     024D  00DD               	movwf	main@adcResult
  1145     024E  120A  158A  256D  120A  118A  	fcall	_countPulses
  1146     0253  0871               	movf	?_countPulses+1,w
  1147     0254  00E0               	movwf	main@pulses+1
  1148     0255  0870               	movf	?_countPulses,w
  1149     0256  00DF               	movwf	main@pulses
  1150     0257  0860               	movf	main@pulses+1,w
  1151     0258  00D0               	movwf	??_main+1
  1152     0259  085F               	movf	main@pulses,w
  1153     025A  00CF               	movwf	??_main
  1154     025B  1003               	clrc
  1155     025C  0CD0               	rrf	??_main+1,f
  1156     025D  0CCF               	rrf	??_main,f
  1157     025E  084F               	movf	??_main,w
  1158     025F  00F0               	movwf	___xxtofl@val
  1159     0260  0850               	movf	??_main+1,w
  1160     0261  00F1               	movwf	___xxtofl@val+1
  1161     0262  01F2               	clrf	___xxtofl@val+2
  1162     0263  01F3               	clrf	___xxtofl@val+3
  1163     0264  3000               	movlw	0
  1164     0265  120A  118A  2143  120A  118A  	fcall	___xxtofl
  1165     026A  0873               	movf	?___xxtofl+3,w
  1166     026B  00A7               	movwf	___flmul@a+3
  1167     026C  0872               	movf	?___xxtofl+2,w
  1168     026D  00A6               	movwf	___flmul@a+2
  1169     026E  0871               	movf	?___xxtofl+1,w
  1170     026F  00A5               	movwf	___flmul@a+1
  1171     0270  0870               	movf	?___xxtofl,w
  1172     0271  00A4               	movwf	___flmul@a
  1173     0272  3043               	movlw	67
  1174     0273  00A3               	movwf	___flmul@b+3
  1175     0274  30B7               	movlw	183
  1176     0275  00A2               	movwf	___flmul@b+2
  1177     0276  301B               	movlw	27
  1178     0277  00A1               	movwf	___flmul@b+1
  1179     0278  3000               	movlw	0
  1180     0279  00A0               	movwf	___flmul@b
  1181     027A  120A  118A  250A  120A  118A  	fcall	___flmul
  1182     027F  0823               	movf	?___flmul+3,w
  1183     0280  00BD               	movwf	___fltol@f1+3
  1184     0281  0822               	movf	?___flmul+2,w
  1185     0282  00BC               	movwf	___fltol@f1+2
  1186     0283  0821               	movf	?___flmul+1,w
  1187     0284  00BB               	movwf	___fltol@f1+1
  1188     0285  0820               	movf	?___flmul,w
  1189     0286  00BA               	movwf	___fltol@f1
  1190     0287  120A  158A  2799  120A  118A  	fcall	___fltol
  1191     028C  083B               	movf	?___fltol+1,w
  1192     028D  00E2               	movwf	main@fanRPM+1
  1193     028E  083A               	movf	?___fltol,w
  1194     028F  00E1               	movwf	main@fanRPM
  1195     0290  301A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1196     0291  00BE               	movwf	sprintf@fmt
  1197     0292  0862               	movf	main@fanRPM+1,w
  1198     0293  00C0               	movwf	?_sprintf+2
  1199     0294  0861               	movf	main@fanRPM,w
  1200     0295  00BF               	movwf	?_sprintf+1
  1201     0296  3053               	movlw	(low (main@rpm| 0))& (0+255)
  1202     0297  120A  158A  24D2  120A  118A  	fcall	_sprintf
  1203     029C  3002               	movlw	2
  1204     029D  00A0               	movwf	Lcd_SetCursor@row
  1205     029E  3006               	movlw	6
  1206     029F  00A1               	movwf	Lcd_SetCursor@column
  1207     02A0  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1208     02A1  120A  158A  2527  120A  118A  	fcall	_Lcd_SetCursor
  1209     02A6  3053               	movlw	(low (main@rpm| 0))& (0+255)
  1210     02A7  1283               	bcf	3,5	;RP0=0, select bank0
  1211     02A8  1303               	bcf	3,6	;RP1=0, select bank0
  1212     02A9  00A0               	movwf	Lcd_WriteString@str
  1213     02AA  3000               	movlw	0
  1214     02AB  00A1               	movwf	Lcd_WriteString@str+1
  1215     02AC  3063               	movlw	(low (main@lcd| 0))& (0+255)
  1216     02AD  120A  158A  25B5  120A  118A  	fcall	_Lcd_WriteString
  1217     02B2  085E               	movf	main@adcResult+1,w
  1218     02B3  00D0               	movwf	??_main+1
  1219     02B4  085D               	movf	main@adcResult,w
  1220     02B5  00CF               	movwf	??_main
  1221     02B6  1003               	clrc
  1222     02B7  0CD0               	rrf	??_main+1,f
  1223     02B8  0CCF               	rrf	??_main,f
  1224     02B9  1003               	clrc
  1225     02BA  0CD0               	rrf	??_main+1,f
  1226     02BB  0CCF               	rrf	??_main,f
  1227     02BC  084F               	movf	??_main,w
  1228     02BD  0095               	movwf	21	;volatile
  1229     02BE  3082               	movlw	130
  1230     02BF  1283               	bcf	3,5	;RP0=0, select bank0
  1231     02C0  1303               	bcf	3,6	;RP1=0, select bank0
  1232     02C1  00D0               	movwf	??_main+1
  1233     02C2  30DD               	movlw	221
  1234     02C3  00CF               	movwf	??_main
  1235     02C4                     u3077:
  1236     02C4  0BCF               	decfsz	??_main,f
  1237     02C5  2AC4               	goto	u3077
  1238     02C6  0BD0               	decfsz	??_main+1,f
  1239     02C7  2AC4               	goto	u3077
  1240     02C8  2A44               	goto	l1980
  1241     02C9                     __end_of_main:
  1242                           
  1243                           	psect	text1
  1244     0CD2                     __ptext1:	
  1245 ;; *************** function _sprintf *****************
  1246 ;; Defined at:
  1247 ;;		line 9 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/nf_sprintf.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  s               1    wreg     PTR unsigned char 
  1250 ;;		 -> main@rpm(10), 
  1251 ;;  fmt             1   30[BANK0 ] PTR const unsigned char 
  1252 ;;		 -> STR_3(4), 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  s               1   35[BANK0 ] PTR unsigned char 
  1255 ;;		 -> main@rpm(10), 
  1256 ;;  f              11   36[BANK0 ] struct _IO_FILE
  1257 ;;  ret             2    0        int 
  1258 ;;  ap              1   34[BANK0 ] PTR void [1]
  1259 ;;		 -> ?_sprintf(2), 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  2   30[BANK0 ] int 
  1262 ;; Registers used:
  1263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 300/0
  1266 ;;		On exit  : B00/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1269 ;;      Params:         0       3       0       0       0
  1270 ;;      Locals:         0      13       0       0       0
  1271 ;;      Temps:          0       1       0       0       0
  1272 ;;      Totals:         0      17       0       0       0
  1273 ;;Total ram usage:       17 bytes
  1274 ;; Hardware stack levels used: 1
  1275 ;; Hardware stack levels required when called: 7
  1276 ;; This function calls:
  1277 ;;		_vfprintf
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283     0CD2                     _sprintf:	
  1284                           ;psect for function _sprintf
  1285                           
  1286                           
  1287                           ;incstack = 0
  1288                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1289                           ;sprintf@s stored from wreg
  1290     0CD2  00C3               	movwf	sprintf@s
  1291     0CD3  303F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1292     0CD4  00C2               	movwf	sprintf@ap
  1293     0CD5  0843               	movf	sprintf@s,w
  1294     0CD6  00C4               	movwf	sprintf@f
  1295     0CD7  01C6               	clrf	sprintf@f+2
  1296     0CD8  01C7               	clrf	sprintf@f+3
  1297     0CD9  01CD               	clrf	sprintf@f+9
  1298     0CDA  01CE               	clrf	sprintf@f+10
  1299     0CDB  083E               	movf	sprintf@fmt,w
  1300     0CDC  00BA               	movwf	vfprintf@fmt
  1301     0CDD  3042               	movlw	(low (sprintf@ap| 0))& (0+255)
  1302     0CDE  00BB               	movwf	vfprintf@ap
  1303     0CDF  3044               	movlw	(low (sprintf@f| 0))& (0+255)
  1304     0CE0  120A  158A  24EB   	fcall	_vfprintf
  1305     0CE3  0846               	movf	sprintf@f+2,w
  1306     0CE4  0743               	addwf	sprintf@s,w
  1307     0CE5  00C1               	movwf	??_sprintf
  1308     0CE6  0841               	movf	??_sprintf,w
  1309     0CE7  0084               	movwf	4
  1310     0CE8  1383               	bcf	3,7	;select IRP bank0
  1311     0CE9  0180               	clrf	0
  1312     0CEA  0008               	return
  1313     0CEB                     __end_of_sprintf:
  1314                           
  1315                           	psect	text2
  1316     0CEB                     __ptext2:	
  1317 ;; *************** function _vfprintf *****************
  1318 ;; Defined at:
  1319 ;;		line 1817 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  fp              1    wreg     PTR struct _IO_FILE
  1322 ;;		 -> sprintf@f(11), 
  1323 ;;  fmt             1   26[BANK0 ] PTR const unsigned char 
  1324 ;;		 -> STR_3(4), 
  1325 ;;  ap              1   27[BANK0 ] PTR PTR void 
  1326 ;;		 -> sprintf@ap(1), 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  fp              1   28[BANK0 ] PTR struct _IO_FILE
  1329 ;;		 -> sprintf@f(11), 
  1330 ;;  cfmt            1   29[BANK0 ] PTR unsigned char 
  1331 ;;		 -> STR_3(4), 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  2   26[BANK0 ] int 
  1334 ;; Registers used:
  1335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 300/0
  1338 ;;		On exit  : 300/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1341 ;;      Params:         0       2       0       0       0
  1342 ;;      Locals:         0       2       0       0       0
  1343 ;;      Temps:          0       0       0       0       0
  1344 ;;      Totals:         0       4       0       0       0
  1345 ;;Total ram usage:        4 bytes
  1346 ;; Hardware stack levels used: 1
  1347 ;; Hardware stack levels required when called: 6
  1348 ;; This function calls:
  1349 ;;		_vfpfcnvrt
  1350 ;; This function is called by:
  1351 ;;		_sprintf
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355     0CEB                     _vfprintf:	
  1356                           ;psect for function _vfprintf
  1357                           
  1358                           
  1359                           ;incstack = 0
  1360 ;; using string table level
  1361                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1362                           ;vfprintf@fp stored from wreg
  1363     0CEB  00BC               	movwf	vfprintf@fp
  1364                           
  1365                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1817: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.45/pic/sources/c99/
      +                          common/doprnt.c: 1818: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt
      +                          .c: 1820:     char *cfmt;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprn
      +                          t.c: 1822:     cfmt = (char *)fmt;
  1366     0CEC  083A               	movf	vfprintf@fmt,w
  1367     0CED  00BD               	movwf	vfprintf@cfmt
  1368     0CEE                     l1622:	
  1369                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1826:     while (*cf
      +                          mt) {
  1370                           
  1371                           
  1372                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1826:     while (*cf
      +                          mt) {
  1373     0CEE  083D               	movf	vfprintf@cfmt,w
  1374     0CEF  0084               	movwf	4
  1375     0CF0  120A  158A  200A  120A  158A  	fcall	stringdir
  1376     0CF5  3A00               	xorlw	0
  1377     0CF6  1903               	btfsc	3,2
  1378     0CF7  2D03               	goto	l1624
  1379                           
  1380                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1830:    vfpfcnvrt(f
      +                          p, &cfmt, ap);
  1381     0CF8  303D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1382     0CF9  00B0               	movwf	vfpfcnvrt@fmt
  1383     0CFA  083B               	movf	vfprintf@ap,w
  1384     0CFB  00B1               	movwf	vfpfcnvrt@ap
  1385     0CFC  083C               	movf	vfprintf@fp,w
  1386     0CFD  120A  118A  20B0  120A  158A  	fcall	_vfpfcnvrt
  1387     0D02  2CEE               	goto	l1622
  1388     0D03                     l1624:
  1389                           
  1390                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1835:  return 0;
  1391     0D03  01BA               	clrf	?_vfprintf
  1392     0D04  01BB               	clrf	?_vfprintf+1
  1393     0D05  0008               	return
  1394     0D06                     __end_of_vfprintf:
  1395                           
  1396                           	psect	text3
  1397     00B0                     __ptext3:	
  1398 ;; *************** function _vfpfcnvrt *****************
  1399 ;; Defined at:
  1400 ;;		line 1177 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  fp              1    wreg     PTR struct _IO_FILE
  1403 ;;		 -> sprintf@f(11), 
  1404 ;;  fmt             1   16[BANK0 ] PTR PTR unsigned char 
  1405 ;;		 -> vfprintf@cfmt(1), 
  1406 ;;  ap              1   17[BANK0 ] PTR PTR void 
  1407 ;;		 -> sprintf@ap(1), 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  fp              1   24[BANK0 ] PTR struct _IO_FILE
  1410 ;;		 -> sprintf@f(11), 
  1411 ;;  convarg         4   20[BANK0 ] struct .
  1412 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  1413 ;;		 -> STR_3(4), 
  1414 ;;  done            1    0        _Bool 
  1415 ;;  c               1    0        unsigned char 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      void 
  1418 ;; Registers used:
  1419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 300/0
  1422 ;;		On exit  : 300/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1425 ;;      Params:         0       2       0       0       0
  1426 ;;      Locals:         0       6       0       0       0
  1427 ;;      Temps:          0       2       0       0       0
  1428 ;;      Totals:         0      10       0       0       0
  1429 ;;Total ram usage:       10 bytes
  1430 ;; Hardware stack levels used: 1
  1431 ;; Hardware stack levels required when called: 5
  1432 ;; This function calls:
  1433 ;;		_fputc
  1434 ;;		_read_prec_or_width
  1435 ;;		_utoa
  1436 ;; This function is called by:
  1437 ;;		_vfprintf
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441     00B0                     _vfpfcnvrt:	
  1442                           ;psect for function _vfpfcnvrt
  1443                           
  1444                           
  1445                           ;incstack = 0
  1446 ;; using string table level
  1447                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1448                           ;vfpfcnvrt@fp stored from wreg
  1449     00B0  00B8               	movwf	vfpfcnvrt@fp
  1450                           
  1451                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1177: vfpfcnvrt(FILE
      +                           *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.45/pic/sources/c99/common/
      +                          doprnt.c: 1178: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 117
      +                          9:     char c, *cp;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1
      +                          180:     _Bool done;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 
      +                          1188:  } convarg;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 120
      +                          1:     if ((*fmt)[0] == '%') {
  1452     00B1  0830               	movf	vfpfcnvrt@fmt,w
  1453     00B2  0084               	movwf	4
  1454     00B3  1383               	bcf	3,7	;select IRP bank0
  1455     00B4  0800               	movf	0,w
  1456     00B5  0084               	movwf	4
  1457     00B6  120A  158A  200A  120A  118A  	fcall	stringdir
  1458     00BB  3A25               	xorlw	37
  1459     00BC  1D03               	skipz
  1460     00BD  292C               	goto	l1588
  1461                           
  1462                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1202:         ++*fmt
      +                          ;
  1463     00BE  3001               	movlw	1
  1464     00BF  00B2               	movwf	??_vfpfcnvrt
  1465     00C0  0830               	movf	vfpfcnvrt@fmt,w
  1466     00C1  0084               	movwf	4
  1467     00C2  0832               	movf	??_vfpfcnvrt,w
  1468     00C3  0780               	addwf	0,f
  1469                           
  1470                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1204:         flags 
      +                          = width = 0;
  1471     00C4  01EB               	clrf	_width
  1472     00C5  01EC               	clrf	_width+1
  1473     00C6  1003               	clrc
  1474     00C7  3000               	movlw	0
  1475     00C8  1803               	btfsc	3,0
  1476     00C9  3001               	movlw	1
  1477     00CA  00EF               	movwf	_flags
  1478                           
  1479                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1205:         prec =
      +                           -1;
  1480     00CB  30FF               	movlw	255
  1481     00CC  00ED               	movwf	_prec
  1482     00CD  30FF               	movlw	255
  1483     00CE  00EE               	movwf	_prec+1
  1484                           
  1485                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1256:   width = read
      +                          _prec_or_width(fmt, ap);
  1486     00CF  0831               	movf	vfpfcnvrt@ap,w
  1487     00D0  00F6               	movwf	read_prec_or_width@ap
  1488     00D1  0830               	movf	vfpfcnvrt@fmt,w
  1489     00D2  120A  158A  26F0  120A  118A  	fcall	_read_prec_or_width
  1490     00D7  0877               	movf	?_read_prec_or_width+1,w
  1491     00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1492     00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1493     00DA  00EC               	movwf	_width+1
  1494     00DB  0876               	movf	?_read_prec_or_width,w
  1495     00DC  00EB               	movwf	_width
  1496                           
  1497                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1257:   if (width < 
      +                          0) {
  1498     00DD  1FEC               	btfss	_width+1,7
  1499     00DE  28E5               	goto	l1570
  1500                           
  1501                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1258:    flags |= (1
      +                           << 0);
  1502     00DF  146F               	bsf	_flags,0
  1503                           
  1504                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1259:    width = -wi
      +                          dth;
  1505     00E0  09EB               	comf	_width,f
  1506     00E1  09EC               	comf	_width+1,f
  1507     00E2  0AEB               	incf	_width,f
  1508     00E3  1903               	skipnz
  1509     00E4  0AEC               	incf	_width+1,f
  1510     00E5                     l1570:
  1511                           
  1512                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1439:   if (0
  1513     00E5  0830               	movf	vfpfcnvrt@fmt,w
  1514     00E6  0084               	movwf	4
  1515     00E7  0800               	movf	0,w
  1516     00E8  00B9               	movwf	vfpfcnvrt@cp
  1517     00E9  0839               	movf	vfpfcnvrt@cp,w
  1518     00EA  0084               	movwf	4
  1519     00EB  120A  158A  200A  120A  118A  	fcall	stringdir
  1520     00F0  3A75               	xorlw	117
  1521     00F1  1D03               	skipz
  1522     00F2  2922               	goto	l1584
  1523                           
  1524                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1452:     ) {;/Appli
      +                          cations/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1495:    convarg.uint = (vf
      +                          pf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0
      +                          ));
  1525     00F3  0831               	movf	vfpfcnvrt@ap,w
  1526     00F4  0084               	movwf	4
  1527     00F5  0800               	movf	0,w
  1528     00F6  00B2               	movwf	??_vfpfcnvrt
  1529     00F7  3002               	movlw	2
  1530     00F8  0780               	addwf	0,f
  1531     00F9  0832               	movf	??_vfpfcnvrt,w
  1532     00FA  0084               	movwf	4
  1533     00FB  0800               	movf	0,w
  1534     00FC  00B4               	movwf	vfpfcnvrt@convarg
  1535     00FD  0A84               	incf	4,f
  1536     00FE  0800               	movf	0,w
  1537     00FF  00B5               	movwf	vfpfcnvrt@convarg+1
  1538                           
  1539                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1497:    *fmt = cp+1
      +                          ;
  1540     0100  0830               	movf	vfpfcnvrt@fmt,w
  1541     0101  0084               	movwf	4
  1542     0102  0839               	movf	vfpfcnvrt@cp,w
  1543     0103  3E01               	addlw	1
  1544     0104  0080               	movwf	0
  1545                           
  1546                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1498:    switch (*cp
      +                          ) {
  1547     0105  290F               	goto	l1582
  1548     0106                     l1576:
  1549                           
  1550                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1542:      return (v
      +                          oid) utoa(fp, convarg.uint);;	Return value of _vfpfcnvrt is never used
  1551     0106  0835               	movf	vfpfcnvrt@convarg+1,w
  1552     0107  00A9               	movwf	utoa@d+1
  1553     0108  0834               	movf	vfpfcnvrt@convarg,w
  1554     0109  00A8               	movwf	utoa@d
  1555     010A  0838               	movf	vfpfcnvrt@fp,w
  1556     010B  120A  158A  2742   	fcall	_utoa
  1557     010E  0008               	return
  1558     010F                     l1582:
  1559     010F  0839               	movf	vfpfcnvrt@cp,w
  1560     0110  0084               	movwf	4
  1561     0111  120A  158A  200A  120A  118A  	fcall	stringdir
  1562     0116  00B2               	movwf	??_vfpfcnvrt
  1563     0117  01B3               	clrf	??_vfpfcnvrt+1
  1564                           
  1565                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1566                           ; Switch size 1, requested type "simple"
  1567                           ; Number of cases is 1, Range of values is 0 to 0
  1568                           ; switch strategies available:
  1569                           ; Name         Instructions Cycles
  1570                           ; simple_byte            4     3 (average)
  1571                           ; direct_byte           11     8 (fixed)
  1572                           ; jumptable            260     6 (fixed)
  1573                           ;	Chosen strategy is simple_byte
  1574     0118  0833               	movf	??_vfpfcnvrt+1,w
  1575     0119  3A00               	xorlw	0	; case 0
  1576     011A  1903               	skipnz
  1577     011B  291D               	goto	l2036
  1578     011C  2922               	goto	l1584
  1579     011D                     l2036:
  1580                           
  1581                           ; Switch size 1, requested type "simple"
  1582                           ; Number of cases is 1, Range of values is 117 to 117
  1583                           ; switch strategies available:
  1584                           ; Name         Instructions Cycles
  1585                           ; simple_byte            4     3 (average)
  1586                           ; direct_byte           14    11 (fixed)
  1587                           ; jumptable            263     9 (fixed)
  1588                           ;	Chosen strategy is simple_byte
  1589     011D  0832               	movf	??_vfpfcnvrt,w
  1590     011E  3A75               	xorlw	117	; case 117
  1591     011F  1903               	skipnz
  1592     0120  2906               	goto	l1576
  1593     0121  2922               	goto	l1584
  1594     0122                     l1584:
  1595                           
  1596                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1806:         ++*fmt
      +                          ;
  1597     0122  3001               	movlw	1
  1598     0123  1283               	bcf	3,5	;RP0=0, select bank0
  1599     0124  1303               	bcf	3,6	;RP1=0, select bank0
  1600     0125  00B2               	movwf	??_vfpfcnvrt
  1601     0126  0830               	movf	vfpfcnvrt@fmt,w
  1602     0127  0084               	movwf	4
  1603     0128  0832               	movf	??_vfpfcnvrt,w
  1604     0129  1383               	bcf	3,7	;select IRP bank0
  1605     012A  0780               	addwf	0,f
  1606     012B  0008               	return
  1607     012C                     l1588:
  1608                           
  1609                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1811:     fputc((int
      +                          )(*fmt)[0], fp);
  1610     012C  0830               	movf	vfpfcnvrt@fmt,w
  1611     012D  0084               	movwf	4
  1612     012E  0800               	movf	0,w
  1613     012F  0084               	movwf	4
  1614     0130  120A  158A  200A  120A  118A  	fcall	stringdir
  1615     0135  00B2               	movwf	??_vfpfcnvrt
  1616     0136  01B3               	clrf	??_vfpfcnvrt+1
  1617     0137  0832               	movf	??_vfpfcnvrt,w
  1618     0138  00F0               	movwf	fputc@c
  1619     0139  0833               	movf	??_vfpfcnvrt+1,w
  1620     013A  00F1               	movwf	fputc@c+1
  1621     013B  0838               	movf	vfpfcnvrt@fp,w
  1622     013C  00F2               	movwf	fputc@fp
  1623     013D  120A  158A  26A5  120A  118A  	fcall	_fputc
  1624     0142  2922               	goto	l1584
  1625     0143                     __end_of_vfpfcnvrt:
  1626                           
  1627                           	psect	text4
  1628     0F42                     __ptext4:	
  1629 ;; *************** function _utoa *****************
  1630 ;; Defined at:
  1631 ;;		line 1001 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  fp              1    wreg     PTR struct _IO_FILE
  1634 ;;		 -> sprintf@f(11), 
  1635 ;;  d               2    8[BANK0 ] unsigned int 
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  1638 ;;		 -> sprintf@f(11), 
  1639 ;;  i               2   14[BANK0 ] int 
  1640 ;;  w               2   10[BANK0 ] int 
  1641 ;;  p               1   13[BANK0 ] _Bool 
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 300/0
  1648 ;;		On exit  : 300/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1651 ;;      Params:         0       2       0       0       0
  1652 ;;      Locals:         0       6       0       0       0
  1653 ;;      Temps:          0       0       0       0       0
  1654 ;;      Totals:         0       8       0       0       0
  1655 ;;Total ram usage:        8 bytes
  1656 ;; Hardware stack levels used: 1
  1657 ;; Hardware stack levels required when called: 4
  1658 ;; This function calls:
  1659 ;;		___lwdiv
  1660 ;;		___lwmod
  1661 ;;		_pad
  1662 ;; This function is called by:
  1663 ;;		_vfpfcnvrt
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667     0F42                     _utoa:	
  1668                           ;psect for function _utoa
  1669                           
  1670                           
  1671                           ;incstack = 0
  1672                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1673                           ;utoa@fp stored from wreg
  1674     0F42  00AC               	movwf	utoa@fp
  1675                           
  1676                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1001: static void ut
      +                          oa(FILE *fp, vfpf_uint_t d);/Applications/microchip/xc8/v2.45/pic/sources/c99/common/dop
      +                          rnt.c: 1002: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1003: 
      +                              int i, w;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1007:  
      +                          _Bool p = 1;
  1677     0F43  01AD               	clrf	utoa@p
  1678     0F44  0AAD               	incf	utoa@p,f
  1679                           
  1680                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1019:     w = width;
  1681     0F45  086C               	movf	_width+1,w
  1682     0F46  00AB               	movwf	utoa@w+1
  1683     0F47  086B               	movf	_width,w
  1684     0F48  00AA               	movwf	utoa@w
  1685                           
  1686                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1022:     i = sizeof
      +                          (dbuf) - 1;
  1687     0F49  301F               	movlw	31
  1688     0F4A  00AE               	movwf	utoa@i
  1689     0F4B  3000               	movlw	0
  1690     0F4C  00AF               	movwf	utoa@i+1
  1691                           
  1692                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1023:     dbuf[i] = 
      +                          '\0';
  1693     0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  1694     0F4E  01BF               	clrf	(_dbuf^(0+128)+31)
  1695                           
  1696                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1024:     while (i &
      +                          & (d != 0
  1697     0F4F  2F88               	goto	l1526
  1698     0F50                     l1528:
  1699     0F50  0828               	movf	utoa@d,w
  1700     0F51  0429               	iorwf	utoa@d+1,w
  1701     0F52  1903               	btfsc	3,2
  1702     0F53  082D               	movf	utoa@p,w
  1703     0F54  1903               	btfsc	3,2
  1704     0F55  2F8D               	goto	l1532
  1705                           
  1706                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1033:     )) {;/Appl
      +                          ications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1034:         --i;
  1707     0F56  30FF               	movlw	255
  1708     0F57  07AE               	addwf	utoa@i,f
  1709     0F58  1803               	skipnc
  1710     0F59  0AAF               	incf	utoa@i+1,f
  1711     0F5A  30FF               	movlw	255
  1712     0F5B  07AF               	addwf	utoa@i+1,f
  1713                           
  1714                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1035:         dbuf[i
      +                          ] = '0' + (d % 10);
  1715     0F5C  082E               	movf	utoa@i,w
  1716     0F5D  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1717     0F5E  0084               	movwf	4
  1718     0F5F  300A               	movlw	10
  1719     0F60  00F0               	movwf	___lwmod@divisor
  1720     0F61  3000               	movlw	0
  1721     0F62  00F1               	movwf	___lwmod@divisor+1
  1722     0F63  0829               	movf	utoa@d+1,w
  1723     0F64  00F3               	movwf	___lwmod@dividend+1
  1724     0F65  0828               	movf	utoa@d,w
  1725     0F66  00F2               	movwf	___lwmod@dividend
  1726     0F67  120A  158A  2637  120A  158A  	fcall	___lwmod
  1727     0F6C  0870               	movf	?___lwmod,w
  1728     0F6D  3E30               	addlw	48
  1729     0F6E  1383               	bcf	3,7	;select IRP bank1
  1730     0F6F  0080               	movwf	0
  1731                           
  1732                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1039:   p = 0;
  1733     0F70  01AD               	clrf	utoa@p
  1734                           
  1735                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1041:         --w;
  1736     0F71  30FF               	movlw	255
  1737     0F72  07AA               	addwf	utoa@w,f
  1738     0F73  1803               	skipnc
  1739     0F74  0AAB               	incf	utoa@w+1,f
  1740     0F75  30FF               	movlw	255
  1741     0F76  07AB               	addwf	utoa@w+1,f
  1742                           
  1743                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1042:         d = d 
      +                          / 10;
  1744     0F77  300A               	movlw	10
  1745     0F78  00F0               	movwf	___lwdiv@divisor
  1746     0F79  3000               	movlw	0
  1747     0F7A  00F1               	movwf	___lwdiv@divisor+1
  1748     0F7B  0829               	movf	utoa@d+1,w
  1749     0F7C  00F3               	movwf	___lwdiv@dividend+1
  1750     0F7D  0828               	movf	utoa@d,w
  1751     0F7E  00F2               	movwf	___lwdiv@dividend
  1752     0F7F  120A  158A  2669  120A  158A  	fcall	___lwdiv
  1753     0F84  0871               	movf	?___lwdiv+1,w
  1754     0F85  00A9               	movwf	utoa@d+1
  1755     0F86  0870               	movf	?___lwdiv,w
  1756     0F87  00A8               	movwf	utoa@d
  1757     0F88                     l1526:
  1758                           
  1759                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1024:     while (i &
      +                          & (d != 0
  1760     0F88  1283               	bcf	3,5	;RP0=0, select bank0
  1761     0F89  082E               	movf	utoa@i,w
  1762     0F8A  042F               	iorwf	utoa@i+1,w
  1763     0F8B  1D03               	btfss	3,2
  1764     0F8C  2F50               	goto	l1528
  1765     0F8D                     l1532:
  1766                           
  1767                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1046:     return (vo
      +                          id) pad(fp, &dbuf[i], w);
  1768     0F8D  082E               	movf	utoa@i,w
  1769     0F8E  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1770     0F8F  00FB               	movwf	pad@buf
  1771     0F90  082B               	movf	utoa@w+1,w
  1772     0F91  00FD               	movwf	pad@p+1
  1773     0F92  082A               	movf	utoa@w,w
  1774     0F93  00FC               	movwf	pad@p
  1775     0F94  082C               	movf	utoa@fp,w
  1776     0F95  120A  118A  2007   	fcall	_pad
  1777     0F98  0008               	return
  1778     0F99                     __end_of_utoa:
  1779                           
  1780                           	psect	text5
  1781     0007                     __ptext5:	
  1782 ;; *************** function _pad *****************
  1783 ;; Defined at:
  1784 ;;		line 193 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  fp              1    wreg     PTR struct _IO_FILE
  1787 ;;		 -> sprintf@f(11), 
  1788 ;;  buf             1   11[COMMON] PTR unsigned char 
  1789 ;;		 -> dbuf(32), 
  1790 ;;  p               2   12[COMMON] int 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  fp              1    7[BANK0 ] PTR struct _IO_FILE
  1793 ;;		 -> sprintf@f(11), 
  1794 ;;  i               2    5[BANK0 ] int 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 300/0
  1801 ;;		On exit  : 300/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1804 ;;      Params:         3       0       0       0       0
  1805 ;;      Locals:         0       3       0       0       0
  1806 ;;      Temps:          0       1       0       0       0
  1807 ;;      Totals:         3       4       0       0       0
  1808 ;;Total ram usage:        7 bytes
  1809 ;; Hardware stack levels used: 1
  1810 ;; Hardware stack levels required when called: 3
  1811 ;; This function calls:
  1812 ;;		_fputc
  1813 ;;		_fputs
  1814 ;; This function is called by:
  1815 ;;		_utoa
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819     0007                     _pad:	
  1820                           ;psect for function _pad
  1821                           
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1825                           ;pad@fp stored from wreg
  1826     0007  00A7               	movwf	pad@fp
  1827                           
  1828                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 193: static void pad
      +                          (FILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.45/pic/sources/c99/common/do
      +                          prnt.c: 194: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 195:  
      +                             int i;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 199:     if
      +                           (flags & (1 << 0)) {
  1829     0008  1C6F               	btfss	_flags,0
  1830     0009  2812               	goto	l1492
  1831                           
  1832                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 200:         fputs((
      +                          const char *)buf, fp);
  1833     000A  0827               	movf	pad@fp,w
  1834     000B  00F8               	movwf	fputs@fp
  1835     000C  087B               	movf	pad@buf,w
  1836     000D  120A  158A  2590  120A  118A  	fcall	_fputs
  1837     0012                     l1492:
  1838                           
  1839                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 205:  if (p < 0) {
  1840     0012  1FFD               	btfss	pad@p+1,7
  1841     0013  2816               	goto	l699
  1842                           
  1843                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 206:   p = 0;
  1844     0014  01FC               	clrf	pad@p
  1845     0015  01FD               	clrf	pad@p+1
  1846     0016                     l699:	
  1847                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 207:  }
  1848                           
  1849                           
  1850                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 208:     i = 0;
  1851     0016  01A5               	clrf	pad@i
  1852     0017  01A6               	clrf	pad@i+1
  1853     0018                     l1500:	
  1854                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 209:     while (i < 
      +                          p) {
  1855                           
  1856                           
  1857                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 209:     while (i < 
      +                          p) {
  1858     0018  0826               	movf	pad@i+1,w
  1859     0019  3A80               	xorlw	128
  1860     001A  00A4               	movwf	??_pad
  1861     001B  087D               	movf	pad@p+1,w
  1862     001C  3A80               	xorlw	128
  1863     001D  0224               	subwf	??_pad,w
  1864     001E  1D03               	skipz
  1865     001F  2822               	goto	u1815
  1866     0020  087C               	movf	pad@p,w
  1867     0021  0225               	subwf	pad@i,w
  1868     0022                     u1815:
  1869     0022  1803               	btfsc	3,0
  1870     0023  283A               	goto	l702
  1871                           
  1872                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 210:         fputc('
      +                           ', fp);
  1873     0024  3020               	movlw	32
  1874     0025  00F0               	movwf	fputc@c
  1875     0026  3000               	movlw	0
  1876     0027  00F1               	movwf	fputc@c+1
  1877     0028  1283               	bcf	3,5	;RP0=0, select bank0
  1878     0029  1303               	bcf	3,6	;RP1=0, select bank0
  1879     002A  0827               	movf	pad@fp,w
  1880     002B  00F2               	movwf	fputc@fp
  1881     002C  120A  158A  26A5  120A  118A  	fcall	_fputc
  1882                           
  1883                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 211:         ++i;
  1884     0031  3001               	movlw	1
  1885     0032  1283               	bcf	3,5	;RP0=0, select bank0
  1886     0033  1303               	bcf	3,6	;RP1=0, select bank0
  1887     0034  07A5               	addwf	pad@i,f
  1888     0035  1803               	skipnc
  1889     0036  0AA6               	incf	pad@i+1,f
  1890     0037  3000               	movlw	0
  1891     0038  07A6               	addwf	pad@i+1,f
  1892     0039  2818               	goto	l1500
  1893     003A                     l702:
  1894                           
  1895                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 216:     if (!(flags
      +                           & (1 << 0))) {
  1896     003A  1283               	bcf	3,5	;RP0=0, select bank0
  1897     003B  1303               	bcf	3,6	;RP1=0, select bank0
  1898     003C  186F               	btfsc	_flags,0
  1899     003D  0008               	return
  1900                           
  1901                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 218:         fputs((
      +                          const char *)buf, fp);
  1902     003E  0827               	movf	pad@fp,w
  1903     003F  00F8               	movwf	fputs@fp
  1904     0040  087B               	movf	pad@buf,w
  1905     0041  120A  158A  2590   	fcall	_fputs
  1906     0044  0008               	return
  1907     0045                     __end_of_pad:
  1908                           
  1909                           	psect	text6
  1910     0D90                     __ptext6:	
  1911 ;; *************** function _fputs *****************
  1912 ;; Defined at:
  1913 ;;		line 8 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/nf_fputs.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  s               1    wreg     PTR const unsigned char 
  1916 ;;		 -> dbuf(32), 
  1917 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  1918 ;;		 -> sprintf@f(11), 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  1921 ;;		 -> dbuf(32), 
  1922 ;;  i               2    1[BANK0 ] int 
  1923 ;;  c               1    0[BANK0 ] unsigned char 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  2    8[COMMON] int 
  1926 ;; Registers used:
  1927 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 300/0
  1930 ;;		On exit  : B00/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1933 ;;      Params:         1       0       0       0       0
  1934 ;;      Locals:         0       4       0       0       0
  1935 ;;      Temps:          2       0       0       0       0
  1936 ;;      Totals:         3       4       0       0       0
  1937 ;;Total ram usage:        7 bytes
  1938 ;; Hardware stack levels used: 1
  1939 ;; Hardware stack levels required when called: 2
  1940 ;; This function calls:
  1941 ;;		_fputc
  1942 ;; This function is called by:
  1943 ;;		_pad
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947     0D90                     _fputs:	
  1948                           ;psect for function _fputs
  1949                           
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1953                           ;fputs@s stored from wreg
  1954     0D90  00A3               	movwf	fputs@s
  1955     0D91  01A1               	clrf	fputs@i
  1956     0D92  01A2               	clrf	fputs@i+1
  1957     0D93                     l1418:
  1958     0D93  0821               	movf	fputs@i,w
  1959     0D94  0723               	addwf	fputs@s,w
  1960     0D95  00F9               	movwf	??_fputs
  1961     0D96  0879               	movf	??_fputs,w
  1962     0D97  0084               	movwf	4
  1963     0D98  1383               	bcf	3,7	;select IRP bank0
  1964     0D99  0800               	movf	0,w
  1965     0D9A  00A0               	movwf	fputs@c
  1966     0D9B  0820               	movf	fputs@c,w
  1967     0D9C  1903               	btfsc	3,2
  1968     0D9D  0008               	return
  1969     0D9E  0820               	movf	fputs@c,w
  1970     0D9F  00F9               	movwf	??_fputs
  1971     0DA0  01FA               	clrf	??_fputs+1
  1972     0DA1  0879               	movf	??_fputs,w
  1973     0DA2  00F0               	movwf	fputc@c
  1974     0DA3  087A               	movf	??_fputs+1,w
  1975     0DA4  00F1               	movwf	fputc@c+1
  1976     0DA5  0878               	movf	fputs@fp,w
  1977     0DA6  00F2               	movwf	fputc@fp
  1978     0DA7  120A  158A  26A5  120A  158A  	fcall	_fputc
  1979     0DAC  3001               	movlw	1
  1980     0DAD  1283               	bcf	3,5	;RP0=0, select bank0
  1981     0DAE  1303               	bcf	3,6	;RP1=0, select bank0
  1982     0DAF  07A1               	addwf	fputs@i,f
  1983     0DB0  1803               	skipnc
  1984     0DB1  0AA2               	incf	fputs@i+1,f
  1985     0DB2  3000               	movlw	0
  1986     0DB3  07A2               	addwf	fputs@i+1,f
  1987     0DB4  2D93               	goto	l1418
  1988     0DB5                     __end_of_fputs:
  1989                           
  1990                           	psect	text7
  1991     0EA5                     __ptext7:	
  1992 ;; *************** function _fputc *****************
  1993 ;; Defined at:
  1994 ;;		line 8 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/nf_fputc.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  c               2    0[COMMON] int 
  1997 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  1998 ;;		 -> sprintf@f(11), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  2    0[COMMON] int 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 300/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2010 ;;      Params:         3       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0
  2012 ;;      Temps:          5       0       0       0       0
  2013 ;;      Totals:         8       0       0       0       0
  2014 ;;Total ram usage:        8 bytes
  2015 ;; Hardware stack levels used: 1
  2016 ;; Hardware stack levels required when called: 1
  2017 ;; This function calls:
  2018 ;;		_putch
  2019 ;; This function is called by:
  2020 ;;		_pad
  2021 ;;		_vfpfcnvrt
  2022 ;;		_fputs
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026     0EA5                     _fputc:	
  2027                           ;psect for function _fputc
  2028                           
  2029                           
  2030                           ;incstack = 0
  2031                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2032     0EA5  0872               	movf	fputc@fp,w
  2033     0EA6  1D03               	btfss	3,2
  2034     0EA7  0872               	movf	fputc@fp,w
  2035     0EA8  1D03               	btfss	3,2
  2036     0EA9  2EAF               	goto	l1404
  2037     0EAA  0870               	movf	fputc@c,w
  2038     0EAB  120A  118A  2006   	fcall	_putch
  2039     0EAE  0008               	return
  2040     0EAF                     l1404:
  2041     0EAF  0872               	movf	fputc@fp,w
  2042     0EB0  3E09               	addlw	9
  2043     0EB1  0084               	movwf	4
  2044     0EB2  1383               	bcf	3,7	;select IRP bank0
  2045     0EB3  0800               	movf	0,w
  2046     0EB4  00F3               	movwf	??_fputc
  2047     0EB5  0A84               	incf	4,f
  2048     0EB6  0800               	movf	0,w
  2049     0EB7  00F4               	movwf	??_fputc+1
  2050     0EB8  0873               	movf	??_fputc,w
  2051     0EB9  0474               	iorwf	??_fputc+1,w
  2052     0EBA  1903               	btfsc	3,2
  2053     0EBB  2ED8               	goto	l1408
  2054     0EBC  0872               	movf	fputc@fp,w
  2055     0EBD  3E09               	addlw	9
  2056     0EBE  0084               	movwf	4
  2057     0EBF  0800               	movf	0,w
  2058     0EC0  00F3               	movwf	??_fputc
  2059     0EC1  0A84               	incf	4,f
  2060     0EC2  0800               	movf	0,w
  2061     0EC3  00F4               	movwf	??_fputc+1
  2062     0EC4  0872               	movf	fputc@fp,w
  2063     0EC5  3E02               	addlw	2
  2064     0EC6  0084               	movwf	4
  2065     0EC7  0800               	movf	0,w
  2066     0EC8  00F5               	movwf	??_fputc+2
  2067     0EC9  0A84               	incf	4,f
  2068     0ECA  0800               	movf	0,w
  2069     0ECB  00F6               	movwf	??_fputc+3
  2070     0ECC  0876               	movf	??_fputc+3,w
  2071     0ECD  3A80               	xorlw	128
  2072     0ECE  00F7               	movwf	??_fputc+4
  2073     0ECF  0874               	movf	??_fputc+1,w
  2074     0ED0  3A80               	xorlw	128
  2075     0ED1  0277               	subwf	??_fputc+4,w
  2076     0ED2  1D03               	skipz
  2077     0ED3  2ED6               	goto	u1575
  2078     0ED4  0873               	movf	??_fputc,w
  2079     0ED5  0275               	subwf	??_fputc+2,w
  2080     0ED6                     u1575:
  2081     0ED6  1803               	skipnc
  2082     0ED7  0008               	return
  2083     0ED8                     l1408:
  2084     0ED8  0872               	movf	fputc@fp,w
  2085     0ED9  3E02               	addlw	2
  2086     0EDA  0084               	movwf	4
  2087     0EDB  1383               	bcf	3,7	;select IRP bank0
  2088     0EDC  0800               	movf	0,w
  2089     0EDD  00F3               	movwf	??_fputc
  2090     0EDE  0872               	movf	fputc@fp,w
  2091     0EDF  0084               	movwf	4
  2092     0EE0  0800               	movf	0,w
  2093     0EE1  0773               	addwf	??_fputc,w
  2094     0EE2  00F4               	movwf	??_fputc+1
  2095     0EE3  0874               	movf	??_fputc+1,w
  2096     0EE4  0084               	movwf	4
  2097     0EE5  0870               	movf	fputc@c,w
  2098     0EE6  0080               	movwf	0
  2099     0EE7  0872               	movf	fputc@fp,w
  2100     0EE8  3E02               	addlw	2
  2101     0EE9  0084               	movwf	4
  2102     0EEA  3001               	movlw	1
  2103     0EEB  0780               	addwf	0,f
  2104     0EEC  0A84               	incf	4,f
  2105     0EED  1803               	skipnc
  2106     0EEE  0A80               	incf	0,f
  2107     0EEF  0008               	return
  2108     0EF0                     __end_of_fputc:
  2109                           
  2110                           	psect	text8
  2111     0006                     __ptext8:	
  2112 ;; *************** function _putch *****************
  2113 ;; Defined at:
  2114 ;;		line 7 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/putch.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  c               1    wreg     unsigned char 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  c               1    0[COMMON] unsigned char 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg
  2123 ;; Tracked objects:
  2124 ;;		On entry : 300/0
  2125 ;;		On exit  : 300/0
  2126 ;;		Unchanged: 300/0
  2127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2128 ;;      Params:         0       0       0       0       0
  2129 ;;      Locals:         0       0       0       0       0
  2130 ;;      Temps:          0       0       0       0       0
  2131 ;;      Totals:         0       0       0       0       0
  2132 ;;Total ram usage:        0 bytes
  2133 ;; Hardware stack levels used: 1
  2134 ;; This function calls:
  2135 ;;		Nothing
  2136 ;; This function is called by:
  2137 ;;		_fputc
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141     0006                     _putch:	
  2142                           ;psect for function _putch
  2143                           
  2144                           
  2145                           ;incstack = 0
  2146                           ; Regs used in _putch: [wreg]
  2147     0006  0008               	return
  2148     0007                     __end_of_putch:
  2149                           
  2150                           	psect	text9
  2151     0E37                     __ptext9:	
  2152 ;; *************** function ___lwmod *****************
  2153 ;; Defined at:
  2154 ;;		line 5 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/lwmod.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  divisor         2    0[COMMON] unsigned int 
  2157 ;;  dividend        2    2[COMMON] unsigned int 
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;  counter         1    5[COMMON] unsigned char 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  2    0[COMMON] unsigned int 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2, status,0
  2164 ;; Tracked objects:
  2165 ;;		On entry : 300/0
  2166 ;;		On exit  : 300/0
  2167 ;;		Unchanged: 300/0
  2168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2169 ;;      Params:         4       0       0       0       0
  2170 ;;      Locals:         1       0       0       0       0
  2171 ;;      Temps:          1       0       0       0       0
  2172 ;;      Totals:         6       0       0       0       0
  2173 ;;Total ram usage:        6 bytes
  2174 ;; Hardware stack levels used: 1
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_utoa
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182     0E37                     ___lwmod:	
  2183                           ;psect for function ___lwmod
  2184                           
  2185                           
  2186                           ;incstack = 0
  2187                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2188     0E37  0870               	movf	___lwmod@divisor,w
  2189     0E38  0471               	iorwf	___lwmod@divisor+1,w
  2190     0E39  1903               	btfsc	3,2
  2191     0E3A  2E64               	goto	l1484
  2192     0E3B  01F5               	clrf	___lwmod@counter
  2193     0E3C  0AF5               	incf	___lwmod@counter,f
  2194     0E3D                     l1474:
  2195     0E3D  1BF1               	btfsc	___lwmod@divisor+1,7
  2196     0E3E  2E4B               	goto	l1476
  2197     0E3F  3001               	movlw	1
  2198     0E40                     u1745:
  2199     0E40  1003               	clrc
  2200     0E41  0DF0               	rlf	___lwmod@divisor,f
  2201     0E42  0DF1               	rlf	___lwmod@divisor+1,f
  2202     0E43  3EFF               	addlw	-1
  2203     0E44  1D03               	skipz
  2204     0E45  2E40               	goto	u1745
  2205     0E46  3001               	movlw	1
  2206     0E47  00F4               	movwf	??___lwmod
  2207     0E48  0874               	movf	??___lwmod,w
  2208     0E49  07F5               	addwf	___lwmod@counter,f
  2209     0E4A  2E3D               	goto	l1474
  2210     0E4B                     l1476:
  2211     0E4B  0871               	movf	___lwmod@divisor+1,w
  2212     0E4C  0273               	subwf	___lwmod@dividend+1,w
  2213     0E4D  1D03               	skipz
  2214     0E4E  2E51               	goto	u1765
  2215     0E4F  0870               	movf	___lwmod@divisor,w
  2216     0E50  0272               	subwf	___lwmod@dividend,w
  2217     0E51                     u1765:
  2218     0E51  1C03               	skipc
  2219     0E52  2E59               	goto	l1480
  2220     0E53  0870               	movf	___lwmod@divisor,w
  2221     0E54  02F2               	subwf	___lwmod@dividend,f
  2222     0E55  0871               	movf	___lwmod@divisor+1,w
  2223     0E56  1C03               	skipc
  2224     0E57  03F3               	decf	___lwmod@dividend+1,f
  2225     0E58  02F3               	subwf	___lwmod@dividend+1,f
  2226     0E59                     l1480:
  2227     0E59  3001               	movlw	1
  2228     0E5A                     u1775:
  2229     0E5A  1003               	clrc
  2230     0E5B  0CF1               	rrf	___lwmod@divisor+1,f
  2231     0E5C  0CF0               	rrf	___lwmod@divisor,f
  2232     0E5D  3EFF               	addlw	-1
  2233     0E5E  1D03               	skipz
  2234     0E5F  2E5A               	goto	u1775
  2235     0E60  3001               	movlw	1
  2236     0E61  02F5               	subwf	___lwmod@counter,f
  2237     0E62  1D03               	btfss	3,2
  2238     0E63  2E4B               	goto	l1476
  2239     0E64                     l1484:
  2240     0E64  0873               	movf	___lwmod@dividend+1,w
  2241     0E65  00F1               	movwf	?___lwmod+1
  2242     0E66  0872               	movf	___lwmod@dividend,w
  2243     0E67  00F0               	movwf	?___lwmod
  2244     0E68  0008               	return
  2245     0E69                     __end_of___lwmod:
  2246                           
  2247                           	psect	text10
  2248     0E69                     __ptext10:	
  2249 ;; *************** function ___lwdiv *****************
  2250 ;; Defined at:
  2251 ;;		line 5 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/lwdiv.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  divisor         2    0[COMMON] unsigned int 
  2254 ;;  dividend        2    2[COMMON] unsigned int 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  quotient        2    5[COMMON] unsigned int 
  2257 ;;  counter         1    7[COMMON] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  2    0[COMMON] unsigned int 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0
  2262 ;; Tracked objects:
  2263 ;;		On entry : B00/0
  2264 ;;		On exit  : B00/0
  2265 ;;		Unchanged: B00/0
  2266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2267 ;;      Params:         4       0       0       0       0
  2268 ;;      Locals:         3       0       0       0       0
  2269 ;;      Temps:          1       0       0       0       0
  2270 ;;      Totals:         8       0       0       0       0
  2271 ;;Total ram usage:        8 bytes
  2272 ;; Hardware stack levels used: 1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_utoa
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280     0E69                     ___lwdiv:	
  2281                           ;psect for function ___lwdiv
  2282                           
  2283                           
  2284                           ;incstack = 0
  2285                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2286     0E69  01F5               	clrf	___lwdiv@quotient
  2287     0E6A  01F6               	clrf	___lwdiv@quotient+1
  2288     0E6B  0870               	movf	___lwdiv@divisor,w
  2289     0E6C  0471               	iorwf	___lwdiv@divisor+1,w
  2290     0E6D  1903               	btfsc	3,2
  2291     0E6E  2EA0               	goto	l1462
  2292     0E6F  01F7               	clrf	___lwdiv@counter
  2293     0E70  0AF7               	incf	___lwdiv@counter,f
  2294     0E71                     l1450:
  2295     0E71  1BF1               	btfsc	___lwdiv@divisor+1,7
  2296     0E72  2E7F               	goto	l1452
  2297     0E73  3001               	movlw	1
  2298     0E74                     u1675:
  2299     0E74  1003               	clrc
  2300     0E75  0DF0               	rlf	___lwdiv@divisor,f
  2301     0E76  0DF1               	rlf	___lwdiv@divisor+1,f
  2302     0E77  3EFF               	addlw	-1
  2303     0E78  1D03               	skipz
  2304     0E79  2E74               	goto	u1675
  2305     0E7A  3001               	movlw	1
  2306     0E7B  00F4               	movwf	??___lwdiv
  2307     0E7C  0874               	movf	??___lwdiv,w
  2308     0E7D  07F7               	addwf	___lwdiv@counter,f
  2309     0E7E  2E71               	goto	l1450
  2310     0E7F                     l1452:
  2311     0E7F  3001               	movlw	1
  2312     0E80                     u1695:
  2313     0E80  1003               	clrc
  2314     0E81  0DF5               	rlf	___lwdiv@quotient,f
  2315     0E82  0DF6               	rlf	___lwdiv@quotient+1,f
  2316     0E83  3EFF               	addlw	-1
  2317     0E84  1D03               	skipz
  2318     0E85  2E80               	goto	u1695
  2319     0E86  0871               	movf	___lwdiv@divisor+1,w
  2320     0E87  0273               	subwf	___lwdiv@dividend+1,w
  2321     0E88  1D03               	skipz
  2322     0E89  2E8C               	goto	u1705
  2323     0E8A  0870               	movf	___lwdiv@divisor,w
  2324     0E8B  0272               	subwf	___lwdiv@dividend,w
  2325     0E8C                     u1705:
  2326     0E8C  1C03               	skipc
  2327     0E8D  2E95               	goto	l1458
  2328     0E8E  0870               	movf	___lwdiv@divisor,w
  2329     0E8F  02F2               	subwf	___lwdiv@dividend,f
  2330     0E90  0871               	movf	___lwdiv@divisor+1,w
  2331     0E91  1C03               	skipc
  2332     0E92  03F3               	decf	___lwdiv@dividend+1,f
  2333     0E93  02F3               	subwf	___lwdiv@dividend+1,f
  2334     0E94  1475               	bsf	___lwdiv@quotient,0
  2335     0E95                     l1458:
  2336     0E95  3001               	movlw	1
  2337     0E96                     u1715:
  2338     0E96  1003               	clrc
  2339     0E97  0CF1               	rrf	___lwdiv@divisor+1,f
  2340     0E98  0CF0               	rrf	___lwdiv@divisor,f
  2341     0E99  3EFF               	addlw	-1
  2342     0E9A  1D03               	skipz
  2343     0E9B  2E96               	goto	u1715
  2344     0E9C  3001               	movlw	1
  2345     0E9D  02F7               	subwf	___lwdiv@counter,f
  2346     0E9E  1D03               	btfss	3,2
  2347     0E9F  2E7F               	goto	l1452
  2348     0EA0                     l1462:
  2349     0EA0  0876               	movf	___lwdiv@quotient+1,w
  2350     0EA1  00F1               	movwf	?___lwdiv+1
  2351     0EA2  0875               	movf	___lwdiv@quotient,w
  2352     0EA3  00F0               	movwf	?___lwdiv
  2353     0EA4  0008               	return
  2354     0EA5                     __end_of___lwdiv:
  2355                           
  2356                           	psect	text11
  2357     0EF0                     __ptext11:	
  2358 ;; *************** function _read_prec_or_width *****************
  2359 ;; Defined at:
  2360 ;;		line 1158 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  fmt             1    wreg     PTR PTR const unsigned c
  2363 ;;		 -> vfprintf@cfmt(1), 
  2364 ;;  ap              1    6[COMMON] PTR PTR void [1]
  2365 ;;		 -> sprintf@ap(1), 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  fmt             1   12[COMMON] PTR PTR const unsigned c
  2368 ;;		 -> vfprintf@cfmt(1), 
  2369 ;;  c               1    9[COMMON] unsigned char 
  2370 ;;  n               2   10[COMMON] int 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  2    6[COMMON] int 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : B00/0
  2377 ;;		On exit  : 800/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2380 ;;      Params:         2       0       0       0       0
  2381 ;;      Locals:         4       0       0       0       0
  2382 ;;      Temps:          1       0       0       0       0
  2383 ;;      Totals:         7       0       0       0       0
  2384 ;;Total ram usage:        7 bytes
  2385 ;; Hardware stack levels used: 1
  2386 ;; Hardware stack levels required when called: 1
  2387 ;; This function calls:
  2388 ;;		___wmul
  2389 ;; This function is called by:
  2390 ;;		_vfpfcnvrt
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394     0EF0                     _read_prec_or_width:	
  2395                           ;psect for function _read_prec_or_width
  2396                           
  2397                           
  2398                           ;incstack = 0
  2399                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2400                           ;read_prec_or_width@fmt stored from wreg
  2401     0EF0  00FC               	movwf	read_prec_or_width@fmt
  2402                           
  2403                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1159:     int n = 0;
  2404     0EF1  01FA               	clrf	read_prec_or_width@n
  2405     0EF2  01FB               	clrf	read_prec_or_width@n+1
  2406                           
  2407                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1160:     if ((*fmt)
      +                          [0] == '*') {
  2408     0EF3  087C               	movf	read_prec_or_width@fmt,w
  2409     0EF4  0084               	movwf	4
  2410     0EF5  0800               	movf	0,w
  2411     0EF6  0084               	movwf	4
  2412     0EF7  120A  158A  200A  120A  158A  	fcall	stringdir
  2413     0EFC  3A2A               	xorlw	42
  2414     0EFD  1D03               	skipz
  2415     0EFE  2F2E               	goto	l1546
  2416                           
  2417                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1161:         ++*fmt
      +                          ;
  2418     0EFF  3001               	movlw	1
  2419     0F00  00F8               	movwf	??_read_prec_or_width
  2420     0F01  087C               	movf	read_prec_or_width@fmt,w
  2421     0F02  0084               	movwf	4
  2422     0F03  0878               	movf	??_read_prec_or_width,w
  2423     0F04  0780               	addwf	0,f
  2424                           
  2425                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1162:         n = (*
      +                          (int *)__va_arg(*(int **)*ap, (int)0));
  2426     0F05  0876               	movf	read_prec_or_width@ap,w
  2427     0F06  0084               	movwf	4
  2428     0F07  0800               	movf	0,w
  2429     0F08  00F8               	movwf	??_read_prec_or_width
  2430     0F09  3002               	movlw	2
  2431     0F0A  0780               	addwf	0,f
  2432     0F0B  0878               	movf	??_read_prec_or_width,w
  2433     0F0C  0084               	movwf	4
  2434     0F0D  0800               	movf	0,w
  2435     0F0E  00FA               	movwf	read_prec_or_width@n
  2436     0F0F  0A84               	incf	4,f
  2437     0F10  0800               	movf	0,w
  2438     0F11  00FB               	movwf	read_prec_or_width@n+1
  2439                           
  2440                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1163:     } else {
  2441     0F12  2F3D               	goto	l1548
  2442     0F13                     l1542:
  2443                           
  2444                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1166:             n 
      +                          = n * 10 + c;
  2445     0F13  087B               	movf	read_prec_or_width@n+1,w
  2446     0F14  00F1               	movwf	___wmul@multiplier+1
  2447     0F15  087A               	movf	read_prec_or_width@n,w
  2448     0F16  00F0               	movwf	___wmul@multiplier
  2449     0F17  300A               	movlw	10
  2450     0F18  00F2               	movwf	___wmul@multiplicand
  2451     0F19  3000               	movlw	0
  2452     0F1A  00F3               	movwf	___wmul@multiplicand+1
  2453     0F1B  120A  158A  2506  120A  158A  	fcall	___wmul
  2454     0F20  0879               	movf	read_prec_or_width@c,w
  2455     0F21  0770               	addwf	?___wmul,w
  2456     0F22  00FA               	movwf	read_prec_or_width@n
  2457     0F23  3000               	movlw	0
  2458     0F24  1803               	skipnc
  2459     0F25  3001               	movlw	1
  2460     0F26  0771               	addwf	?___wmul+1,w
  2461     0F27  00FB               	movwf	read_prec_or_width@n+1
  2462                           
  2463                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1167:             ++
      +                          *fmt;
  2464     0F28  3001               	movlw	1
  2465     0F29  00F8               	movwf	??_read_prec_or_width
  2466     0F2A  087C               	movf	read_prec_or_width@fmt,w
  2467     0F2B  0084               	movwf	4
  2468     0F2C  0878               	movf	??_read_prec_or_width,w
  2469     0F2D  0780               	addwf	0,f
  2470     0F2E                     l1546:
  2471                           
  2472                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1165:         while 
      +                          ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2473     0F2E  087C               	movf	read_prec_or_width@fmt,w
  2474     0F2F  0084               	movwf	4
  2475     0F30  0800               	movf	0,w
  2476     0F31  0084               	movwf	4
  2477     0F32  120A  158A  200A  120A  158A  	fcall	stringdir
  2478     0F37  3ED0               	addlw	208
  2479     0F38  00F9               	movwf	read_prec_or_width@c
  2480     0F39  300A               	movlw	10
  2481     0F3A  0279               	subwf	read_prec_or_width@c,w
  2482     0F3B  1C03               	skipc
  2483     0F3C  2F13               	goto	l1542
  2484     0F3D                     l1548:
  2485                           
  2486                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1170:     return n;
  2487     0F3D  087B               	movf	read_prec_or_width@n+1,w
  2488     0F3E  00F7               	movwf	?_read_prec_or_width+1
  2489     0F3F  087A               	movf	read_prec_or_width@n,w
  2490     0F40  00F6               	movwf	?_read_prec_or_width
  2491     0F41  0008               	return
  2492     0F42                     __end_of_read_prec_or_width:
  2493                           
  2494                           	psect	text12
  2495     0D06                     __ptext12:	
  2496 ;; *************** function ___wmul *****************
  2497 ;; Defined at:
  2498 ;;		line 15 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  multiplier      2    0[COMMON] unsigned int 
  2501 ;;  multiplicand    2    2[COMMON] unsigned int 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  product         2    4[COMMON] unsigned int 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  2    0[COMMON] unsigned int 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0
  2508 ;; Tracked objects:
  2509 ;;		On entry : 800/0
  2510 ;;		On exit  : 800/0
  2511 ;;		Unchanged: 800/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2513 ;;      Params:         4       0       0       0       0
  2514 ;;      Locals:         2       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0
  2516 ;;      Totals:         6       0       0       0       0
  2517 ;;Total ram usage:        6 bytes
  2518 ;; Hardware stack levels used: 1
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_read_prec_or_width
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526     0D06                     ___wmul:	
  2527                           ;psect for function ___wmul
  2528                           
  2529                           
  2530                           ;incstack = 0
  2531                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2532     0D06  01F4               	clrf	___wmul@product
  2533     0D07  01F5               	clrf	___wmul@product+1
  2534     0D08                     l1428:
  2535     0D08  1C70               	btfss	___wmul@multiplier,0
  2536     0D09  2D10               	goto	l218
  2537     0D0A  0872               	movf	___wmul@multiplicand,w
  2538     0D0B  07F4               	addwf	___wmul@product,f
  2539     0D0C  1803               	skipnc
  2540     0D0D  0AF5               	incf	___wmul@product+1,f
  2541     0D0E  0873               	movf	___wmul@multiplicand+1,w
  2542     0D0F  07F5               	addwf	___wmul@product+1,f
  2543     0D10                     l218:
  2544     0D10  3001               	movlw	1
  2545     0D11                     u1635:
  2546     0D11  1003               	clrc
  2547     0D12  0DF2               	rlf	___wmul@multiplicand,f
  2548     0D13  0DF3               	rlf	___wmul@multiplicand+1,f
  2549     0D14  3EFF               	addlw	-1
  2550     0D15  1D03               	skipz
  2551     0D16  2D11               	goto	u1635
  2552     0D17  3001               	movlw	1
  2553     0D18                     u1645:
  2554     0D18  1003               	clrc
  2555     0D19  0CF1               	rrf	___wmul@multiplier+1,f
  2556     0D1A  0CF0               	rrf	___wmul@multiplier,f
  2557     0D1B  3EFF               	addlw	-1
  2558     0D1C  1D03               	skipz
  2559     0D1D  2D18               	goto	u1645
  2560     0D1E  0870               	movf	___wmul@multiplier,w
  2561     0D1F  0471               	iorwf	___wmul@multiplier+1,w
  2562     0D20  1D03               	btfss	3,2
  2563     0D21  2D08               	goto	l1428
  2564     0D22  0875               	movf	___wmul@product+1,w
  2565     0D23  00F1               	movwf	?___wmul+1
  2566     0D24  0874               	movf	___wmul@product,w
  2567     0D25  00F0               	movwf	?___wmul
  2568     0D26  0008               	return
  2569     0D27                     __end_of___wmul:
  2570                           
  2571                           	psect	text13
  2572     0C89                     __ptext13:	
  2573 ;; *************** function _readADC *****************
  2574 ;; Defined at:
  2575 ;;		line 68 in file "newmain.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  2    0[COMMON] unsigned int 
  2582 ;; Registers used:
  2583 ;;		wreg
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 300/100
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2589 ;;      Params:         2       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0
  2592 ;;      Totals:         2       0       0       0       0
  2593 ;;Total ram usage:        2 bytes
  2594 ;; Hardware stack levels used: 1
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602     0C89                     _readADC:	
  2603                           ;psect for function _readADC
  2604                           
  2605                           
  2606                           ;newmain.c: 69:     initADC();
  2607                           
  2608                           ;incstack = 0
  2609                           ; Regs used in _readADC: [wreg]
  2610     0C89  1283               	bcf	3,5	;RP0=0, select bank0
  2611     0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  2612     0C8B  149F               	bsf	31,1	;volatile
  2613     0C8C                     l116:	
  2614                           ;newmain.c: 70:     initRPM();
  2615                           
  2616     0C8C  189F               	btfsc	31,1	;volatile
  2617     0C8D  2C8C               	goto	l116
  2618                           
  2619                           ;newmain.c: 71: 
  2620     0C8E  081E               	movf	30,w	;volatile
  2621     0C8F  00F1               	movwf	?_readADC+1
  2622     0C90  1683               	bsf	3,5	;RP0=1, select bank1
  2623     0C91  081E               	movf	30,w	;volatile
  2624     0C92  00F0               	movwf	?_readADC
  2625     0C93  0008               	return
  2626     0C94                     __end_of_readADC:
  2627                           
  2628                           	psect	text14
  2629     0C7E                     __ptext14:	
  2630 ;; *************** function _initRPM *****************
  2631 ;; Defined at:
  2632 ;;		line 30 in file "newmain.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0
  2641 ;; Tracked objects:
  2642 ;;		On entry : B00/100
  2643 ;;		On exit  : B00/0
  2644 ;;		Unchanged: 800/0
  2645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2646 ;;      Params:         0       0       0       0       0
  2647 ;;      Locals:         0       0       0       0       0
  2648 ;;      Temps:          0       0       0       0       0
  2649 ;;      Totals:         0       0       0       0       0
  2650 ;;Total ram usage:        0 bytes
  2651 ;; Hardware stack levels used: 1
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659     0C7E                     _initRPM:	
  2660                           ;psect for function _initRPM
  2661                           
  2662                           
  2663                           ;newmain.c: 32:     INTCONbits.TMR0IF = 0;
  2664                           
  2665                           ;incstack = 0
  2666                           ; Regs used in _initRPM: [wreg+status,2+status,0]
  2667     0C7E  1406               	bsf	6,0	;volatile
  2668                           
  2669                           ;newmain.c: 33: 
  2670     0C7F  1703               	bsf	3,6	;RP1=1, select bank3
  2671     0C80  0189               	clrf	9	;volatile
  2672                           
  2673                           ;newmain.c: 35:         currentState = PORTBbits.RB0;
  2674     0C81  1303               	bcf	3,6	;RP1=0, select bank1
  2675     0C82  1281               	bcf	1,5	;volatile
  2676                           
  2677                           ;newmain.c: 36: 
  2678     0C83  1181               	bcf	1,3	;volatile
  2679                           
  2680                           ;newmain.c: 37:         if (currentState != lastState && currentState == 1) {
  2681     0C84  3007               	movlw	7
  2682     0C85  0481               	iorwf	1,f	;volatile
  2683                           
  2684                           ;newmain.c: 38:             pulseCount++;
  2685     0C86  1283               	bcf	3,5	;RP0=0, select bank0
  2686     0C87  0181               	clrf	1	;volatile
  2687     0C88  0008               	return
  2688     0C89                     __end_of_initRPM:
  2689                           
  2690                           	psect	text15
  2691     0C94                     __ptext15:	
  2692 ;; *************** function _initPWM *****************
  2693 ;; Defined at:
  2694 ;;		line 19 in file "newmain.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;		None
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg, status,2
  2703 ;; Tracked objects:
  2704 ;;		On entry : B00/0
  2705 ;;		On exit  : B00/0
  2706 ;;		Unchanged: 800/0
  2707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2708 ;;      Params:         0       0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0
  2711 ;;      Totals:         0       0       0       0       0
  2712 ;;Total ram usage:        0 bytes
  2713 ;; Hardware stack levels used: 1
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721     0C94                     _initPWM:	
  2722                           ;psect for function _initPWM
  2723                           
  2724                           
  2725                           ;newmain.c: 20:     OPTION_REGbits.T0CS = 0;
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _initPWM: [wreg+status,2]
  2729     0C94  3007               	movlw	7
  2730     0C95  0092               	movwf	18	;volatile
  2731                           
  2732                           ;newmain.c: 21:     OPTION_REGbits.PSA = 0;
  2733     0C96  30FF               	movlw	255
  2734     0C97  1683               	bsf	3,5	;RP0=1, select bank1
  2735     0C98  0092               	movwf	18	;volatile
  2736                           
  2737                           ;newmain.c: 22:     OPTION_REGbits.PS = 0b111;
  2738     0C99  300C               	movlw	12
  2739     0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  2740     0C9B  0097               	movwf	23	;volatile
  2741                           
  2742                           ;newmain.c: 23:     TMR0 = 0;
  2743     0C9C  0195               	clrf	21	;volatile
  2744                           
  2745                           ;newmain.c: 24: }
  2746     0C9D  3004               	movlw	4
  2747     0C9E  0092               	movwf	18	;volatile
  2748     0C9F  0008               	return
  2749     0CA0                     __end_of_initPWM:
  2750                           
  2751                           	psect	text16
  2752     0CA0                     __ptext16:	
  2753 ;; *************** function _initADC *****************
  2754 ;; Defined at:
  2755 ;;		line 61 in file "newmain.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2
  2764 ;; Tracked objects:
  2765 ;;		On entry : B00/0
  2766 ;;		On exit  : B00/100
  2767 ;;		Unchanged: 800/0
  2768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2769 ;;      Params:         0       0       0       0       0
  2770 ;;      Locals:         0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0
  2772 ;;      Totals:         0       0       0       0       0
  2773 ;;Total ram usage:        0 bytes
  2774 ;; Hardware stack levels used: 1
  2775 ;; This function calls:
  2776 ;;		Nothing
  2777 ;; This function is called by:
  2778 ;;		_main
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782     0CA0                     _initADC:	
  2783                           ;psect for function _initADC
  2784                           
  2785                           
  2786                           ;newmain.c: 62:     return voltage / 0.01;
  2787                           
  2788                           ;incstack = 0
  2789                           ; Regs used in _initADC: [wreg+status,2]
  2790     0CA0  1683               	bsf	3,5	;RP0=1, select bank1
  2791     0CA1  0187               	clrf	7	;volatile
  2792                           
  2793                           ;newmain.c: 63: }
  2794     0CA2  3001               	movlw	1
  2795     0CA3  1703               	bsf	3,6	;RP1=1, select bank3
  2796     0CA4  0088               	movwf	8	;volatile
  2797                           
  2798                           ;newmain.c: 64: 
  2799     0CA5  3001               	movlw	1
  2800     0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  2801     0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  2802     0CA8  009F               	movwf	31	;volatile
  2803                           
  2804                           ;newmain.c: 65: void main() {
  2805     0CA9  3080               	movlw	128
  2806     0CAA  1683               	bsf	3,5	;RP0=1, select bank1
  2807     0CAB  009F               	movwf	31	;volatile
  2808     0CAC  0008               	return
  2809     0CAD                     __end_of_initADC:
  2810                           
  2811                           	psect	text17
  2812     0D6D                     __ptext17:	
  2813 ;; *************** function _countPulses *****************
  2814 ;; Defined at:
  2815 ;;		line 41 in file "newmain.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  pulseCount      2    2[COMMON] unsigned int 
  2820 ;;  currentState    1    5[COMMON] unsigned char 
  2821 ;;  lastState       1    4[COMMON] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  2    0[COMMON] unsigned int 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 300/0
  2828 ;;		On exit  : 300/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2831 ;;      Params:         2       0       0       0       0
  2832 ;;      Locals:         4       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0
  2834 ;;      Totals:         6       0       0       0       0
  2835 ;;Total ram usage:        6 bytes
  2836 ;; Hardware stack levels used: 1
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844     0D6D                     _countPulses:	
  2845                           ;psect for function _countPulses
  2846                           
  2847                           
  2848                           ;newmain.c: 42: 
  2849                           
  2850                           ;incstack = 0
  2851                           ; Regs used in _countPulses: [wreg+status,2+status,0]
  2852     0D6D  01F2               	clrf	countPulses@pulseCount
  2853     0D6E  01F3               	clrf	countPulses@pulseCount+1
  2854                           
  2855                           ;newmain.c: 43:     return pulseCount;
  2856     0D6F  3000               	movlw	0
  2857     0D70  1806               	btfsc	6,0	;volatile
  2858     0D71  3001               	movlw	1
  2859     0D72  00F4               	movwf	countPulses@lastState
  2860                           
  2861                           ;newmain.c: 44: };newmain.c: 46: void initADC() {
  2862     0D73  0181               	clrf	1	;volatile
  2863                           
  2864                           ;newmain.c: 47:     TRISC = 0;
  2865     0D74  110B               	bcf	11,2	;volatile
  2866     0D75                     l1710:	
  2867                           ;newmain.c: 49:     ADCON0 = 0x01;
  2868                           
  2869                           
  2870                           ;newmain.c: 49:     ADCON0 = 0x01;
  2871     0D75  190B               	btfsc	11,2	;volatile
  2872     0D76  2D8B               	goto	l1712
  2873                           
  2874                           ;newmain.c: 50:     ADCON1 = 0x80;
  2875     0D77  3000               	movlw	0
  2876     0D78  1806               	btfsc	6,0	;volatile
  2877     0D79  3001               	movlw	1
  2878     0D7A  00F5               	movwf	countPulses@currentState
  2879                           
  2880                           ;newmain.c: 52: 
  2881     0D7B  0875               	movf	countPulses@currentState,w
  2882     0D7C  0674               	xorwf	countPulses@lastState,w
  2883     0D7D  1903               	skipnz
  2884     0D7E  2D88               	goto	l108
  2885     0D7F  0375               	decf	countPulses@currentState,w
  2886     0D80  1D03               	btfss	3,2
  2887     0D81  2D88               	goto	l108
  2888                           
  2889                           ;newmain.c: 53: unsigned int readADC() {
  2890     0D82  3001               	movlw	1
  2891     0D83  07F2               	addwf	countPulses@pulseCount,f
  2892     0D84  1803               	skipnc
  2893     0D85  0AF3               	incf	countPulses@pulseCount+1,f
  2894     0D86  3000               	movlw	0
  2895     0D87  07F3               	addwf	countPulses@pulseCount+1,f
  2896     0D88                     l108:	
  2897                           ;newmain.c: 54:     ADCON0bits.GO = 1;
  2898                           
  2899                           
  2900                           ;newmain.c: 55:     while (ADCON0bits.GO_nDONE);
  2901     0D88  0875               	movf	countPulses@currentState,w
  2902     0D89  00F4               	movwf	countPulses@lastState
  2903     0D8A  2D75               	goto	l1710
  2904     0D8B                     l1712:
  2905                           
  2906                           ;newmain.c: 58: 
  2907     0D8B  0873               	movf	countPulses@pulseCount+1,w
  2908     0D8C  00F1               	movwf	?_countPulses+1
  2909     0D8D  0872               	movf	countPulses@pulseCount,w
  2910     0D8E  00F0               	movwf	?_countPulses
  2911     0D8F  0008               	return
  2912     0D90                     __end_of_countPulses:
  2913                           
  2914                           	psect	text18
  2915     0143                     __ptext18:	
  2916 ;; *************** function ___xxtofl *****************
  2917 ;; Defined at:
  2918 ;;		line 10 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/xxtofl.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  sign            1    wreg     unsigned char 
  2921 ;;  val             4    0[COMMON] long 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  sign            1    8[COMMON] unsigned char 
  2924 ;;  arg             4   10[COMMON] unsigned long 
  2925 ;;  exp             1    9[COMMON] unsigned char 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  4    0[COMMON] unsigned char 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0
  2930 ;; Tracked objects:
  2931 ;;		On entry : 300/0
  2932 ;;		On exit  : 300/0
  2933 ;;		Unchanged: 300/0
  2934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2935 ;;      Params:         4       0       0       0       0
  2936 ;;      Locals:         6       0       0       0       0
  2937 ;;      Temps:          4       0       0       0       0
  2938 ;;      Totals:        14       0       0       0       0
  2939 ;;Total ram usage:       14 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_main
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948     0143                     ___xxtofl:	
  2949                           ;psect for function ___xxtofl
  2950                           
  2951                           
  2952                           ;incstack = 0
  2953                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  2954                           ;___xxtofl@sign stored from wreg
  2955     0143  00F8               	movwf	___xxtofl@sign
  2956     0144  0878               	movf	___xxtofl@sign,w
  2957     0145  1D03               	btfss	3,2
  2958     0146  1FF3               	btfss	___xxtofl@val+3,7
  2959     0147  2958               	goto	l1924
  2960     0148  0970               	comf	___xxtofl@val,w
  2961     0149  00FA               	movwf	___xxtofl@arg
  2962     014A  0971               	comf	___xxtofl@val+1,w
  2963     014B  00FB               	movwf	___xxtofl@arg+1
  2964     014C  0972               	comf	___xxtofl@val+2,w
  2965     014D  00FC               	movwf	___xxtofl@arg+2
  2966     014E  0973               	comf	___xxtofl@val+3,w
  2967     014F  00FD               	movwf	___xxtofl@arg+3
  2968     0150  0AFA               	incf	___xxtofl@arg,f
  2969     0151  1903               	skipnz
  2970     0152  0AFB               	incf	___xxtofl@arg+1,f
  2971     0153  1903               	skipnz
  2972     0154  0AFC               	incf	___xxtofl@arg+2,f
  2973     0155  1903               	skipnz
  2974     0156  0AFD               	incf	___xxtofl@arg+3,f
  2975     0157  2960               	goto	l659
  2976     0158                     l1924:
  2977     0158  0873               	movf	___xxtofl@val+3,w
  2978     0159  00FD               	movwf	___xxtofl@arg+3
  2979     015A  0872               	movf	___xxtofl@val+2,w
  2980     015B  00FC               	movwf	___xxtofl@arg+2
  2981     015C  0871               	movf	___xxtofl@val+1,w
  2982     015D  00FB               	movwf	___xxtofl@arg+1
  2983     015E  0870               	movf	___xxtofl@val,w
  2984     015F  00FA               	movwf	___xxtofl@arg
  2985     0160                     l659:
  2986     0160  0873               	movf	___xxtofl@val+3,w
  2987     0161  0472               	iorwf	___xxtofl@val+2,w
  2988     0162  0471               	iorwf	___xxtofl@val+1,w
  2989     0163  0470               	iorwf	___xxtofl@val,w
  2990     0164  1D03               	skipz
  2991     0165  296F               	goto	l1930
  2992     0166  3000               	movlw	0
  2993     0167  00F3               	movwf	?___xxtofl+3
  2994     0168  3000               	movlw	0
  2995     0169  00F2               	movwf	?___xxtofl+2
  2996     016A  3000               	movlw	0
  2997     016B  00F1               	movwf	?___xxtofl+1
  2998     016C  3000               	movlw	0
  2999     016D  00F0               	movwf	?___xxtofl
  3000     016E  0008               	return
  3001     016F                     l1930:
  3002     016F  3096               	movlw	150
  3003     0170  00F9               	movwf	___xxtofl@exp
  3004     0171                     l1934:
  3005     0171  30FE               	movlw	254
  3006     0172  057D               	andwf	___xxtofl@arg+3,w
  3007     0173  1903               	btfsc	3,2
  3008     0174  299E               	goto	l665
  3009     0175  3001               	movlw	1
  3010     0176  00F4               	movwf	??___xxtofl
  3011     0177  0874               	movf	??___xxtofl,w
  3012     0178  07F9               	addwf	___xxtofl@exp,f
  3013     0179  3001               	movlw	1
  3014     017A                     u2955:
  3015     017A  1003               	clrc
  3016     017B  0CFD               	rrf	___xxtofl@arg+3,f
  3017     017C  0CFC               	rrf	___xxtofl@arg+2,f
  3018     017D  0CFB               	rrf	___xxtofl@arg+1,f
  3019     017E  0CFA               	rrf	___xxtofl@arg,f
  3020     017F  3EFF               	addlw	-1
  3021     0180  1D03               	skipz
  3022     0181  297A               	goto	u2955
  3023     0182  2971               	goto	l1934
  3024     0183                     l1936:
  3025     0183  3001               	movlw	1
  3026     0184  00F4               	movwf	??___xxtofl
  3027     0185  0874               	movf	??___xxtofl,w
  3028     0186  07F9               	addwf	___xxtofl@exp,f
  3029     0187  3001               	movlw	1
  3030     0188  07FA               	addwf	___xxtofl@arg,f
  3031     0189  3000               	movlw	0
  3032     018A  1803               	skipnc
  3033     018B  3001               	movlw	1
  3034     018C  07FB               	addwf	___xxtofl@arg+1,f
  3035     018D  3000               	movlw	0
  3036     018E  1803               	skipnc
  3037     018F  3001               	movlw	1
  3038     0190  07FC               	addwf	___xxtofl@arg+2,f
  3039     0191  3000               	movlw	0
  3040     0192  1803               	skipnc
  3041     0193  3001               	movlw	1
  3042     0194  07FD               	addwf	___xxtofl@arg+3,f
  3043     0195  3001               	movlw	1
  3044     0196                     u2975:
  3045     0196  1003               	clrc
  3046     0197  0CFD               	rrf	___xxtofl@arg+3,f
  3047     0198  0CFC               	rrf	___xxtofl@arg+2,f
  3048     0199  0CFB               	rrf	___xxtofl@arg+1,f
  3049     019A  0CFA               	rrf	___xxtofl@arg,f
  3050     019B  3EFF               	addlw	-1
  3051     019C  1D03               	skipz
  3052     019D  2996               	goto	u2975
  3053     019E                     l665:
  3054     019E  30FF               	movlw	255
  3055     019F  057D               	andwf	___xxtofl@arg+3,w
  3056     01A0  1903               	btfsc	3,2
  3057     01A1  29B2               	goto	l1944
  3058     01A2  2983               	goto	l1936
  3059     01A3                     l1946:
  3060     01A3  3002               	movlw	2
  3061     01A4  0279               	subwf	___xxtofl@exp,w
  3062     01A5  1C03               	btfss	3,0
  3063     01A6  29B4               	goto	l672
  3064     01A7  3001               	movlw	1
  3065     01A8  02F9               	subwf	___xxtofl@exp,f
  3066     01A9  3001               	movlw	1
  3067     01AA  00F4               	movwf	??___xxtofl
  3068     01AB                     u2995:
  3069     01AB  1003               	clrc
  3070     01AC  0DFA               	rlf	___xxtofl@arg,f
  3071     01AD  0DFB               	rlf	___xxtofl@arg+1,f
  3072     01AE  0DFC               	rlf	___xxtofl@arg+2,f
  3073     01AF  0DFD               	rlf	___xxtofl@arg+3,f
  3074     01B0  0BF4               	decfsz	??___xxtofl,f
  3075     01B1  29AB               	goto	u2995
  3076     01B2                     l1944:
  3077     01B2  1FFC               	btfss	___xxtofl@arg+2,7
  3078     01B3  29A3               	goto	l1946
  3079     01B4                     l672:
  3080     01B4  1879               	btfsc	___xxtofl@exp,0
  3081     01B5  29BE               	goto	l673
  3082     01B6  30FF               	movlw	255
  3083     01B7  05FA               	andwf	___xxtofl@arg,f
  3084     01B8  30FF               	movlw	255
  3085     01B9  05FB               	andwf	___xxtofl@arg+1,f
  3086     01BA  307F               	movlw	127
  3087     01BB  05FC               	andwf	___xxtofl@arg+2,f
  3088     01BC  30FF               	movlw	255
  3089     01BD  05FD               	andwf	___xxtofl@arg+3,f
  3090     01BE                     l673:
  3091     01BE  1003               	clrc
  3092     01BF  0CF9               	rrf	___xxtofl@exp,f
  3093     01C0  0879               	movf	___xxtofl@exp,w
  3094     01C1  00F4               	movwf	??___xxtofl
  3095     01C2  01F5               	clrf	??___xxtofl+1
  3096     01C3  01F6               	clrf	??___xxtofl+2
  3097     01C4  01F7               	clrf	??___xxtofl+3
  3098     01C5  3018               	movlw	24
  3099     01C6                     u3035:
  3100     01C6  1003               	clrc
  3101     01C7  0DF4               	rlf	??___xxtofl,f
  3102     01C8  0DF5               	rlf	??___xxtofl+1,f
  3103     01C9  0DF6               	rlf	??___xxtofl+2,f
  3104     01CA  0DF7               	rlf	??___xxtofl+3,f
  3105     01CB  3EFF               	addlw	-1
  3106     01CC  1D03               	skipz
  3107     01CD  29C6               	goto	u3035
  3108     01CE  0874               	movf	??___xxtofl,w
  3109     01CF  04FA               	iorwf	___xxtofl@arg,f
  3110     01D0  0875               	movf	??___xxtofl+1,w
  3111     01D1  04FB               	iorwf	___xxtofl@arg+1,f
  3112     01D2  0876               	movf	??___xxtofl+2,w
  3113     01D3  04FC               	iorwf	___xxtofl@arg+2,f
  3114     01D4  0877               	movf	??___xxtofl+3,w
  3115     01D5  04FD               	iorwf	___xxtofl@arg+3,f
  3116     01D6  0878               	movf	___xxtofl@sign,w
  3117     01D7  1D03               	btfss	3,2
  3118     01D8  1FF3               	btfss	___xxtofl@val+3,7
  3119     01D9  29DB               	goto	l1958
  3120     01DA  17FD               	bsf	___xxtofl@arg+3,7
  3121     01DB                     l1958:
  3122     01DB  087D               	movf	___xxtofl@arg+3,w
  3123     01DC  00F3               	movwf	?___xxtofl+3
  3124     01DD  087C               	movf	___xxtofl@arg+2,w
  3125     01DE  00F2               	movwf	?___xxtofl+2
  3126     01DF  087B               	movf	___xxtofl@arg+1,w
  3127     01E0  00F1               	movwf	?___xxtofl+1
  3128     01E1  087A               	movf	___xxtofl@arg,w
  3129     01E2  00F0               	movwf	?___xxtofl
  3130     01E3  0008               	return
  3131     01E4                     __end_of___xxtofl:
  3132                           
  3133                           	psect	text19
  3134     0F99                     __ptext19:	
  3135 ;; *************** function ___fltol *****************
  3136 ;; Defined at:
  3137 ;;		line 43 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/fltol.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  f1              4   26[BANK0 ] unsigned char 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  exp1            1   35[BANK0 ] unsigned char 
  3142 ;;  sign1           1   34[BANK0 ] unsigned char 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  4   26[BANK0 ] long 
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0
  3147 ;; Tracked objects:
  3148 ;;		On entry : 300/0
  3149 ;;		On exit  : 300/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3152 ;;      Params:         0       4       0       0       0
  3153 ;;      Locals:         0       2       0       0       0
  3154 ;;      Temps:          0       4       0       0       0
  3155 ;;      Totals:         0      10       0       0       0
  3156 ;;Total ram usage:       10 bytes
  3157 ;; Hardware stack levels used: 1
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165     0F99                     ___fltol:	
  3166                           ;psect for function ___fltol
  3167                           
  3168                           
  3169                           ;incstack = 0
  3170                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  3171     0F99  1003               	clrc
  3172     0F9A  0D3C               	rlf	___fltol@f1+2,w
  3173     0F9B  0D3D               	rlf	___fltol@f1+3,w
  3174     0F9C  00C3               	movwf	___fltol@exp1
  3175     0F9D  0843               	movf	___fltol@exp1,w
  3176     0F9E  1D03               	btfss	3,2
  3177     0F9F  2FA9               	goto	l1748
  3178     0FA0                     l1744:
  3179     0FA0  3000               	movlw	0
  3180     0FA1  00BD               	movwf	?___fltol+3
  3181     0FA2  3000               	movlw	0
  3182     0FA3  00BC               	movwf	?___fltol+2
  3183     0FA4  3000               	movlw	0
  3184     0FA5  00BB               	movwf	?___fltol+1
  3185     0FA6  3000               	movlw	0
  3186     0FA7  00BA               	movwf	?___fltol
  3187     0FA8  0008               	return
  3188     0FA9                     l1748:
  3189     0FA9  083A               	movf	___fltol@f1,w
  3190     0FAA  00BE               	movwf	??___fltol
  3191     0FAB  083B               	movf	___fltol@f1+1,w
  3192     0FAC  00BF               	movwf	??___fltol+1
  3193     0FAD  083C               	movf	___fltol@f1+2,w
  3194     0FAE  00C0               	movwf	??___fltol+2
  3195     0FAF  083D               	movf	___fltol@f1+3,w
  3196     0FB0  00C1               	movwf	??___fltol+3
  3197     0FB1  301F               	movlw	31
  3198     0FB2                     u2475:
  3199     0FB2  1003               	clrc
  3200     0FB3  0CC1               	rrf	??___fltol+3,f
  3201     0FB4  0CC0               	rrf	??___fltol+2,f
  3202     0FB5  0CBF               	rrf	??___fltol+1,f
  3203     0FB6  0CBE               	rrf	??___fltol,f
  3204     0FB7  3EFF               	addlw	-1
  3205     0FB8  1D03               	skipz
  3206     0FB9  2FB2               	goto	u2475
  3207     0FBA  083E               	movf	??___fltol,w
  3208     0FBB  00C2               	movwf	___fltol@sign1
  3209     0FBC  17BC               	bsf	___fltol@f1+2,7
  3210     0FBD  30FF               	movlw	255
  3211     0FBE  05BA               	andwf	___fltol@f1,f
  3212     0FBF  30FF               	movlw	255
  3213     0FC0  05BB               	andwf	___fltol@f1+1,f
  3214     0FC1  30FF               	movlw	255
  3215     0FC2  05BC               	andwf	___fltol@f1+2,f
  3216     0FC3  3000               	movlw	0
  3217     0FC4  05BD               	andwf	___fltol@f1+3,f
  3218     0FC5  3096               	movlw	150
  3219     0FC6  02C3               	subwf	___fltol@exp1,f
  3220     0FC7  1FC3               	btfss	___fltol@exp1,7
  3221     0FC8  2FDE               	goto	l1766
  3222     0FC9  0843               	movf	___fltol@exp1,w
  3223     0FCA  3A80               	xorlw	128
  3224     0FCB  3E97               	addlw	151
  3225     0FCC  1C03               	btfss	3,0
  3226     0FCD  2FA0               	goto	l1744
  3227     0FCE                     l1764:
  3228     0FCE  3001               	movlw	1
  3229     0FCF                     u2505:
  3230     0FCF  1003               	clrc
  3231     0FD0  0CBD               	rrf	___fltol@f1+3,f
  3232     0FD1  0CBC               	rrf	___fltol@f1+2,f
  3233     0FD2  0CBB               	rrf	___fltol@f1+1,f
  3234     0FD3  0CBA               	rrf	___fltol@f1,f
  3235     0FD4  3EFF               	addlw	-1
  3236     0FD5  1D03               	skipz
  3237     0FD6  2FCF               	goto	u2505
  3238     0FD7  3001               	movlw	1
  3239     0FD8  00BE               	movwf	??___fltol
  3240     0FD9  083E               	movf	??___fltol,w
  3241     0FDA  07C3               	addwf	___fltol@exp1,f
  3242     0FDB  1903               	btfsc	3,2
  3243     0FDC  2FF1               	goto	l1774
  3244     0FDD  2FCE               	goto	l1764
  3245     0FDE                     l1766:
  3246     0FDE  3020               	movlw	32
  3247     0FDF  0243               	subwf	___fltol@exp1,w
  3248     0FE0  1803               	btfsc	3,0
  3249     0FE1  2FA0               	goto	l1744
  3250     0FE2                     l419:
  3251     0FE2  0843               	movf	___fltol@exp1,w
  3252     0FE3  1903               	btfsc	3,2
  3253     0FE4  2FF1               	goto	l1774
  3254     0FE5  3001               	movlw	1
  3255     0FE6  00BE               	movwf	??___fltol
  3256     0FE7                     u2535:
  3257     0FE7  1003               	clrc
  3258     0FE8  0DBA               	rlf	___fltol@f1,f
  3259     0FE9  0DBB               	rlf	___fltol@f1+1,f
  3260     0FEA  0DBC               	rlf	___fltol@f1+2,f
  3261     0FEB  0DBD               	rlf	___fltol@f1+3,f
  3262     0FEC  0BBE               	decfsz	??___fltol,f
  3263     0FED  2FE7               	goto	u2535
  3264     0FEE  3001               	movlw	1
  3265     0FEF  02C3               	subwf	___fltol@exp1,f
  3266     0FF0  2FE2               	goto	l419
  3267     0FF1                     l1774:
  3268     0FF1  0842               	movf	___fltol@sign1,w
  3269     0FF2  1903               	btfsc	3,2
  3270     0FF3  0008               	return
  3271     0FF4  09BA               	comf	___fltol@f1,f
  3272     0FF5  09BB               	comf	___fltol@f1+1,f
  3273     0FF6  09BC               	comf	___fltol@f1+2,f
  3274     0FF7  09BD               	comf	___fltol@f1+3,f
  3275     0FF8  0ABA               	incf	___fltol@f1,f
  3276     0FF9  1903               	skipnz
  3277     0FFA  0ABB               	incf	___fltol@f1+1,f
  3278     0FFB  1903               	skipnz
  3279     0FFC  0ABC               	incf	___fltol@f1+2,f
  3280     0FFD  1903               	skipnz
  3281     0FFE  0ABD               	incf	___fltol@f1+3,f
  3282     0FFF  0008               	return
  3283     1000                     __end_of___fltol:
  3284                           
  3285                           	psect	text20
  3286     050A                     __ptext20:	
  3287 ;; *************** function ___flmul *****************
  3288 ;; Defined at:
  3289 ;;		line 8 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/sprcmul.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  b               4    0[BANK0 ] long 
  3292 ;;  a               4    4[BANK0 ] long 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  prod            4   20[BANK0 ] struct .
  3295 ;;  grs             4   15[BANK0 ] unsigned long 
  3296 ;;  temp            2   24[BANK0 ] struct .
  3297 ;;  bexp            1   19[BANK0 ] unsigned char 
  3298 ;;  aexp            1   14[BANK0 ] unsigned char 
  3299 ;;  sign            1   13[BANK0 ] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  4    0[BANK0 ] unsigned char 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 300/0
  3306 ;;		On exit  : 300/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3309 ;;      Params:         0       8       0       0       0
  3310 ;;      Locals:         0      13       0       0       0
  3311 ;;      Temps:          0       5       0       0       0
  3312 ;;      Totals:         0      26       0       0       0
  3313 ;;Total ram usage:       26 bytes
  3314 ;; Hardware stack levels used: 1
  3315 ;; Hardware stack levels required when called: 1
  3316 ;; This function calls:
  3317 ;;		__Umul8_16
  3318 ;; This function is called by:
  3319 ;;		_main
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323     050A                     ___flmul:	
  3324                           ;psect for function ___flmul
  3325                           
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3329     050A  0823               	movf	___flmul@b+3,w
  3330     050B  3980               	andlw	128
  3331     050C  00AD               	movwf	___flmul@sign
  3332     050D  0823               	movf	___flmul@b+3,w
  3333     050E  00A8               	movwf	??___flmul
  3334     050F  0728               	addwf	??___flmul,w
  3335     0510  00B3               	movwf	___flmul@bexp
  3336     0511  1BA2               	btfsc	___flmul@b+2,7
  3337     0512  1433               	bsf	___flmul@bexp,0
  3338     0513  0833               	movf	___flmul@bexp,w
  3339     0514  1903               	btfsc	3,2
  3340     0515  2D23               	goto	l1794
  3341     0516  0A33               	incf	___flmul@bexp,w
  3342     0517  1D03               	btfss	3,2
  3343     0518  2D21               	goto	l1792
  3344     0519  3000               	movlw	0
  3345     051A  00A3               	movwf	___flmul@b+3
  3346     051B  3000               	movlw	0
  3347     051C  00A2               	movwf	___flmul@b+2
  3348     051D  3000               	movlw	0
  3349     051E  00A1               	movwf	___flmul@b+1
  3350     051F  3000               	movlw	0
  3351     0520  00A0               	movwf	___flmul@b
  3352     0521                     l1792:
  3353     0521  17A2               	bsf	___flmul@b+2,7
  3354     0522  2D2B               	goto	l1796
  3355     0523                     l1794:
  3356     0523  3000               	movlw	0
  3357     0524  00A3               	movwf	___flmul@b+3
  3358     0525  3000               	movlw	0
  3359     0526  00A2               	movwf	___flmul@b+2
  3360     0527  3000               	movlw	0
  3361     0528  00A1               	movwf	___flmul@b+1
  3362     0529  3000               	movlw	0
  3363     052A  00A0               	movwf	___flmul@b
  3364     052B                     l1796:
  3365     052B  0827               	movf	___flmul@a+3,w
  3366     052C  3980               	andlw	128
  3367     052D  00A8               	movwf	??___flmul
  3368     052E  0828               	movf	??___flmul,w
  3369     052F  06AD               	xorwf	___flmul@sign,f
  3370     0530  0827               	movf	___flmul@a+3,w
  3371     0531  00A8               	movwf	??___flmul
  3372     0532  0728               	addwf	??___flmul,w
  3373     0533  00AE               	movwf	___flmul@aexp
  3374     0534  1BA6               	btfsc	___flmul@a+2,7
  3375     0535  142E               	bsf	___flmul@aexp,0
  3376     0536  082E               	movf	___flmul@aexp,w
  3377     0537  1903               	btfsc	3,2
  3378     0538  2D46               	goto	l1812
  3379     0539  0A2E               	incf	___flmul@aexp,w
  3380     053A  1D03               	btfss	3,2
  3381     053B  2D44               	goto	l1810
  3382     053C  3000               	movlw	0
  3383     053D  00A7               	movwf	___flmul@a+3
  3384     053E  3000               	movlw	0
  3385     053F  00A6               	movwf	___flmul@a+2
  3386     0540  3000               	movlw	0
  3387     0541  00A5               	movwf	___flmul@a+1
  3388     0542  3000               	movlw	0
  3389     0543  00A4               	movwf	___flmul@a
  3390     0544                     l1810:
  3391     0544  17A6               	bsf	___flmul@a+2,7
  3392     0545  2D4E               	goto	l1814
  3393     0546                     l1812:
  3394     0546  3000               	movlw	0
  3395     0547  00A7               	movwf	___flmul@a+3
  3396     0548  3000               	movlw	0
  3397     0549  00A6               	movwf	___flmul@a+2
  3398     054A  3000               	movlw	0
  3399     054B  00A5               	movwf	___flmul@a+1
  3400     054C  3000               	movlw	0
  3401     054D  00A4               	movwf	___flmul@a
  3402     054E                     l1814:
  3403     054E  082E               	movf	___flmul@aexp,w
  3404     054F  1D03               	btfss	3,2
  3405     0550  0833               	movf	___flmul@bexp,w
  3406     0551  1D03               	btfss	3,2
  3407     0552  2D5C               	goto	l1822
  3408     0553  3000               	movlw	0
  3409     0554  00A3               	movwf	?___flmul+3
  3410     0555  3000               	movlw	0
  3411     0556  00A2               	movwf	?___flmul+2
  3412     0557  3000               	movlw	0
  3413     0558  00A1               	movwf	?___flmul+1
  3414     0559  3000               	movlw	0
  3415     055A  00A0               	movwf	?___flmul
  3416     055B  0008               	return
  3417     055C                     l1822:
  3418     055C  0820               	movf	___flmul@b,w
  3419     055D  00F0               	movwf	__Umul8_16@multiplicand
  3420     055E  0826               	movf	___flmul@a+2,w
  3421     055F  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3422     0564  0871               	movf	?__Umul8_16+1,w
  3423     0565  00B9               	movwf	___flmul@temp+1
  3424     0566  0870               	movf	?__Umul8_16,w
  3425     0567  00B8               	movwf	___flmul@temp
  3426     0568  0838               	movf	___flmul@temp,w
  3427     0569  00A8               	movwf	??___flmul
  3428     056A  01A9               	clrf	??___flmul+1
  3429     056B  01AA               	clrf	??___flmul+2
  3430     056C  01AB               	clrf	??___flmul+3
  3431     056D  082B               	movf	??___flmul+3,w
  3432     056E  00B2               	movwf	___flmul@grs+3
  3433     056F  082A               	movf	??___flmul+2,w
  3434     0570  00B1               	movwf	___flmul@grs+2
  3435     0571  0829               	movf	??___flmul+1,w
  3436     0572  00B0               	movwf	___flmul@grs+1
  3437     0573  0828               	movf	??___flmul,w
  3438     0574  00AF               	movwf	___flmul@grs
  3439     0575  0839               	movf	___flmul@temp+1,w
  3440     0576  00A8               	movwf	??___flmul
  3441     0577  01A9               	clrf	??___flmul+1
  3442     0578  01AA               	clrf	??___flmul+2
  3443     0579  01AB               	clrf	??___flmul+3
  3444     057A  082B               	movf	??___flmul+3,w
  3445     057B  00B7               	movwf	___flmul@prod+3
  3446     057C  082A               	movf	??___flmul+2,w
  3447     057D  00B6               	movwf	___flmul@prod+2
  3448     057E  0829               	movf	??___flmul+1,w
  3449     057F  00B5               	movwf	___flmul@prod+1
  3450     0580  0828               	movf	??___flmul,w
  3451     0581  00B4               	movwf	___flmul@prod
  3452     0582  0821               	movf	___flmul@b+1,w
  3453     0583  00F0               	movwf	__Umul8_16@multiplicand
  3454     0584  0825               	movf	___flmul@a+1,w
  3455     0585  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3456     058A  0871               	movf	?__Umul8_16+1,w
  3457     058B  00B9               	movwf	___flmul@temp+1
  3458     058C  0870               	movf	?__Umul8_16,w
  3459     058D  00B8               	movwf	___flmul@temp
  3460     058E  0838               	movf	___flmul@temp,w
  3461     058F  00A8               	movwf	??___flmul
  3462     0590  01A9               	clrf	??___flmul+1
  3463     0591  01AA               	clrf	??___flmul+2
  3464     0592  01AB               	clrf	??___flmul+3
  3465     0593  0828               	movf	??___flmul,w
  3466     0594  07AF               	addwf	___flmul@grs,f
  3467     0595  0829               	movf	??___flmul+1,w
  3468     0596  1103               	clrz
  3469     0597  1803               	skipnc
  3470     0598  3E01               	addlw	1
  3471     0599  1D03               	btfss	3,2
  3472     059A  07B0               	addwf	___flmul@grs+1,f
  3473     059B  082A               	movf	??___flmul+2,w
  3474     059C  1103               	clrz
  3475     059D  1803               	skipnc
  3476     059E  3E01               	addlw	1
  3477     059F  1D03               	btfss	3,2
  3478     05A0  07B1               	addwf	___flmul@grs+2,f
  3479     05A1  082B               	movf	??___flmul+3,w
  3480     05A2  1103               	clrz
  3481     05A3  1803               	skipnc
  3482     05A4  3E01               	addlw	1
  3483     05A5  1D03               	btfss	3,2
  3484     05A6  07B2               	addwf	___flmul@grs+3,f
  3485     05A7  0839               	movf	___flmul@temp+1,w
  3486     05A8  00A8               	movwf	??___flmul
  3487     05A9  01A9               	clrf	??___flmul+1
  3488     05AA  01AA               	clrf	??___flmul+2
  3489     05AB  01AB               	clrf	??___flmul+3
  3490     05AC  0828               	movf	??___flmul,w
  3491     05AD  07B4               	addwf	___flmul@prod,f
  3492     05AE  0829               	movf	??___flmul+1,w
  3493     05AF  1103               	clrz
  3494     05B0  1803               	skipnc
  3495     05B1  3E01               	addlw	1
  3496     05B2  1D03               	btfss	3,2
  3497     05B3  07B5               	addwf	___flmul@prod+1,f
  3498     05B4  082A               	movf	??___flmul+2,w
  3499     05B5  1103               	clrz
  3500     05B6  1803               	skipnc
  3501     05B7  3E01               	addlw	1
  3502     05B8  1D03               	btfss	3,2
  3503     05B9  07B6               	addwf	___flmul@prod+2,f
  3504     05BA  082B               	movf	??___flmul+3,w
  3505     05BB  1103               	clrz
  3506     05BC  1803               	skipnc
  3507     05BD  3E01               	addlw	1
  3508     05BE  1D03               	btfss	3,2
  3509     05BF  07B7               	addwf	___flmul@prod+3,f
  3510     05C0  0822               	movf	___flmul@b+2,w
  3511     05C1  00F0               	movwf	__Umul8_16@multiplicand
  3512     05C2  0824               	movf	___flmul@a,w
  3513     05C3  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3514     05C8  0871               	movf	?__Umul8_16+1,w
  3515     05C9  00B9               	movwf	___flmul@temp+1
  3516     05CA  0870               	movf	?__Umul8_16,w
  3517     05CB  00B8               	movwf	___flmul@temp
  3518     05CC  0838               	movf	___flmul@temp,w
  3519     05CD  00A8               	movwf	??___flmul
  3520     05CE  01A9               	clrf	??___flmul+1
  3521     05CF  01AA               	clrf	??___flmul+2
  3522     05D0  01AB               	clrf	??___flmul+3
  3523     05D1  0828               	movf	??___flmul,w
  3524     05D2  07AF               	addwf	___flmul@grs,f
  3525     05D3  0829               	movf	??___flmul+1,w
  3526     05D4  1103               	clrz
  3527     05D5  1803               	skipnc
  3528     05D6  3E01               	addlw	1
  3529     05D7  1D03               	btfss	3,2
  3530     05D8  07B0               	addwf	___flmul@grs+1,f
  3531     05D9  082A               	movf	??___flmul+2,w
  3532     05DA  1103               	clrz
  3533     05DB  1803               	skipnc
  3534     05DC  3E01               	addlw	1
  3535     05DD  1D03               	btfss	3,2
  3536     05DE  07B1               	addwf	___flmul@grs+2,f
  3537     05DF  082B               	movf	??___flmul+3,w
  3538     05E0  1103               	clrz
  3539     05E1  1803               	skipnc
  3540     05E2  3E01               	addlw	1
  3541     05E3  1D03               	btfss	3,2
  3542     05E4  07B2               	addwf	___flmul@grs+3,f
  3543     05E5  0839               	movf	___flmul@temp+1,w
  3544     05E6  00A8               	movwf	??___flmul
  3545     05E7  01A9               	clrf	??___flmul+1
  3546     05E8  01AA               	clrf	??___flmul+2
  3547     05E9  01AB               	clrf	??___flmul+3
  3548     05EA  0828               	movf	??___flmul,w
  3549     05EB  07B4               	addwf	___flmul@prod,f
  3550     05EC  0829               	movf	??___flmul+1,w
  3551     05ED  1103               	clrz
  3552     05EE  1803               	skipnc
  3553     05EF  3E01               	addlw	1
  3554     05F0  1D03               	btfss	3,2
  3555     05F1  07B5               	addwf	___flmul@prod+1,f
  3556     05F2  082A               	movf	??___flmul+2,w
  3557     05F3  1103               	clrz
  3558     05F4  1803               	skipnc
  3559     05F5  3E01               	addlw	1
  3560     05F6  1D03               	btfss	3,2
  3561     05F7  07B6               	addwf	___flmul@prod+2,f
  3562     05F8  082B               	movf	??___flmul+3,w
  3563     05F9  1103               	clrz
  3564     05FA  1803               	skipnc
  3565     05FB  3E01               	addlw	1
  3566     05FC  1D03               	btfss	3,2
  3567     05FD  07B7               	addwf	___flmul@prod+3,f
  3568     05FE  3008               	movlw	8
  3569     05FF  00A8               	movwf	??___flmul
  3570     0600                     u2685:
  3571     0600  1003               	clrc
  3572     0601  0DAF               	rlf	___flmul@grs,f
  3573     0602  0DB0               	rlf	___flmul@grs+1,f
  3574     0603  0DB1               	rlf	___flmul@grs+2,f
  3575     0604  0DB2               	rlf	___flmul@grs+3,f
  3576     0605  0BA8               	decfsz	??___flmul,f
  3577     0606  2E00               	goto	u2685
  3578     0607  0821               	movf	___flmul@b+1,w
  3579     0608  00F0               	movwf	__Umul8_16@multiplicand
  3580     0609  0824               	movf	___flmul@a,w
  3581     060A  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3582     060F  0871               	movf	?__Umul8_16+1,w
  3583     0610  00B9               	movwf	___flmul@temp+1
  3584     0611  0870               	movf	?__Umul8_16,w
  3585     0612  00B8               	movwf	___flmul@temp
  3586     0613  0838               	movf	___flmul@temp,w
  3587     0614  00A8               	movwf	??___flmul
  3588     0615  0839               	movf	___flmul@temp+1,w
  3589     0616  00A9               	movwf	??___flmul+1
  3590     0617  01AA               	clrf	??___flmul+2
  3591     0618  01AB               	clrf	??___flmul+3
  3592     0619  0828               	movf	??___flmul,w
  3593     061A  07AF               	addwf	___flmul@grs,f
  3594     061B  0829               	movf	??___flmul+1,w
  3595     061C  1103               	clrz
  3596     061D  1803               	skipnc
  3597     061E  3E01               	addlw	1
  3598     061F  1D03               	btfss	3,2
  3599     0620  07B0               	addwf	___flmul@grs+1,f
  3600     0621  082A               	movf	??___flmul+2,w
  3601     0622  1103               	clrz
  3602     0623  1803               	skipnc
  3603     0624  3E01               	addlw	1
  3604     0625  1D03               	btfss	3,2
  3605     0626  07B1               	addwf	___flmul@grs+2,f
  3606     0627  082B               	movf	??___flmul+3,w
  3607     0628  1103               	clrz
  3608     0629  1803               	skipnc
  3609     062A  3E01               	addlw	1
  3610     062B  1D03               	btfss	3,2
  3611     062C  07B2               	addwf	___flmul@grs+3,f
  3612     062D  0820               	movf	___flmul@b,w
  3613     062E  00F0               	movwf	__Umul8_16@multiplicand
  3614     062F  0825               	movf	___flmul@a+1,w
  3615     0630  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3616     0635  0871               	movf	?__Umul8_16+1,w
  3617     0636  00B9               	movwf	___flmul@temp+1
  3618     0637  0870               	movf	?__Umul8_16,w
  3619     0638  00B8               	movwf	___flmul@temp
  3620     0639  0838               	movf	___flmul@temp,w
  3621     063A  00A8               	movwf	??___flmul
  3622     063B  0839               	movf	___flmul@temp+1,w
  3623     063C  00A9               	movwf	??___flmul+1
  3624     063D  01AA               	clrf	??___flmul+2
  3625     063E  01AB               	clrf	??___flmul+3
  3626     063F  0828               	movf	??___flmul,w
  3627     0640  07AF               	addwf	___flmul@grs,f
  3628     0641  0829               	movf	??___flmul+1,w
  3629     0642  1103               	clrz
  3630     0643  1803               	skipnc
  3631     0644  3E01               	addlw	1
  3632     0645  1D03               	btfss	3,2
  3633     0646  07B0               	addwf	___flmul@grs+1,f
  3634     0647  082A               	movf	??___flmul+2,w
  3635     0648  1103               	clrz
  3636     0649  1803               	skipnc
  3637     064A  3E01               	addlw	1
  3638     064B  1D03               	btfss	3,2
  3639     064C  07B1               	addwf	___flmul@grs+2,f
  3640     064D  082B               	movf	??___flmul+3,w
  3641     064E  1103               	clrz
  3642     064F  1803               	skipnc
  3643     0650  3E01               	addlw	1
  3644     0651  1D03               	btfss	3,2
  3645     0652  07B2               	addwf	___flmul@grs+3,f
  3646     0653  3008               	movlw	8
  3647     0654  00A8               	movwf	??___flmul
  3648     0655                     u2715:
  3649     0655  1003               	clrc
  3650     0656  0DAF               	rlf	___flmul@grs,f
  3651     0657  0DB0               	rlf	___flmul@grs+1,f
  3652     0658  0DB1               	rlf	___flmul@grs+2,f
  3653     0659  0DB2               	rlf	___flmul@grs+3,f
  3654     065A  0BA8               	decfsz	??___flmul,f
  3655     065B  2E55               	goto	u2715
  3656     065C  0820               	movf	___flmul@b,w
  3657     065D  00F0               	movwf	__Umul8_16@multiplicand
  3658     065E  0824               	movf	___flmul@a,w
  3659     065F  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3660     0664  0871               	movf	?__Umul8_16+1,w
  3661     0665  00B9               	movwf	___flmul@temp+1
  3662     0666  0870               	movf	?__Umul8_16,w
  3663     0667  00B8               	movwf	___flmul@temp
  3664     0668  0838               	movf	___flmul@temp,w
  3665     0669  00A8               	movwf	??___flmul
  3666     066A  0839               	movf	___flmul@temp+1,w
  3667     066B  00A9               	movwf	??___flmul+1
  3668     066C  01AA               	clrf	??___flmul+2
  3669     066D  01AB               	clrf	??___flmul+3
  3670     066E  0828               	movf	??___flmul,w
  3671     066F  07AF               	addwf	___flmul@grs,f
  3672     0670  0829               	movf	??___flmul+1,w
  3673     0671  1103               	clrz
  3674     0672  1803               	skipnc
  3675     0673  3E01               	addlw	1
  3676     0674  1D03               	btfss	3,2
  3677     0675  07B0               	addwf	___flmul@grs+1,f
  3678     0676  082A               	movf	??___flmul+2,w
  3679     0677  1103               	clrz
  3680     0678  1803               	skipnc
  3681     0679  3E01               	addlw	1
  3682     067A  1D03               	btfss	3,2
  3683     067B  07B1               	addwf	___flmul@grs+2,f
  3684     067C  082B               	movf	??___flmul+3,w
  3685     067D  1103               	clrz
  3686     067E  1803               	skipnc
  3687     067F  3E01               	addlw	1
  3688     0680  1D03               	btfss	3,2
  3689     0681  07B2               	addwf	___flmul@grs+3,f
  3690     0682  0821               	movf	___flmul@b+1,w
  3691     0683  00F0               	movwf	__Umul8_16@multiplicand
  3692     0684  0826               	movf	___flmul@a+2,w
  3693     0685  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3694     068A  0871               	movf	?__Umul8_16+1,w
  3695     068B  00B9               	movwf	___flmul@temp+1
  3696     068C  0870               	movf	?__Umul8_16,w
  3697     068D  00B8               	movwf	___flmul@temp
  3698     068E  0838               	movf	___flmul@temp,w
  3699     068F  00A8               	movwf	??___flmul
  3700     0690  0839               	movf	___flmul@temp+1,w
  3701     0691  00A9               	movwf	??___flmul+1
  3702     0692  01AA               	clrf	??___flmul+2
  3703     0693  01AB               	clrf	??___flmul+3
  3704     0694  0828               	movf	??___flmul,w
  3705     0695  07B4               	addwf	___flmul@prod,f
  3706     0696  0829               	movf	??___flmul+1,w
  3707     0697  1103               	clrz
  3708     0698  1803               	skipnc
  3709     0699  3E01               	addlw	1
  3710     069A  1D03               	btfss	3,2
  3711     069B  07B5               	addwf	___flmul@prod+1,f
  3712     069C  082A               	movf	??___flmul+2,w
  3713     069D  1103               	clrz
  3714     069E  1803               	skipnc
  3715     069F  3E01               	addlw	1
  3716     06A0  1D03               	btfss	3,2
  3717     06A1  07B6               	addwf	___flmul@prod+2,f
  3718     06A2  082B               	movf	??___flmul+3,w
  3719     06A3  1103               	clrz
  3720     06A4  1803               	skipnc
  3721     06A5  3E01               	addlw	1
  3722     06A6  1D03               	btfss	3,2
  3723     06A7  07B7               	addwf	___flmul@prod+3,f
  3724     06A8  0822               	movf	___flmul@b+2,w
  3725     06A9  00F0               	movwf	__Umul8_16@multiplicand
  3726     06AA  0825               	movf	___flmul@a+1,w
  3727     06AB  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3728     06B0  0871               	movf	?__Umul8_16+1,w
  3729     06B1  00B9               	movwf	___flmul@temp+1
  3730     06B2  0870               	movf	?__Umul8_16,w
  3731     06B3  00B8               	movwf	___flmul@temp
  3732     06B4  0838               	movf	___flmul@temp,w
  3733     06B5  00A8               	movwf	??___flmul
  3734     06B6  0839               	movf	___flmul@temp+1,w
  3735     06B7  00A9               	movwf	??___flmul+1
  3736     06B8  01AA               	clrf	??___flmul+2
  3737     06B9  01AB               	clrf	??___flmul+3
  3738     06BA  0828               	movf	??___flmul,w
  3739     06BB  07B4               	addwf	___flmul@prod,f
  3740     06BC  0829               	movf	??___flmul+1,w
  3741     06BD  1103               	clrz
  3742     06BE  1803               	skipnc
  3743     06BF  3E01               	addlw	1
  3744     06C0  1D03               	btfss	3,2
  3745     06C1  07B5               	addwf	___flmul@prod+1,f
  3746     06C2  082A               	movf	??___flmul+2,w
  3747     06C3  1103               	clrz
  3748     06C4  1803               	skipnc
  3749     06C5  3E01               	addlw	1
  3750     06C6  1D03               	btfss	3,2
  3751     06C7  07B6               	addwf	___flmul@prod+2,f
  3752     06C8  082B               	movf	??___flmul+3,w
  3753     06C9  1103               	clrz
  3754     06CA  1803               	skipnc
  3755     06CB  3E01               	addlw	1
  3756     06CC  1D03               	btfss	3,2
  3757     06CD  07B7               	addwf	___flmul@prod+3,f
  3758     06CE  0822               	movf	___flmul@b+2,w
  3759     06CF  00F0               	movwf	__Umul8_16@multiplicand
  3760     06D0  0826               	movf	___flmul@a+2,w
  3761     06D1  120A  158A  254A  120A  118A  	fcall	__Umul8_16
  3762     06D6  0871               	movf	?__Umul8_16+1,w
  3763     06D7  00B9               	movwf	___flmul@temp+1
  3764     06D8  0870               	movf	?__Umul8_16,w
  3765     06D9  00B8               	movwf	___flmul@temp
  3766     06DA  0838               	movf	___flmul@temp,w
  3767     06DB  00A8               	movwf	??___flmul
  3768     06DC  0839               	movf	___flmul@temp+1,w
  3769     06DD  00A9               	movwf	??___flmul+1
  3770     06DE  01AA               	clrf	??___flmul+2
  3771     06DF  01AB               	clrf	??___flmul+3
  3772     06E0  3008               	movlw	8
  3773     06E1                     u2755:
  3774     06E1  1003               	clrc
  3775     06E2  0DA8               	rlf	??___flmul,f
  3776     06E3  0DA9               	rlf	??___flmul+1,f
  3777     06E4  0DAA               	rlf	??___flmul+2,f
  3778     06E5  0DAB               	rlf	??___flmul+3,f
  3779     06E6  3EFF               	addlw	-1
  3780     06E7  1D03               	skipz
  3781     06E8  2EE1               	goto	u2755
  3782     06E9  0828               	movf	??___flmul,w
  3783     06EA  07B4               	addwf	___flmul@prod,f
  3784     06EB  0829               	movf	??___flmul+1,w
  3785     06EC  1103               	clrz
  3786     06ED  1803               	skipnc
  3787     06EE  3E01               	addlw	1
  3788     06EF  1D03               	btfss	3,2
  3789     06F0  07B5               	addwf	___flmul@prod+1,f
  3790     06F1  082A               	movf	??___flmul+2,w
  3791     06F2  1103               	clrz
  3792     06F3  1803               	skipnc
  3793     06F4  3E01               	addlw	1
  3794     06F5  1D03               	btfss	3,2
  3795     06F6  07B6               	addwf	___flmul@prod+2,f
  3796     06F7  082B               	movf	??___flmul+3,w
  3797     06F8  1103               	clrz
  3798     06F9  1803               	skipnc
  3799     06FA  3E01               	addlw	1
  3800     06FB  1D03               	btfss	3,2
  3801     06FC  07B7               	addwf	___flmul@prod+3,f
  3802     06FD  0832               	movf	___flmul@grs+3,w
  3803     06FE  00A8               	movwf	??___flmul
  3804     06FF  01A9               	clrf	??___flmul+1
  3805     0700  01AA               	clrf	??___flmul+2
  3806     0701  01AB               	clrf	??___flmul+3
  3807     0702  0828               	movf	??___flmul,w
  3808     0703  07B4               	addwf	___flmul@prod,f
  3809     0704  0829               	movf	??___flmul+1,w
  3810     0705  1103               	clrz
  3811     0706  1803               	skipnc
  3812     0707  3E01               	addlw	1
  3813     0708  1D03               	btfss	3,2
  3814     0709  07B5               	addwf	___flmul@prod+1,f
  3815     070A  082A               	movf	??___flmul+2,w
  3816     070B  1103               	clrz
  3817     070C  1803               	skipnc
  3818     070D  3E01               	addlw	1
  3819     070E  1D03               	btfss	3,2
  3820     070F  07B6               	addwf	___flmul@prod+2,f
  3821     0710  082B               	movf	??___flmul+3,w
  3822     0711  1103               	clrz
  3823     0712  1803               	skipnc
  3824     0713  3E01               	addlw	1
  3825     0714  1D03               	btfss	3,2
  3826     0715  07B7               	addwf	___flmul@prod+3,f
  3827     0716  3008               	movlw	8
  3828     0717  00A8               	movwf	??___flmul
  3829     0718                     u2785:
  3830     0718  1003               	clrc
  3831     0719  0DAF               	rlf	___flmul@grs,f
  3832     071A  0DB0               	rlf	___flmul@grs+1,f
  3833     071B  0DB1               	rlf	___flmul@grs+2,f
  3834     071C  0DB2               	rlf	___flmul@grs+3,f
  3835     071D  0BA8               	decfsz	??___flmul,f
  3836     071E  2F18               	goto	u2785
  3837     071F  0833               	movf	___flmul@bexp,w
  3838     0720  072E               	addwf	___flmul@aexp,w
  3839     0721  00A8               	movwf	??___flmul
  3840     0722  01A9               	clrf	??___flmul+1
  3841     0723  0DA9               	rlf	??___flmul+1,f
  3842     0724  0828               	movf	??___flmul,w
  3843     0725  3E82               	addlw	130
  3844     0726  00B8               	movwf	___flmul@temp
  3845     0727  0829               	movf	??___flmul+1,w
  3846     0728  1803               	skipnc
  3847     0729  3E01               	addlw	1
  3848     072A  3EFF               	addlw	255
  3849     072B  00B9               	movwf	___flmul@temp+1
  3850     072C                     l1874:
  3851     072C  1BB6               	btfsc	___flmul@prod+2,7
  3852     072D  2F49               	goto	l1876
  3853     072E  3001               	movlw	1
  3854     072F  00A8               	movwf	??___flmul
  3855     0730                     u2795:
  3856     0730  1003               	clrc
  3857     0731  0DB4               	rlf	___flmul@prod,f
  3858     0732  0DB5               	rlf	___flmul@prod+1,f
  3859     0733  0DB6               	rlf	___flmul@prod+2,f
  3860     0734  0DB7               	rlf	___flmul@prod+3,f
  3861     0735  0BA8               	decfsz	??___flmul,f
  3862     0736  2F30               	goto	u2795
  3863     0737  1BB2               	btfsc	___flmul@grs+3,7
  3864     0738  1434               	bsf	___flmul@prod,0
  3865     0739  3001               	movlw	1
  3866     073A  00A8               	movwf	??___flmul
  3867     073B                     u2815:
  3868     073B  1003               	clrc
  3869     073C  0DAF               	rlf	___flmul@grs,f
  3870     073D  0DB0               	rlf	___flmul@grs+1,f
  3871     073E  0DB1               	rlf	___flmul@grs+2,f
  3872     073F  0DB2               	rlf	___flmul@grs+3,f
  3873     0740  0BA8               	decfsz	??___flmul,f
  3874     0741  2F3B               	goto	u2815
  3875     0742  30FF               	movlw	255
  3876     0743  07B8               	addwf	___flmul@temp,f
  3877     0744  1803               	skipnc
  3878     0745  0AB9               	incf	___flmul@temp+1,f
  3879     0746  30FF               	movlw	255
  3880     0747  07B9               	addwf	___flmul@temp+1,f
  3881     0748  2F2C               	goto	l1874
  3882     0749                     l1876:
  3883     0749  01AE               	clrf	___flmul@aexp
  3884     074A  1FB2               	btfss	___flmul@grs+3,7
  3885     074B  2F62               	goto	l1886
  3886     074C  30FF               	movlw	255
  3887     074D  052F               	andwf	___flmul@grs,w
  3888     074E  00A8               	movwf	??___flmul
  3889     074F  30FF               	movlw	255
  3890     0750  0530               	andwf	___flmul@grs+1,w
  3891     0751  00A9               	movwf	??___flmul+1
  3892     0752  30FF               	movlw	255
  3893     0753  0531               	andwf	___flmul@grs+2,w
  3894     0754  00AA               	movwf	??___flmul+2
  3895     0755  307F               	movlw	127
  3896     0756  0532               	andwf	___flmul@grs+3,w
  3897     0757  00AB               	movwf	??___flmul+3
  3898     0758  082B               	movf	??___flmul+3,w
  3899     0759  042A               	iorwf	??___flmul+2,w
  3900     075A  0429               	iorwf	??___flmul+1,w
  3901     075B  0428               	iorwf	??___flmul,w
  3902     075C  1903               	skipnz
  3903     075D  1834               	btfsc	___flmul@prod,0
  3904     075E  2F60               	goto	l1882
  3905     075F  2F62               	goto	l1886
  3906     0760                     l1882:
  3907     0760  01AE               	clrf	___flmul@aexp
  3908     0761  0AAE               	incf	___flmul@aexp,f
  3909     0762                     l1886:
  3910     0762  082E               	movf	___flmul@aexp,w
  3911     0763  1903               	btfsc	3,2
  3912     0764  2F94               	goto	l1896
  3913     0765  3001               	movlw	1
  3914     0766  07B4               	addwf	___flmul@prod,f
  3915     0767  3000               	movlw	0
  3916     0768  1803               	skipnc
  3917     0769  3001               	movlw	1
  3918     076A  07B5               	addwf	___flmul@prod+1,f
  3919     076B  3000               	movlw	0
  3920     076C  1803               	skipnc
  3921     076D  3001               	movlw	1
  3922     076E  07B6               	addwf	___flmul@prod+2,f
  3923     076F  3000               	movlw	0
  3924     0770  1803               	skipnc
  3925     0771  3001               	movlw	1
  3926     0772  07B7               	addwf	___flmul@prod+3,f
  3927     0773  1C37               	btfss	___flmul@prod+3,0
  3928     0774  2F94               	goto	l1896
  3929     0775  0834               	movf	___flmul@prod,w
  3930     0776  00A8               	movwf	??___flmul
  3931     0777  0835               	movf	___flmul@prod+1,w
  3932     0778  00A9               	movwf	??___flmul+1
  3933     0779  0836               	movf	___flmul@prod+2,w
  3934     077A  00AA               	movwf	??___flmul+2
  3935     077B  0837               	movf	___flmul@prod+3,w
  3936     077C  00AB               	movwf	??___flmul+3
  3937     077D  3001               	movlw	1
  3938     077E  00AC               	movwf	??___flmul+4
  3939     077F                     u2885:
  3940     077F  0D2B               	rlf	??___flmul+3,w
  3941     0780  0CAB               	rrf	??___flmul+3,f
  3942     0781  0CAA               	rrf	??___flmul+2,f
  3943     0782  0CA9               	rrf	??___flmul+1,f
  3944     0783  0CA8               	rrf	??___flmul,f
  3945     0784  0BAC               	decfsz	??___flmul+4,f
  3946     0785  2F7F               	goto	u2885
  3947     0786  082B               	movf	??___flmul+3,w
  3948     0787  00B7               	movwf	___flmul@prod+3
  3949     0788  082A               	movf	??___flmul+2,w
  3950     0789  00B6               	movwf	___flmul@prod+2
  3951     078A  0829               	movf	??___flmul+1,w
  3952     078B  00B5               	movwf	___flmul@prod+1
  3953     078C  0828               	movf	??___flmul,w
  3954     078D  00B4               	movwf	___flmul@prod
  3955     078E  3001               	movlw	1
  3956     078F  07B8               	addwf	___flmul@temp,f
  3957     0790  1803               	skipnc
  3958     0791  0AB9               	incf	___flmul@temp+1,f
  3959     0792  3000               	movlw	0
  3960     0793  07B9               	addwf	___flmul@temp+1,f
  3961     0794                     l1896:
  3962     0794  0839               	movf	___flmul@temp+1,w
  3963     0795  3A80               	xorlw	128
  3964     0796  00FF               	movwf	127
  3965     0797  3080               	movlw	128
  3966     0798  027F               	subwf	127,w
  3967     0799  1D03               	skipz
  3968     079A  2F9D               	goto	u2895
  3969     079B  30FF               	movlw	255
  3970     079C  0238               	subwf	___flmul@temp,w
  3971     079D                     u2895:
  3972     079D  1C03               	skipc
  3973     079E  2FAA               	goto	l1900
  3974     079F  307F               	movlw	127
  3975     07A0  1283               	bcf	3,5	;RP0=0, select bank0
  3976     07A1  1303               	bcf	3,6	;RP1=0, select bank0
  3977     07A2  00B7               	movwf	___flmul@prod+3
  3978     07A3  3080               	movlw	128
  3979     07A4  00B6               	movwf	___flmul@prod+2
  3980     07A5  3000               	movlw	0
  3981     07A6  00B5               	movwf	___flmul@prod+1
  3982     07A7  3000               	movlw	0
  3983     07A8  00B4               	movwf	___flmul@prod
  3984     07A9  2FD6               	goto	l627
  3985     07AA                     l1900:
  3986     07AA  1283               	bcf	3,5	;RP0=0, select bank0
  3987     07AB  1303               	bcf	3,6	;RP1=0, select bank0
  3988     07AC  0839               	movf	___flmul@temp+1,w
  3989     07AD  3A80               	xorlw	128
  3990     07AE  00FF               	movwf	127
  3991     07AF  3080               	movlw	128
  3992     07B0  027F               	subwf	127,w
  3993     07B1  1D03               	skipz
  3994     07B2  2FB5               	goto	u2905
  3995     07B3  3001               	movlw	1
  3996     07B4  0238               	subwf	___flmul@temp,w
  3997     07B5                     u2905:
  3998     07B5  1803               	skipnc
  3999     07B6  2FC3               	goto	l1906
  4000     07B7  3000               	movlw	0
  4001     07B8  1283               	bcf	3,5	;RP0=0, select bank0
  4002     07B9  1303               	bcf	3,6	;RP1=0, select bank0
  4003     07BA  00B7               	movwf	___flmul@prod+3
  4004     07BB  3000               	movlw	0
  4005     07BC  00B6               	movwf	___flmul@prod+2
  4006     07BD  3000               	movlw	0
  4007     07BE  00B5               	movwf	___flmul@prod+1
  4008     07BF  3000               	movlw	0
  4009     07C0  00B4               	movwf	___flmul@prod
  4010     07C1  01AD               	clrf	___flmul@sign
  4011     07C2  2FD6               	goto	l627
  4012     07C3                     l1906:
  4013     07C3  1283               	bcf	3,5	;RP0=0, select bank0
  4014     07C4  1303               	bcf	3,6	;RP1=0, select bank0
  4015     07C5  0838               	movf	___flmul@temp,w
  4016     07C6  00B3               	movwf	___flmul@bexp
  4017     07C7  30FF               	movlw	255
  4018     07C8  05B4               	andwf	___flmul@prod,f
  4019     07C9  30FF               	movlw	255
  4020     07CA  05B5               	andwf	___flmul@prod+1,f
  4021     07CB  307F               	movlw	127
  4022     07CC  05B6               	andwf	___flmul@prod+2,f
  4023     07CD  3000               	movlw	0
  4024     07CE  05B7               	andwf	___flmul@prod+3,f
  4025     07CF  1833               	btfsc	___flmul@bexp,0
  4026     07D0  17B6               	bsf	___flmul@prod+2,7
  4027     07D1  0833               	movf	___flmul@bexp,w
  4028     07D2  00A8               	movwf	??___flmul
  4029     07D3  1003               	clrc
  4030     07D4  0C28               	rrf	??___flmul,w
  4031     07D5  00B7               	movwf	___flmul@prod+3
  4032     07D6                     l627:
  4033     07D6  082D               	movf	___flmul@sign,w
  4034     07D7  00A8               	movwf	??___flmul
  4035     07D8  0828               	movf	??___flmul,w
  4036     07D9  04B7               	iorwf	___flmul@prod+3,f
  4037     07DA  0837               	movf	___flmul@prod+3,w
  4038     07DB  00A3               	movwf	?___flmul+3
  4039     07DC  0836               	movf	___flmul@prod+2,w
  4040     07DD  00A2               	movwf	?___flmul+2
  4041     07DE  0835               	movf	___flmul@prod+1,w
  4042     07DF  00A1               	movwf	?___flmul+1
  4043     07E0  0834               	movf	___flmul@prod,w
  4044     07E1  00A0               	movwf	?___flmul
  4045     07E2  0008               	return
  4046     07E3                     __end_of___flmul:
  4047                           
  4048                           	psect	text21
  4049     0D4A                     __ptext21:	
  4050 ;; *************** function __Umul8_16 *****************
  4051 ;; Defined at:
  4052 ;;		line 4 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul8_16.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  multiplier      1    wreg     unsigned char 
  4055 ;;  multiplicand    1    0[COMMON] unsigned char 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  multiplier      1    8[COMMON] unsigned char 
  4058 ;;  word_mpld       2    6[COMMON] unsigned short 
  4059 ;;  product         2    4[COMMON] unsigned short 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  2    0[COMMON] unsigned int 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2, status,0
  4064 ;; Tracked objects:
  4065 ;;		On entry : 300/0
  4066 ;;		On exit  : 300/0
  4067 ;;		Unchanged: 300/0
  4068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4069 ;;      Params:         2       0       0       0       0
  4070 ;;      Locals:         5       0       0       0       0
  4071 ;;      Temps:          2       0       0       0       0
  4072 ;;      Totals:         9       0       0       0       0
  4073 ;;Total ram usage:        9 bytes
  4074 ;; Hardware stack levels used: 1
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		___flmul
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082     0D4A                     __Umul8_16:	
  4083                           ;psect for function __Umul8_16
  4084                           
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4088                           ;__Umul8_16@multiplier stored from wreg
  4089     0D4A  00F8               	movwf	__Umul8_16@multiplier
  4090     0D4B  01F4               	clrf	__Umul8_16@product
  4091     0D4C  01F5               	clrf	__Umul8_16@product+1
  4092     0D4D  0870               	movf	__Umul8_16@multiplicand,w
  4093     0D4E  00F2               	movwf	??__Umul8_16
  4094     0D4F  01F3               	clrf	??__Umul8_16+1
  4095     0D50  0872               	movf	??__Umul8_16,w
  4096     0D51  00F6               	movwf	__Umul8_16@word_mpld
  4097     0D52  0873               	movf	??__Umul8_16+1,w
  4098     0D53  00F7               	movwf	__Umul8_16@word_mpld+1
  4099     0D54                     l1608:
  4100     0D54  1C78               	btfss	__Umul8_16@multiplier,0
  4101     0D55  2D5C               	goto	l634
  4102     0D56  0876               	movf	__Umul8_16@word_mpld,w
  4103     0D57  07F4               	addwf	__Umul8_16@product,f
  4104     0D58  1803               	skipnc
  4105     0D59  0AF5               	incf	__Umul8_16@product+1,f
  4106     0D5A  0877               	movf	__Umul8_16@word_mpld+1,w
  4107     0D5B  07F5               	addwf	__Umul8_16@product+1,f
  4108     0D5C                     l634:
  4109     0D5C  3001               	movlw	1
  4110     0D5D                     u2385:
  4111     0D5D  1003               	clrc
  4112     0D5E  0DF6               	rlf	__Umul8_16@word_mpld,f
  4113     0D5F  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  4114     0D60  3EFF               	addlw	-1
  4115     0D61  1D03               	skipz
  4116     0D62  2D5D               	goto	u2385
  4117     0D63  1003               	clrc
  4118     0D64  0CF8               	rrf	__Umul8_16@multiplier,f
  4119     0D65  0878               	movf	__Umul8_16@multiplier,w
  4120     0D66  1D03               	btfss	3,2
  4121     0D67  2D54               	goto	l1608
  4122     0D68  0875               	movf	__Umul8_16@product+1,w
  4123     0D69  00F1               	movwf	?__Umul8_16+1
  4124     0D6A  0874               	movf	__Umul8_16@product,w
  4125     0D6B  00F0               	movwf	?__Umul8_16
  4126     0D6C  0008               	return
  4127     0D6D                     __end_of__Umul8_16:
  4128                           
  4129                           	psect	text22
  4130     0DB5                     __ptext22:	
  4131 ;; *************** function _Lcd_WriteString *****************
  4132 ;; Defined at:
  4133 ;;		line 102 in file "../../pic16flcd.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  config          1    wreg     PTR struct .
  4136 ;;		 -> main@lcd(8), 
  4137 ;;  str             2    0[BANK0 ] PTR unsigned char 
  4138 ;;		 -> main@rpm(10), STR_2(6), STR_1(19), 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  config          1   13[COMMON] PTR struct .
  4141 ;;		 -> main@lcd(8), 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4146 ;; Tracked objects:
  4147 ;;		On entry : 300/0
  4148 ;;		On exit  : 300/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4151 ;;      Params:         0       2       0       0       0
  4152 ;;      Locals:         1       0       0       0       0
  4153 ;;      Temps:          0       0       0       0       0
  4154 ;;      Totals:         1       2       0       0       0
  4155 ;;Total ram usage:        3 bytes
  4156 ;; Hardware stack levels used: 1
  4157 ;; Hardware stack levels required when called: 3
  4158 ;; This function calls:
  4159 ;;		_Lcd_WriteChar
  4160 ;; This function is called by:
  4161 ;;		_main
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165     0DB5                     _Lcd_WriteString:	
  4166                           ;psect for function _Lcd_WriteString
  4167                           
  4168                           
  4169                           ;incstack = 0
  4170                           ; Regs used in _Lcd_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4171                           ;Lcd_WriteString@config stored from wreg
  4172     0DB5  00FD               	movwf	Lcd_WriteString@config
  4173     0DB6                     l1634:	
  4174                           ;../../pic16flcd.c: 103:     while(*str != '\0') {
  4175                           
  4176                           
  4177                           ;../../pic16flcd.c: 103:     while(*str != '\0') {
  4178     0DB6  0821               	movf	Lcd_WriteString@str+1,w
  4179     0DB7  00FF               	movwf	127
  4180     0DB8  0820               	movf	Lcd_WriteString@str,w
  4181     0DB9  0084               	movwf	4
  4182     0DBA  120A  158A  2000  120A  158A  	fcall	stringtab
  4183     0DBF  3A00               	xorlw	0
  4184     0DC0  1903               	btfsc	3,2
  4185     0DC1  0008               	return
  4186                           
  4187                           ;../../pic16flcd.c: 104:         Lcd_WriteChar(config, (unsigned char)(*str));
  4188     0DC2  0821               	movf	Lcd_WriteString@str+1,w
  4189     0DC3  00FF               	movwf	127
  4190     0DC4  0820               	movf	Lcd_WriteString@str,w
  4191     0DC5  0084               	movwf	4
  4192     0DC6  120A  158A  2000  120A  158A  	fcall	stringtab
  4193     0DCB  00F9               	movwf	Lcd_WriteChar@data
  4194     0DCC  087D               	movf	Lcd_WriteString@config,w
  4195     0DCD  120A  118A  23E9  120A  158A  	fcall	_Lcd_WriteChar
  4196                           
  4197                           ;../../pic16flcd.c: 105:         str++;
  4198     0DD2  3001               	movlw	1
  4199     0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  4200     0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  4201     0DD5  07A0               	addwf	Lcd_WriteString@str,f
  4202     0DD6  1803               	skipnc
  4203     0DD7  0AA1               	incf	Lcd_WriteString@str+1,f
  4204     0DD8  3000               	movlw	0
  4205     0DD9  07A1               	addwf	Lcd_WriteString@str+1,f
  4206     0DDA  2DB6               	goto	l1634
  4207     0DDB                     __end_of_Lcd_WriteString:
  4208                           
  4209                           	psect	text23
  4210     03E9                     __ptext23:	
  4211 ;; *************** function _Lcd_WriteChar *****************
  4212 ;; Defined at:
  4213 ;;		line 77 in file "../../pic16flcd.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  config          1    wreg     PTR struct .
  4216 ;;		 -> main@lcd(8), 
  4217 ;;  data            1    9[COMMON] unsigned char 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  config          1   12[COMMON] PTR struct .
  4220 ;;		 -> main@lcd(8), 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 300/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4230 ;;      Params:         1       0       0       0       0
  4231 ;;      Locals:         1       0       0       0       0
  4232 ;;      Temps:          2       0       0       0       0
  4233 ;;      Totals:         4       0       0       0       0
  4234 ;;Total ram usage:        4 bytes
  4235 ;; Hardware stack levels used: 1
  4236 ;; Hardware stack levels required when called: 2
  4237 ;; This function calls:
  4238 ;;		_PulseEnable
  4239 ;;		_SetBit
  4240 ;; This function is called by:
  4241 ;;		_Lcd_WriteString
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245     03E9                     _Lcd_WriteChar:	
  4246                           ;psect for function _Lcd_WriteChar
  4247                           
  4248                           
  4249                           ;incstack = 0
  4250                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4251                           ;Lcd_WriteChar@config stored from wreg
  4252     03E9  00FC               	movwf	Lcd_WriteChar@config
  4253                           
  4254                           ;../../pic16flcd.c: 79:     SetBit(config->port, config->d4_pin, (data >> 4) & 0x01);
  4255     03EA  087C               	movf	Lcd_WriteChar@config,w
  4256     03EB  0084               	movwf	4
  4257     03EC  1383               	bcf	3,7	;select IRP bank0
  4258     03ED  0800               	movf	0,w
  4259     03EE  00F0               	movwf	SetBit@port
  4260     03EF  0A84               	incf	4,f
  4261     03F0  0800               	movf	0,w
  4262     03F1  0384               	decf	4,f
  4263     03F2  00F1               	movwf	SetBit@port+1
  4264     03F3  087C               	movf	Lcd_WriteChar@config,w
  4265     03F4  3E04               	addlw	4
  4266     03F5  0084               	movwf	4
  4267     03F6  0800               	movf	0,w
  4268     03F7  00F2               	movwf	SetBit@pin
  4269     03F8  0879               	movf	Lcd_WriteChar@data,w
  4270     03F9  00FB               	movwf	??_Lcd_WriteChar+1
  4271     03FA  3004               	movlw	4
  4272     03FB                     u2145:
  4273     03FB  1003               	clrc
  4274     03FC  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4275     03FD  3EFF               	addlw	-1
  4276     03FE  1D03               	skipz
  4277     03FF  2BFB               	goto	u2145
  4278     0400  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4279     0401  2C04               	goto	u2150
  4280     0402  3001               	movlw	1
  4281     0403  2C05               	goto	u2160
  4282     0404                     u2150:
  4283     0404  3000               	movlw	0
  4284     0405                     u2160:
  4285     0405  00F3               	movwf	SetBit@value
  4286     0406  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4287                           
  4288                           ;../../pic16flcd.c: 80:     SetBit(config->port, config->d5_pin, (data >> 5) & 0x01);
  4289     040B  087C               	movf	Lcd_WriteChar@config,w
  4290     040C  0084               	movwf	4
  4291     040D  1383               	bcf	3,7	;select IRP bank0
  4292     040E  0800               	movf	0,w
  4293     040F  00F0               	movwf	SetBit@port
  4294     0410  0A84               	incf	4,f
  4295     0411  0800               	movf	0,w
  4296     0412  0384               	decf	4,f
  4297     0413  00F1               	movwf	SetBit@port+1
  4298     0414  087C               	movf	Lcd_WriteChar@config,w
  4299     0415  3E05               	addlw	5
  4300     0416  0084               	movwf	4
  4301     0417  0800               	movf	0,w
  4302     0418  00F2               	movwf	SetBit@pin
  4303     0419  0879               	movf	Lcd_WriteChar@data,w
  4304     041A  00FB               	movwf	??_Lcd_WriteChar+1
  4305     041B  3005               	movlw	5
  4306     041C                     u2175:
  4307     041C  1003               	clrc
  4308     041D  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4309     041E  3EFF               	addlw	-1
  4310     041F  1D03               	skipz
  4311     0420  2C1C               	goto	u2175
  4312     0421  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4313     0422  2C25               	goto	u2180
  4314     0423  3001               	movlw	1
  4315     0424  2C26               	goto	u2190
  4316     0425                     u2180:
  4317     0425  3000               	movlw	0
  4318     0426                     u2190:
  4319     0426  00F3               	movwf	SetBit@value
  4320     0427  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4321                           
  4322                           ;../../pic16flcd.c: 81:     SetBit(config->port, config->d6_pin, (data >> 6) & 0x01);
  4323     042C  087C               	movf	Lcd_WriteChar@config,w
  4324     042D  0084               	movwf	4
  4325     042E  1383               	bcf	3,7	;select IRP bank0
  4326     042F  0800               	movf	0,w
  4327     0430  00F0               	movwf	SetBit@port
  4328     0431  0A84               	incf	4,f
  4329     0432  0800               	movf	0,w
  4330     0433  0384               	decf	4,f
  4331     0434  00F1               	movwf	SetBit@port+1
  4332     0435  087C               	movf	Lcd_WriteChar@config,w
  4333     0436  3E06               	addlw	6
  4334     0437  0084               	movwf	4
  4335     0438  0800               	movf	0,w
  4336     0439  00F2               	movwf	SetBit@pin
  4337     043A  0879               	movf	Lcd_WriteChar@data,w
  4338     043B  00FB               	movwf	??_Lcd_WriteChar+1
  4339     043C  3006               	movlw	6
  4340     043D                     u2205:
  4341     043D  1003               	clrc
  4342     043E  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4343     043F  3EFF               	addlw	-1
  4344     0440  1D03               	skipz
  4345     0441  2C3D               	goto	u2205
  4346     0442  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4347     0443  2C46               	goto	u2210
  4348     0444  3001               	movlw	1
  4349     0445  2C47               	goto	u2220
  4350     0446                     u2210:
  4351     0446  3000               	movlw	0
  4352     0447                     u2220:
  4353     0447  00F3               	movwf	SetBit@value
  4354     0448  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4355                           
  4356                           ;../../pic16flcd.c: 82:     SetBit(config->port, config->d7_pin, (data >> 7) & 0x01);
  4357     044D  087C               	movf	Lcd_WriteChar@config,w
  4358     044E  0084               	movwf	4
  4359     044F  1383               	bcf	3,7	;select IRP bank0
  4360     0450  0800               	movf	0,w
  4361     0451  00F0               	movwf	SetBit@port
  4362     0452  0A84               	incf	4,f
  4363     0453  0800               	movf	0,w
  4364     0454  0384               	decf	4,f
  4365     0455  00F1               	movwf	SetBit@port+1
  4366     0456  087C               	movf	Lcd_WriteChar@config,w
  4367     0457  3E07               	addlw	7
  4368     0458  0084               	movwf	4
  4369     0459  0800               	movf	0,w
  4370     045A  00F2               	movwf	SetBit@pin
  4371     045B  0879               	movf	Lcd_WriteChar@data,w
  4372     045C  00FB               	movwf	??_Lcd_WriteChar+1
  4373     045D  3007               	movlw	7
  4374     045E                     u2235:
  4375     045E  1003               	clrc
  4376     045F  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4377     0460  3EFF               	addlw	-1
  4378     0461  1D03               	skipz
  4379     0462  2C5E               	goto	u2235
  4380     0463  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4381     0464  2C67               	goto	u2240
  4382     0465  3001               	movlw	1
  4383     0466  2C68               	goto	u2250
  4384     0467                     u2240:
  4385     0467  3000               	movlw	0
  4386     0468                     u2250:
  4387     0468  00F3               	movwf	SetBit@value
  4388     0469  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4389                           
  4390                           ;../../pic16flcd.c: 84:     SetBit(config->port, config->rs_pin, 1);
  4391     046E  087C               	movf	Lcd_WriteChar@config,w
  4392     046F  0084               	movwf	4
  4393     0470  1383               	bcf	3,7	;select IRP bank0
  4394     0471  0800               	movf	0,w
  4395     0472  00F0               	movwf	SetBit@port
  4396     0473  0A84               	incf	4,f
  4397     0474  0800               	movf	0,w
  4398     0475  0384               	decf	4,f
  4399     0476  00F1               	movwf	SetBit@port+1
  4400     0477  087C               	movf	Lcd_WriteChar@config,w
  4401     0478  3E02               	addlw	2
  4402     0479  0084               	movwf	4
  4403     047A  0800               	movf	0,w
  4404     047B  00F2               	movwf	SetBit@pin
  4405     047C  01F3               	clrf	SetBit@value
  4406     047D  0AF3               	incf	SetBit@value,f
  4407     047E  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4408                           
  4409                           ;../../pic16flcd.c: 85:     PulseEnable(config);
  4410     0483  087C               	movf	Lcd_WriteChar@config,w
  4411     0484  120A  158A  2605  120A  118A  	fcall	_PulseEnable
  4412                           
  4413                           ;../../pic16flcd.c: 88:     SetBit(config->port, config->d4_pin, data & 0x01);
  4414     0489  087C               	movf	Lcd_WriteChar@config,w
  4415     048A  0084               	movwf	4
  4416     048B  1383               	bcf	3,7	;select IRP bank0
  4417     048C  0800               	movf	0,w
  4418     048D  00F0               	movwf	SetBit@port
  4419     048E  0A84               	incf	4,f
  4420     048F  0800               	movf	0,w
  4421     0490  0384               	decf	4,f
  4422     0491  00F1               	movwf	SetBit@port+1
  4423     0492  087C               	movf	Lcd_WriteChar@config,w
  4424     0493  3E04               	addlw	4
  4425     0494  0084               	movwf	4
  4426     0495  0800               	movf	0,w
  4427     0496  00F2               	movwf	SetBit@pin
  4428     0497  1C79               	btfss	Lcd_WriteChar@data,0
  4429     0498  2C9B               	goto	u2260
  4430     0499  3001               	movlw	1
  4431     049A  2C9C               	goto	u2270
  4432     049B                     u2260:
  4433     049B  3000               	movlw	0
  4434     049C                     u2270:
  4435     049C  00F3               	movwf	SetBit@value
  4436     049D  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4437                           
  4438                           ;../../pic16flcd.c: 89:     SetBit(config->port, config->d5_pin, (data >> 1) & 0x01);
  4439     04A2  087C               	movf	Lcd_WriteChar@config,w
  4440     04A3  0084               	movwf	4
  4441     04A4  1383               	bcf	3,7	;select IRP bank0
  4442     04A5  0800               	movf	0,w
  4443     04A6  00F0               	movwf	SetBit@port
  4444     04A7  0A84               	incf	4,f
  4445     04A8  0800               	movf	0,w
  4446     04A9  0384               	decf	4,f
  4447     04AA  00F1               	movwf	SetBit@port+1
  4448     04AB  087C               	movf	Lcd_WriteChar@config,w
  4449     04AC  3E05               	addlw	5
  4450     04AD  0084               	movwf	4
  4451     04AE  0800               	movf	0,w
  4452     04AF  00F2               	movwf	SetBit@pin
  4453     04B0  0879               	movf	Lcd_WriteChar@data,w
  4454     04B1  00FB               	movwf	??_Lcd_WriteChar+1
  4455     04B2  3001               	movlw	1
  4456     04B3                     u2285:
  4457     04B3  1003               	clrc
  4458     04B4  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4459     04B5  3EFF               	addlw	-1
  4460     04B6  1D03               	skipz
  4461     04B7  2CB3               	goto	u2285
  4462     04B8  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4463     04B9  2CBC               	goto	u2290
  4464     04BA  3001               	movlw	1
  4465     04BB  2CBD               	goto	u2300
  4466     04BC                     u2290:
  4467     04BC  3000               	movlw	0
  4468     04BD                     u2300:
  4469     04BD  00F3               	movwf	SetBit@value
  4470     04BE  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4471                           
  4472                           ;../../pic16flcd.c: 90:     SetBit(config->port, config->d6_pin, (data >> 2) & 0x01);
  4473     04C3  087C               	movf	Lcd_WriteChar@config,w
  4474     04C4  0084               	movwf	4
  4475     04C5  1383               	bcf	3,7	;select IRP bank0
  4476     04C6  0800               	movf	0,w
  4477     04C7  00F0               	movwf	SetBit@port
  4478     04C8  0A84               	incf	4,f
  4479     04C9  0800               	movf	0,w
  4480     04CA  0384               	decf	4,f
  4481     04CB  00F1               	movwf	SetBit@port+1
  4482     04CC  087C               	movf	Lcd_WriteChar@config,w
  4483     04CD  3E06               	addlw	6
  4484     04CE  0084               	movwf	4
  4485     04CF  0800               	movf	0,w
  4486     04D0  00F2               	movwf	SetBit@pin
  4487     04D1  0879               	movf	Lcd_WriteChar@data,w
  4488     04D2  00FB               	movwf	??_Lcd_WriteChar+1
  4489     04D3  3002               	movlw	2
  4490     04D4                     u2315:
  4491     04D4  1003               	clrc
  4492     04D5  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4493     04D6  3EFF               	addlw	-1
  4494     04D7  1D03               	skipz
  4495     04D8  2CD4               	goto	u2315
  4496     04D9  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4497     04DA  2CDD               	goto	u2320
  4498     04DB  3001               	movlw	1
  4499     04DC  2CDE               	goto	u2330
  4500     04DD                     u2320:
  4501     04DD  3000               	movlw	0
  4502     04DE                     u2330:
  4503     04DE  00F3               	movwf	SetBit@value
  4504     04DF  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4505                           
  4506                           ;../../pic16flcd.c: 91:     SetBit(config->port, config->d7_pin, (data >> 3) & 0x01);
  4507     04E4  087C               	movf	Lcd_WriteChar@config,w
  4508     04E5  0084               	movwf	4
  4509     04E6  1383               	bcf	3,7	;select IRP bank0
  4510     04E7  0800               	movf	0,w
  4511     04E8  00F0               	movwf	SetBit@port
  4512     04E9  0A84               	incf	4,f
  4513     04EA  0800               	movf	0,w
  4514     04EB  0384               	decf	4,f
  4515     04EC  00F1               	movwf	SetBit@port+1
  4516     04ED  087C               	movf	Lcd_WriteChar@config,w
  4517     04EE  3E07               	addlw	7
  4518     04EF  0084               	movwf	4
  4519     04F0  0800               	movf	0,w
  4520     04F1  00F2               	movwf	SetBit@pin
  4521     04F2  0879               	movf	Lcd_WriteChar@data,w
  4522     04F3  00FB               	movwf	??_Lcd_WriteChar+1
  4523     04F4  3003               	movlw	3
  4524     04F5                     u2345:
  4525     04F5  1003               	clrc
  4526     04F6  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4527     04F7  3EFF               	addlw	-1
  4528     04F8  1D03               	skipz
  4529     04F9  2CF5               	goto	u2345
  4530     04FA  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4531     04FB  2CFE               	goto	u2350
  4532     04FC  3001               	movlw	1
  4533     04FD  2CFF               	goto	u2360
  4534     04FE                     u2350:
  4535     04FE  3000               	movlw	0
  4536     04FF                     u2360:
  4537     04FF  00F3               	movwf	SetBit@value
  4538     0500  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4539                           
  4540                           ;../../pic16flcd.c: 93:     PulseEnable(config);
  4541     0505  087C               	movf	Lcd_WriteChar@config,w
  4542     0506  120A  158A  2605   	fcall	_PulseEnable
  4543     0509  0008               	return
  4544     050A                     __end_of_Lcd_WriteChar:
  4545                           
  4546                           	psect	text24
  4547     0D27                     __ptext24:	
  4548 ;; *************** function _Lcd_SetCursor *****************
  4549 ;; Defined at:
  4550 ;;		line 148 in file "../../pic16flcd.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  config          1    wreg     PTR struct .
  4553 ;;		 -> main@lcd(8), 
  4554 ;;  row             1    0[BANK0 ] unsigned char 
  4555 ;;  column          1    1[BANK0 ] unsigned char 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  config          1    5[BANK0 ] PTR struct .
  4558 ;;		 -> main@lcd(8), 
  4559 ;;  address         1    4[BANK0 ] unsigned char 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 300/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4569 ;;      Params:         0       2       0       0       0
  4570 ;;      Locals:         0       2       0       0       0
  4571 ;;      Temps:          0       2       0       0       0
  4572 ;;      Totals:         0       6       0       0       0
  4573 ;;Total ram usage:        6 bytes
  4574 ;; Hardware stack levels used: 1
  4575 ;; Hardware stack levels required when called: 3
  4576 ;; This function calls:
  4577 ;;		_Lcd_Command
  4578 ;; This function is called by:
  4579 ;;		_main
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583     0D27                     _Lcd_SetCursor:	
  4584                           ;psect for function _Lcd_SetCursor
  4585                           
  4586                           
  4587                           ;incstack = 0
  4588                           ; Regs used in _Lcd_SetCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4589                           ;Lcd_SetCursor@config stored from wreg
  4590     0D27  00A5               	movwf	Lcd_SetCursor@config
  4591                           
  4592                           ;../../pic16flcd.c: 149:     unsigned char address;;../../pic16flcd.c: 152:     switch(r
      +                          ow) {
  4593     0D28  2D2E               	goto	l1664
  4594     0D29                     l1658:
  4595                           
  4596                           ;../../pic16flcd.c: 154:             address = 0x80;
  4597     0D29  3080               	movlw	128
  4598     0D2A  2D2C               	goto	L1
  4599     0D2B                     l1660:	
  4600                           ;../../pic16flcd.c: 155:             break;
  4601                           
  4602                           
  4603                           ;../../pic16flcd.c: 157:             address = 0xC0;
  4604     0D2B  30C0               	movlw	192
  4605     0D2C                     L1:
  4606     0D2C  00A4               	movwf	Lcd_SetCursor@address
  4607                           
  4608                           ;../../pic16flcd.c: 158:             break;
  4609     0D2D  2D3E               	goto	l1666
  4610     0D2E                     l1664:
  4611     0D2E  0820               	movf	Lcd_SetCursor@row,w
  4612     0D2F  00A2               	movwf	??_Lcd_SetCursor
  4613     0D30  01A3               	clrf	??_Lcd_SetCursor+1
  4614                           
  4615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4616                           ; Switch size 1, requested type "simple"
  4617                           ; Number of cases is 1, Range of values is 0 to 0
  4618                           ; switch strategies available:
  4619                           ; Name         Instructions Cycles
  4620                           ; simple_byte            4     3 (average)
  4621                           ; direct_byte           11     8 (fixed)
  4622                           ; jumptable            260     6 (fixed)
  4623                           ;	Chosen strategy is simple_byte
  4624     0D31  0823               	movf	??_Lcd_SetCursor+1,w
  4625     0D32  3A00               	xorlw	0	; case 0
  4626     0D33  1903               	skipnz
  4627     0D34  2D36               	goto	l2038
  4628     0D35  2D29               	goto	l1658
  4629     0D36                     l2038:
  4630                           
  4631                           ; Switch size 1, requested type "simple"
  4632                           ; Number of cases is 2, Range of values is 1 to 2
  4633                           ; switch strategies available:
  4634                           ; Name         Instructions Cycles
  4635                           ; simple_byte            7     4 (average)
  4636                           ; direct_byte           17    11 (fixed)
  4637                           ; jumptable            263     9 (fixed)
  4638                           ;	Chosen strategy is simple_byte
  4639     0D36  0822               	movf	??_Lcd_SetCursor,w
  4640     0D37  3A01               	xorlw	1	; case 1
  4641     0D38  1903               	skipnz
  4642     0D39  2D29               	goto	l1658
  4643     0D3A  3A03               	xorlw	3	; case 2
  4644     0D3B  1903               	skipnz
  4645     0D3C  2D2B               	goto	l1660
  4646     0D3D  2D29               	goto	l1658
  4647     0D3E                     l1666:
  4648                           
  4649                           ;../../pic16flcd.c: 164:     address += (column - 1);
  4650     0D3E  0821               	movf	Lcd_SetCursor@column,w
  4651     0D3F  3EFF               	addlw	255
  4652     0D40  00A2               	movwf	??_Lcd_SetCursor
  4653     0D41  0822               	movf	??_Lcd_SetCursor,w
  4654     0D42  07A4               	addwf	Lcd_SetCursor@address,f
  4655                           
  4656                           ;../../pic16flcd.c: 167:     Lcd_Command(config, address);
  4657     0D43  0824               	movf	Lcd_SetCursor@address,w
  4658     0D44  00F9               	movwf	Lcd_Command@cmd
  4659     0D45  0825               	movf	Lcd_SetCursor@config,w
  4660     0D46  120A  118A  22C9   	fcall	_Lcd_Command
  4661     0D49  0008               	return
  4662     0D4A                     __end_of_Lcd_SetCursor:
  4663                           
  4664                           	psect	text25
  4665     0045                     __ptext25:	
  4666 ;; *************** function _Lcd_Init *****************
  4667 ;; Defined at:
  4668 ;;		line 110 in file "../../pic16flcd.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  config          1    wreg     PTR struct .
  4671 ;;		 -> main@lcd(8), 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  config          1    4[BANK0 ] PTR struct .
  4674 ;;		 -> main@lcd(8), 
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : B00/100
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4684 ;;      Params:         0       0       0       0       0
  4685 ;;      Locals:         0       1       0       0       0
  4686 ;;      Temps:          0       2       0       0       0
  4687 ;;      Totals:         0       3       0       0       0
  4688 ;;Total ram usage:        3 bytes
  4689 ;; Hardware stack levels used: 1
  4690 ;; Hardware stack levels required when called: 4
  4691 ;; This function calls:
  4692 ;;		_Lcd_Clear
  4693 ;;		_Lcd_Command
  4694 ;; This function is called by:
  4695 ;;		_main
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699     0045                     _Lcd_Init:	
  4700                           ;psect for function _Lcd_Init
  4701                           
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _Lcd_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4705                           ;Lcd_Init@config stored from wreg
  4706     0045  1283               	bcf	3,5	;RP0=0, select bank0
  4707     0046  00A4               	movwf	Lcd_Init@config
  4708                           
  4709                           ;../../pic16flcd.c: 116:     _delay((unsigned long)((15)*(4000000/4000.0)));
  4710     0047  3014               	movlw	20
  4711     0048  1283               	bcf	3,5	;RP0=0, select bank0
  4712     0049  1303               	bcf	3,6	;RP1=0, select bank0
  4713     004A  00A3               	movwf	??_Lcd_Init+1
  4714     004B  3079               	movlw	121
  4715     004C  00A2               	movwf	??_Lcd_Init
  4716     004D                     u3087:
  4717     004D  0BA2               	decfsz	??_Lcd_Init,f
  4718     004E  284D               	goto	u3087
  4719     004F  0BA3               	decfsz	??_Lcd_Init+1,f
  4720     0050  284D               	goto	u3087
  4721                           
  4722                           ;../../pic16flcd.c: 117:     Lcd_Command(config, 0x03);
  4723     0051  3003               	movlw	3
  4724     0052  00F9               	movwf	Lcd_Command@cmd
  4725     0053  1283               	bcf	3,5	;RP0=0, select bank0
  4726     0054  1303               	bcf	3,6	;RP1=0, select bank0
  4727     0055  0824               	movf	Lcd_Init@config,w
  4728     0056  120A  118A  22C9  120A  118A  	fcall	_Lcd_Command
  4729                           
  4730                           ;../../pic16flcd.c: 118:     _delay((unsigned long)((5)*(4000000/4000.0)));
  4731     005B  3007               	movlw	7
  4732     005C  1283               	bcf	3,5	;RP0=0, select bank0
  4733     005D  1303               	bcf	3,6	;RP1=0, select bank0
  4734     005E  00A3               	movwf	??_Lcd_Init+1
  4735     005F  307C               	movlw	124
  4736     0060  00A2               	movwf	??_Lcd_Init
  4737     0061                     u3097:
  4738     0061  0BA2               	decfsz	??_Lcd_Init,f
  4739     0062  2861               	goto	u3097
  4740     0063  0BA3               	decfsz	??_Lcd_Init+1,f
  4741     0064  2861               	goto	u3097
  4742     0065  0000               	nop
  4743                           
  4744                           ;../../pic16flcd.c: 119:     Lcd_Command(config, 0x03);
  4745     0066  3003               	movlw	3
  4746     0067  00F9               	movwf	Lcd_Command@cmd
  4747     0068  1283               	bcf	3,5	;RP0=0, select bank0
  4748     0069  1303               	bcf	3,6	;RP1=0, select bank0
  4749     006A  0824               	movf	Lcd_Init@config,w
  4750     006B  120A  118A  22C9  120A  118A  	fcall	_Lcd_Command
  4751                           
  4752                           ;../../pic16flcd.c: 120:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  4753     0070  3020               	movlw	32
  4754     0071  1283               	bcf	3,5	;RP0=0, select bank0
  4755     0072  1303               	bcf	3,6	;RP1=0, select bank0
  4756     0073  00A2               	movwf	??_Lcd_Init
  4757     0074                     u3107:
  4758     0074  0BA2               	decfsz	??_Lcd_Init,f
  4759     0075  2874               	goto	u3107
  4760     0076  0000               	nop
  4761                           
  4762                           ;../../pic16flcd.c: 121:     Lcd_Command(config, 0x03);
  4763     0077  3003               	movlw	3
  4764     0078  00F9               	movwf	Lcd_Command@cmd
  4765     0079  1283               	bcf	3,5	;RP0=0, select bank0
  4766     007A  1303               	bcf	3,6	;RP1=0, select bank0
  4767     007B  0824               	movf	Lcd_Init@config,w
  4768     007C  120A  118A  22C9  120A  118A  	fcall	_Lcd_Command
  4769                           
  4770                           ;../../pic16flcd.c: 122:     Lcd_Command(config, 0x02);
  4771     0081  3002               	movlw	2
  4772     0082  00F9               	movwf	Lcd_Command@cmd
  4773     0083  1283               	bcf	3,5	;RP0=0, select bank0
  4774     0084  1303               	bcf	3,6	;RP1=0, select bank0
  4775     0085  0824               	movf	Lcd_Init@config,w
  4776     0086  120A  118A  22C9  120A  118A  	fcall	_Lcd_Command
  4777                           
  4778                           ;../../pic16flcd.c: 124:     Lcd_Command(config, 0x28);
  4779     008B  3028               	movlw	40
  4780     008C  00F9               	movwf	Lcd_Command@cmd
  4781     008D  1283               	bcf	3,5	;RP0=0, select bank0
  4782     008E  1303               	bcf	3,6	;RP1=0, select bank0
  4783     008F  0824               	movf	Lcd_Init@config,w
  4784     0090  120A  118A  22C9  120A  118A  	fcall	_Lcd_Command
  4785                           
  4786                           ;../../pic16flcd.c: 125:     Lcd_Command(config, 0x0C);
  4787     0095  300C               	movlw	12
  4788     0096  00F9               	movwf	Lcd_Command@cmd
  4789     0097  1283               	bcf	3,5	;RP0=0, select bank0
  4790     0098  1303               	bcf	3,6	;RP1=0, select bank0
  4791     0099  0824               	movf	Lcd_Init@config,w
  4792     009A  120A  118A  22C9  120A  118A  	fcall	_Lcd_Command
  4793                           
  4794                           ;../../pic16flcd.c: 126:     Lcd_Command(config, 0x06);
  4795     009F  3006               	movlw	6
  4796     00A0  00F9               	movwf	Lcd_Command@cmd
  4797     00A1  1283               	bcf	3,5	;RP0=0, select bank0
  4798     00A2  1303               	bcf	3,6	;RP1=0, select bank0
  4799     00A3  0824               	movf	Lcd_Init@config,w
  4800     00A4  120A  118A  22C9  120A  118A  	fcall	_Lcd_Command
  4801                           
  4802                           ;../../pic16flcd.c: 127:     Lcd_Clear(config);
  4803     00A9  1283               	bcf	3,5	;RP0=0, select bank0
  4804     00AA  1303               	bcf	3,6	;RP1=0, select bank0
  4805     00AB  0824               	movf	Lcd_Init@config,w
  4806     00AC  120A  158A  24BE   	fcall	_Lcd_Clear
  4807     00AF  0008               	return
  4808     00B0                     __end_of_Lcd_Init:
  4809                           
  4810                           	psect	text26
  4811     0CBE                     __ptext26:	
  4812 ;; *************** function _Lcd_Clear *****************
  4813 ;; Defined at:
  4814 ;;		line 135 in file "../../pic16flcd.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  config          1    wreg     PTR struct .
  4817 ;;		 -> main@lcd(8), 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  config          1   13[COMMON] PTR struct .
  4820 ;;		 -> main@lcd(8), 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/100
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4830 ;;      Params:         0       0       0       0       0
  4831 ;;      Locals:         1       0       0       0       0
  4832 ;;      Temps:          0       2       0       0       0
  4833 ;;      Totals:         1       2       0       0       0
  4834 ;;Total ram usage:        3 bytes
  4835 ;; Hardware stack levels used: 1
  4836 ;; Hardware stack levels required when called: 3
  4837 ;; This function calls:
  4838 ;;		_Lcd_Command
  4839 ;; This function is called by:
  4840 ;;		_Lcd_Init
  4841 ;;		_main
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845     0CBE                     _Lcd_Clear:	
  4846                           ;psect for function _Lcd_Clear
  4847                           
  4848                           
  4849                           ;incstack = 0
  4850                           ; Regs used in _Lcd_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4851                           ;Lcd_Clear@config stored from wreg
  4852     0CBE  00FD               	movwf	Lcd_Clear@config
  4853                           
  4854                           ;../../pic16flcd.c: 136:     Lcd_Command(config, 0x01);
  4855     0CBF  01F9               	clrf	Lcd_Command@cmd
  4856     0CC0  0AF9               	incf	Lcd_Command@cmd,f
  4857     0CC1  087D               	movf	Lcd_Clear@config,w
  4858     0CC2  120A  118A  22C9  120A  158A  	fcall	_Lcd_Command
  4859                           
  4860                           ;../../pic16flcd.c: 137:     _delay((unsigned long)((2)*(4000000/4000.0)));
  4861     0CC7  3003               	movlw	3
  4862     0CC8  1283               	bcf	3,5	;RP0=0, select bank0
  4863     0CC9  1303               	bcf	3,6	;RP1=0, select bank0
  4864     0CCA  00A1               	movwf	??_Lcd_Clear+1
  4865     0CCB  3097               	movlw	151
  4866     0CCC  00A0               	movwf	??_Lcd_Clear
  4867     0CCD                     u3117:
  4868     0CCD  0BA0               	decfsz	??_Lcd_Clear,f
  4869     0CCE  2CCD               	goto	u3117
  4870     0CCF  0BA1               	decfsz	??_Lcd_Clear+1,f
  4871     0CD0  2CCD               	goto	u3117
  4872     0CD1  0008               	return
  4873     0CD2                     __end_of_Lcd_Clear:
  4874                           
  4875                           	psect	text27
  4876     02C9                     __ptext27:	
  4877 ;; *************** function _Lcd_Command *****************
  4878 ;; Defined at:
  4879 ;;		line 51 in file "../../pic16flcd.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  config          1    wreg     PTR struct .
  4882 ;;		 -> main@lcd(8), 
  4883 ;;  cmd             1    9[COMMON] unsigned char 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  config          1   12[COMMON] PTR struct .
  4886 ;;		 -> main@lcd(8), 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4896 ;;      Params:         1       0       0       0       0
  4897 ;;      Locals:         1       0       0       0       0
  4898 ;;      Temps:          2       0       0       0       0
  4899 ;;      Totals:         4       0       0       0       0
  4900 ;;Total ram usage:        4 bytes
  4901 ;; Hardware stack levels used: 1
  4902 ;; Hardware stack levels required when called: 2
  4903 ;; This function calls:
  4904 ;;		_PulseEnable
  4905 ;;		_SetBit
  4906 ;; This function is called by:
  4907 ;;		_Lcd_Init
  4908 ;;		_Lcd_Clear
  4909 ;;		_Lcd_SetCursor
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913     02C9                     _Lcd_Command:	
  4914                           ;psect for function _Lcd_Command
  4915                           
  4916                           
  4917                           ;incstack = 0
  4918                           ; Regs used in _Lcd_Command: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4919                           ;Lcd_Command@config stored from wreg
  4920     02C9  00FC               	movwf	Lcd_Command@config
  4921                           
  4922                           ;../../pic16flcd.c: 53:     SetBit(config->port, config->d4_pin, (cmd >> 4) & 0x01);
  4923     02CA  087C               	movf	Lcd_Command@config,w
  4924     02CB  0084               	movwf	4
  4925     02CC  1383               	bcf	3,7	;select IRP bank0
  4926     02CD  0800               	movf	0,w
  4927     02CE  00F0               	movwf	SetBit@port
  4928     02CF  0A84               	incf	4,f
  4929     02D0  0800               	movf	0,w
  4930     02D1  0384               	decf	4,f
  4931     02D2  00F1               	movwf	SetBit@port+1
  4932     02D3  087C               	movf	Lcd_Command@config,w
  4933     02D4  3E04               	addlw	4
  4934     02D5  0084               	movwf	4
  4935     02D6  0800               	movf	0,w
  4936     02D7  00F2               	movwf	SetBit@pin
  4937     02D8  0879               	movf	Lcd_Command@cmd,w
  4938     02D9  00FB               	movwf	??_Lcd_Command+1
  4939     02DA  3004               	movlw	4
  4940     02DB                     u1885:
  4941     02DB  1003               	clrc
  4942     02DC  0CFB               	rrf	??_Lcd_Command+1,f
  4943     02DD  3EFF               	addlw	-1
  4944     02DE  1D03               	skipz
  4945     02DF  2ADB               	goto	u1885
  4946     02E0  1C7B               	btfss	??_Lcd_Command+1,0
  4947     02E1  2AE4               	goto	u1890
  4948     02E2  3001               	movlw	1
  4949     02E3  2AE5               	goto	u1900
  4950     02E4                     u1890:
  4951     02E4  3000               	movlw	0
  4952     02E5                     u1900:
  4953     02E5  00F3               	movwf	SetBit@value
  4954     02E6  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4955                           
  4956                           ;../../pic16flcd.c: 54:     SetBit(config->port, config->d5_pin, (cmd >> 5) & 0x01);
  4957     02EB  087C               	movf	Lcd_Command@config,w
  4958     02EC  0084               	movwf	4
  4959     02ED  1383               	bcf	3,7	;select IRP bank0
  4960     02EE  0800               	movf	0,w
  4961     02EF  00F0               	movwf	SetBit@port
  4962     02F0  0A84               	incf	4,f
  4963     02F1  0800               	movf	0,w
  4964     02F2  0384               	decf	4,f
  4965     02F3  00F1               	movwf	SetBit@port+1
  4966     02F4  087C               	movf	Lcd_Command@config,w
  4967     02F5  3E05               	addlw	5
  4968     02F6  0084               	movwf	4
  4969     02F7  0800               	movf	0,w
  4970     02F8  00F2               	movwf	SetBit@pin
  4971     02F9  0879               	movf	Lcd_Command@cmd,w
  4972     02FA  00FB               	movwf	??_Lcd_Command+1
  4973     02FB  3005               	movlw	5
  4974     02FC                     u1915:
  4975     02FC  1003               	clrc
  4976     02FD  0CFB               	rrf	??_Lcd_Command+1,f
  4977     02FE  3EFF               	addlw	-1
  4978     02FF  1D03               	skipz
  4979     0300  2AFC               	goto	u1915
  4980     0301  1C7B               	btfss	??_Lcd_Command+1,0
  4981     0302  2B05               	goto	u1920
  4982     0303  3001               	movlw	1
  4983     0304  2B06               	goto	u1930
  4984     0305                     u1920:
  4985     0305  3000               	movlw	0
  4986     0306                     u1930:
  4987     0306  00F3               	movwf	SetBit@value
  4988     0307  120A  158A  25DB  120A  118A  	fcall	_SetBit
  4989                           
  4990                           ;../../pic16flcd.c: 55:     SetBit(config->port, config->d6_pin, (cmd >> 6) & 0x01);
  4991     030C  087C               	movf	Lcd_Command@config,w
  4992     030D  0084               	movwf	4
  4993     030E  1383               	bcf	3,7	;select IRP bank0
  4994     030F  0800               	movf	0,w
  4995     0310  00F0               	movwf	SetBit@port
  4996     0311  0A84               	incf	4,f
  4997     0312  0800               	movf	0,w
  4998     0313  0384               	decf	4,f
  4999     0314  00F1               	movwf	SetBit@port+1
  5000     0315  087C               	movf	Lcd_Command@config,w
  5001     0316  3E06               	addlw	6
  5002     0317  0084               	movwf	4
  5003     0318  0800               	movf	0,w
  5004     0319  00F2               	movwf	SetBit@pin
  5005     031A  0879               	movf	Lcd_Command@cmd,w
  5006     031B  00FB               	movwf	??_Lcd_Command+1
  5007     031C  3006               	movlw	6
  5008     031D                     u1945:
  5009     031D  1003               	clrc
  5010     031E  0CFB               	rrf	??_Lcd_Command+1,f
  5011     031F  3EFF               	addlw	-1
  5012     0320  1D03               	skipz
  5013     0321  2B1D               	goto	u1945
  5014     0322  1C7B               	btfss	??_Lcd_Command+1,0
  5015     0323  2B26               	goto	u1950
  5016     0324  3001               	movlw	1
  5017     0325  2B27               	goto	u1960
  5018     0326                     u1950:
  5019     0326  3000               	movlw	0
  5020     0327                     u1960:
  5021     0327  00F3               	movwf	SetBit@value
  5022     0328  120A  158A  25DB  120A  118A  	fcall	_SetBit
  5023                           
  5024                           ;../../pic16flcd.c: 56:     SetBit(config->port, config->d7_pin, (cmd >> 7) & 0x01);
  5025     032D  087C               	movf	Lcd_Command@config,w
  5026     032E  0084               	movwf	4
  5027     032F  1383               	bcf	3,7	;select IRP bank0
  5028     0330  0800               	movf	0,w
  5029     0331  00F0               	movwf	SetBit@port
  5030     0332  0A84               	incf	4,f
  5031     0333  0800               	movf	0,w
  5032     0334  0384               	decf	4,f
  5033     0335  00F1               	movwf	SetBit@port+1
  5034     0336  087C               	movf	Lcd_Command@config,w
  5035     0337  3E07               	addlw	7
  5036     0338  0084               	movwf	4
  5037     0339  0800               	movf	0,w
  5038     033A  00F2               	movwf	SetBit@pin
  5039     033B  0879               	movf	Lcd_Command@cmd,w
  5040     033C  00FB               	movwf	??_Lcd_Command+1
  5041     033D  3007               	movlw	7
  5042     033E                     u1975:
  5043     033E  1003               	clrc
  5044     033F  0CFB               	rrf	??_Lcd_Command+1,f
  5045     0340  3EFF               	addlw	-1
  5046     0341  1D03               	skipz
  5047     0342  2B3E               	goto	u1975
  5048     0343  1C7B               	btfss	??_Lcd_Command+1,0
  5049     0344  2B47               	goto	u1980
  5050     0345  3001               	movlw	1
  5051     0346  2B48               	goto	u1990
  5052     0347                     u1980:
  5053     0347  3000               	movlw	0
  5054     0348                     u1990:
  5055     0348  00F3               	movwf	SetBit@value
  5056     0349  120A  158A  25DB  120A  118A  	fcall	_SetBit
  5057                           
  5058                           ;../../pic16flcd.c: 58:     SetBit(config->port, config->rs_pin, 0);
  5059     034E  087C               	movf	Lcd_Command@config,w
  5060     034F  0084               	movwf	4
  5061     0350  1383               	bcf	3,7	;select IRP bank0
  5062     0351  0800               	movf	0,w
  5063     0352  00F0               	movwf	SetBit@port
  5064     0353  0A84               	incf	4,f
  5065     0354  0800               	movf	0,w
  5066     0355  0384               	decf	4,f
  5067     0356  00F1               	movwf	SetBit@port+1
  5068     0357  087C               	movf	Lcd_Command@config,w
  5069     0358  3E02               	addlw	2
  5070     0359  0084               	movwf	4
  5071     035A  0800               	movf	0,w
  5072     035B  00F2               	movwf	SetBit@pin
  5073     035C  01F3               	clrf	SetBit@value
  5074     035D  120A  158A  25DB  120A  118A  	fcall	_SetBit
  5075                           
  5076                           ;../../pic16flcd.c: 59:     PulseEnable(config);
  5077     0362  087C               	movf	Lcd_Command@config,w
  5078     0363  120A  158A  2605  120A  118A  	fcall	_PulseEnable
  5079                           
  5080                           ;../../pic16flcd.c: 62:     SetBit(config->port, config->d4_pin, cmd & 0x01);
  5081     0368  087C               	movf	Lcd_Command@config,w
  5082     0369  0084               	movwf	4
  5083     036A  1383               	bcf	3,7	;select IRP bank0
  5084     036B  0800               	movf	0,w
  5085     036C  00F0               	movwf	SetBit@port
  5086     036D  0A84               	incf	4,f
  5087     036E  0800               	movf	0,w
  5088     036F  0384               	decf	4,f
  5089     0370  00F1               	movwf	SetBit@port+1
  5090     0371  087C               	movf	Lcd_Command@config,w
  5091     0372  3E04               	addlw	4
  5092     0373  0084               	movwf	4
  5093     0374  0800               	movf	0,w
  5094     0375  00F2               	movwf	SetBit@pin
  5095     0376  1C79               	btfss	Lcd_Command@cmd,0
  5096     0377  2B7A               	goto	u2000
  5097     0378  3001               	movlw	1
  5098     0379  2B7B               	goto	u2010
  5099     037A                     u2000:
  5100     037A  3000               	movlw	0
  5101     037B                     u2010:
  5102     037B  00F3               	movwf	SetBit@value
  5103     037C  120A  158A  25DB  120A  118A  	fcall	_SetBit
  5104                           
  5105                           ;../../pic16flcd.c: 63:     SetBit(config->port, config->d5_pin, (cmd >> 1) & 0x01);
  5106     0381  087C               	movf	Lcd_Command@config,w
  5107     0382  0084               	movwf	4
  5108     0383  1383               	bcf	3,7	;select IRP bank0
  5109     0384  0800               	movf	0,w
  5110     0385  00F0               	movwf	SetBit@port
  5111     0386  0A84               	incf	4,f
  5112     0387  0800               	movf	0,w
  5113     0388  0384               	decf	4,f
  5114     0389  00F1               	movwf	SetBit@port+1
  5115     038A  087C               	movf	Lcd_Command@config,w
  5116     038B  3E05               	addlw	5
  5117     038C  0084               	movwf	4
  5118     038D  0800               	movf	0,w
  5119     038E  00F2               	movwf	SetBit@pin
  5120     038F  0879               	movf	Lcd_Command@cmd,w
  5121     0390  00FB               	movwf	??_Lcd_Command+1
  5122     0391  3001               	movlw	1
  5123     0392                     u2025:
  5124     0392  1003               	clrc
  5125     0393  0CFB               	rrf	??_Lcd_Command+1,f
  5126     0394  3EFF               	addlw	-1
  5127     0395  1D03               	skipz
  5128     0396  2B92               	goto	u2025
  5129     0397  1C7B               	btfss	??_Lcd_Command+1,0
  5130     0398  2B9B               	goto	u2030
  5131     0399  3001               	movlw	1
  5132     039A  2B9C               	goto	u2040
  5133     039B                     u2030:
  5134     039B  3000               	movlw	0
  5135     039C                     u2040:
  5136     039C  00F3               	movwf	SetBit@value
  5137     039D  120A  158A  25DB  120A  118A  	fcall	_SetBit
  5138                           
  5139                           ;../../pic16flcd.c: 64:     SetBit(config->port, config->d6_pin, (cmd >> 2) & 0x01);
  5140     03A2  087C               	movf	Lcd_Command@config,w
  5141     03A3  0084               	movwf	4
  5142     03A4  1383               	bcf	3,7	;select IRP bank0
  5143     03A5  0800               	movf	0,w
  5144     03A6  00F0               	movwf	SetBit@port
  5145     03A7  0A84               	incf	4,f
  5146     03A8  0800               	movf	0,w
  5147     03A9  0384               	decf	4,f
  5148     03AA  00F1               	movwf	SetBit@port+1
  5149     03AB  087C               	movf	Lcd_Command@config,w
  5150     03AC  3E06               	addlw	6
  5151     03AD  0084               	movwf	4
  5152     03AE  0800               	movf	0,w
  5153     03AF  00F2               	movwf	SetBit@pin
  5154     03B0  0879               	movf	Lcd_Command@cmd,w
  5155     03B1  00FB               	movwf	??_Lcd_Command+1
  5156     03B2  3002               	movlw	2
  5157     03B3                     u2055:
  5158     03B3  1003               	clrc
  5159     03B4  0CFB               	rrf	??_Lcd_Command+1,f
  5160     03B5  3EFF               	addlw	-1
  5161     03B6  1D03               	skipz
  5162     03B7  2BB3               	goto	u2055
  5163     03B8  1C7B               	btfss	??_Lcd_Command+1,0
  5164     03B9  2BBC               	goto	u2060
  5165     03BA  3001               	movlw	1
  5166     03BB  2BBD               	goto	u2070
  5167     03BC                     u2060:
  5168     03BC  3000               	movlw	0
  5169     03BD                     u2070:
  5170     03BD  00F3               	movwf	SetBit@value
  5171     03BE  120A  158A  25DB  120A  118A  	fcall	_SetBit
  5172                           
  5173                           ;../../pic16flcd.c: 65:     SetBit(config->port, config->d7_pin, (cmd >> 3) & 0x01);
  5174     03C3  087C               	movf	Lcd_Command@config,w
  5175     03C4  0084               	movwf	4
  5176     03C5  1383               	bcf	3,7	;select IRP bank0
  5177     03C6  0800               	movf	0,w
  5178     03C7  00F0               	movwf	SetBit@port
  5179     03C8  0A84               	incf	4,f
  5180     03C9  0800               	movf	0,w
  5181     03CA  0384               	decf	4,f
  5182     03CB  00F1               	movwf	SetBit@port+1
  5183     03CC  087C               	movf	Lcd_Command@config,w
  5184     03CD  3E07               	addlw	7
  5185     03CE  0084               	movwf	4
  5186     03CF  0800               	movf	0,w
  5187     03D0  00F2               	movwf	SetBit@pin
  5188     03D1  0879               	movf	Lcd_Command@cmd,w
  5189     03D2  00FB               	movwf	??_Lcd_Command+1
  5190     03D3  3003               	movlw	3
  5191     03D4                     u2085:
  5192     03D4  1003               	clrc
  5193     03D5  0CFB               	rrf	??_Lcd_Command+1,f
  5194     03D6  3EFF               	addlw	-1
  5195     03D7  1D03               	skipz
  5196     03D8  2BD4               	goto	u2085
  5197     03D9  1C7B               	btfss	??_Lcd_Command+1,0
  5198     03DA  2BDD               	goto	u2090
  5199     03DB  3001               	movlw	1
  5200     03DC  2BDE               	goto	u2100
  5201     03DD                     u2090:
  5202     03DD  3000               	movlw	0
  5203     03DE                     u2100:
  5204     03DE  00F3               	movwf	SetBit@value
  5205     03DF  120A  158A  25DB  120A  118A  	fcall	_SetBit
  5206                           
  5207                           ;../../pic16flcd.c: 67:     PulseEnable(config);
  5208     03E4  087C               	movf	Lcd_Command@config,w
  5209     03E5  120A  158A  2605   	fcall	_PulseEnable
  5210     03E8  0008               	return
  5211     03E9                     __end_of_Lcd_Command:
  5212                           
  5213                           	psect	text28
  5214     0E05                     __ptext28:	
  5215 ;; *************** function _PulseEnable *****************
  5216 ;; Defined at:
  5217 ;;		line 37 in file "../../pic16flcd.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  config          1    wreg     PTR struct .
  5220 ;;		 -> main@lcd(8), 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  config          1    8[COMMON] PTR struct .
  5223 ;;		 -> main@lcd(8), 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5233 ;;      Params:         0       0       0       0       0
  5234 ;;      Locals:         1       0       0       0       0
  5235 ;;      Temps:          2       0       0       0       0
  5236 ;;      Totals:         3       0       0       0       0
  5237 ;;Total ram usage:        3 bytes
  5238 ;; Hardware stack levels used: 1
  5239 ;; Hardware stack levels required when called: 1
  5240 ;; This function calls:
  5241 ;;		_SetBit
  5242 ;; This function is called by:
  5243 ;;		_Lcd_Command
  5244 ;;		_Lcd_WriteChar
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248     0E05                     _PulseEnable:	
  5249                           ;psect for function _PulseEnable
  5250                           
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _PulseEnable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5254                           ;PulseEnable@config stored from wreg
  5255     0E05  00F8               	movwf	PulseEnable@config
  5256                           
  5257                           ;../../pic16flcd.c: 38:     SetBit(config->port, config->en_pin, 1);
  5258     0E06  0878               	movf	PulseEnable@config,w
  5259     0E07  0084               	movwf	4
  5260     0E08  1383               	bcf	3,7	;select IRP bank0
  5261     0E09  0800               	movf	0,w
  5262     0E0A  00F0               	movwf	SetBit@port
  5263     0E0B  0A84               	incf	4,f
  5264     0E0C  0800               	movf	0,w
  5265     0E0D  0384               	decf	4,f
  5266     0E0E  00F1               	movwf	SetBit@port+1
  5267     0E0F  0878               	movf	PulseEnable@config,w
  5268     0E10  3E03               	addlw	3
  5269     0E11  0084               	movwf	4
  5270     0E12  0800               	movf	0,w
  5271     0E13  00F2               	movwf	SetBit@pin
  5272     0E14  01F3               	clrf	SetBit@value
  5273     0E15  0AF3               	incf	SetBit@value,f
  5274     0E16  120A  158A  25DB  120A  158A  	fcall	_SetBit
  5275                           
  5276                           ;../../pic16flcd.c: 39:     _delay((unsigned long)((2)*(4000000/4000.0)));
  5277     0E1B  3003               	movlw	3
  5278     0E1C  00F7               	movwf	??_PulseEnable+1
  5279     0E1D  3097               	movlw	151
  5280     0E1E  00F6               	movwf	??_PulseEnable
  5281     0E1F                     u3127:
  5282     0E1F  0BF6               	decfsz	??_PulseEnable,f
  5283     0E20  2E1F               	goto	u3127
  5284     0E21  0BF7               	decfsz	??_PulseEnable+1,f
  5285     0E22  2E1F               	goto	u3127
  5286     0E23  2E24               	nop2
  5287                           
  5288                           ;../../pic16flcd.c: 40:     SetBit(config->port, config->en_pin, 0);
  5289     0E24  0878               	movf	PulseEnable@config,w
  5290     0E25  0084               	movwf	4
  5291     0E26  1383               	bcf	3,7	;select IRP bank0
  5292     0E27  0800               	movf	0,w
  5293     0E28  00F0               	movwf	SetBit@port
  5294     0E29  0A84               	incf	4,f
  5295     0E2A  0800               	movf	0,w
  5296     0E2B  0384               	decf	4,f
  5297     0E2C  00F1               	movwf	SetBit@port+1
  5298     0E2D  0878               	movf	PulseEnable@config,w
  5299     0E2E  3E03               	addlw	3
  5300     0E2F  0084               	movwf	4
  5301     0E30  0800               	movf	0,w
  5302     0E31  00F2               	movwf	SetBit@pin
  5303     0E32  01F3               	clrf	SetBit@value
  5304     0E33  120A  158A  25DB   	fcall	_SetBit
  5305     0E36  0008               	return
  5306     0E37                     __end_of_PulseEnable:
  5307                           
  5308                           	psect	text29
  5309     0DDB                     __ptext29:	
  5310 ;; *************** function _SetBit *****************
  5311 ;; Defined at:
  5312 ;;		line 23 in file "../../pic16flcd.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  port            2    0[COMMON] PTR volatile unsigned ch
  5315 ;;		 -> PORTD(1), 
  5316 ;;  pin             1    2[COMMON] unsigned char 
  5317 ;;  value           1    3[COMMON] _Bool 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 800/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5329 ;;      Params:         4       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0
  5331 ;;      Temps:          2       0       0       0       0
  5332 ;;      Totals:         6       0       0       0       0
  5333 ;;Total ram usage:        6 bytes
  5334 ;; Hardware stack levels used: 1
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_PulseEnable
  5339 ;;		_Lcd_Command
  5340 ;;		_Lcd_WriteChar
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344     0DDB                     _SetBit:	
  5345                           ;psect for function _SetBit
  5346                           
  5347                           
  5348                           ;../../pic16flcd.c: 24:     if (value) {
  5349                           
  5350                           ;incstack = 0
  5351                           ; Regs used in _SetBit: [wreg-fsr0h+status,2+status,0]
  5352     0DDB  0873               	movf	SetBit@value,w
  5353     0DDC  1903               	btfsc	3,2
  5354     0DDD  2DF1               	goto	l1424
  5355                           
  5356                           ;../../pic16flcd.c: 25:         *port |= (1 << pin);
  5357     0DDE  3001               	movlw	1
  5358     0DDF  00F4               	movwf	??_SetBit
  5359     0DE0  0A72               	incf	SetBit@pin,w
  5360     0DE1  2DE4               	goto	u1604
  5361     0DE2                     u1605:
  5362     0DE2  1003               	clrc
  5363     0DE3  0DF4               	rlf	??_SetBit,f
  5364     0DE4                     u1604:
  5365     0DE4  3EFF               	addlw	-1
  5366     0DE5  1D03               	skipz
  5367     0DE6  2DE2               	goto	u1605
  5368     0DE7  0874               	movf	??_SetBit,w
  5369     0DE8  00F5               	movwf	??_SetBit+1
  5370     0DE9  0870               	movf	SetBit@port,w
  5371     0DEA  0084               	movwf	4
  5372     0DEB  1783               	bsf	3,7
  5373     0DEC  1C71               	btfss	SetBit@port+1,0
  5374     0DED  1383               	bcf	3,7
  5375     0DEE  0875               	movf	??_SetBit+1,w
  5376     0DEF  0480               	iorwf	0,f
  5377                           
  5378                           ;../../pic16flcd.c: 26:     } else {
  5379     0DF0  0008               	return
  5380     0DF1                     l1424:
  5381                           
  5382                           ;../../pic16flcd.c: 27:         *port &= ~(1 << pin);
  5383     0DF1  3001               	movlw	1
  5384     0DF2  00F4               	movwf	??_SetBit
  5385     0DF3  0A72               	incf	SetBit@pin,w
  5386     0DF4  2DF7               	goto	u1614
  5387     0DF5                     u1615:
  5388     0DF5  1003               	clrc
  5389     0DF6  0DF4               	rlf	??_SetBit,f
  5390     0DF7                     u1614:
  5391     0DF7  3EFF               	addlw	-1
  5392     0DF8  1D03               	skipz
  5393     0DF9  2DF5               	goto	u1615
  5394     0DFA  0874               	movf	??_SetBit,w
  5395     0DFB  3AFF               	xorlw	255
  5396     0DFC  00F5               	movwf	??_SetBit+1
  5397     0DFD  0870               	movf	SetBit@port,w
  5398     0DFE  0084               	movwf	4
  5399     0DFF  1783               	bsf	3,7
  5400     0E00  1C71               	btfss	SetBit@port+1,0
  5401     0E01  1383               	bcf	3,7
  5402     0E02  0875               	movf	??_SetBit+1,w
  5403     0E03  0580               	andwf	0,f
  5404     0E04  0008               	return
  5405     0E05                     __end_of_SetBit:
  5406     007E                     btemp	set	126	;btemp
  5407     007E                     wtemp0	set	126
  5408                           
  5409                           	psect	config
  5410                           
  5411                           ;Config register CONFIG1 @ 0x2007
  5412                           ;	Oscillator Selection bits
  5413                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  5414                           ;	Watchdog Timer Enable bit
  5415                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  5416                           ;	Power-up Timer Enable bit
  5417                           ;	PWRTE = OFF, PWRT disabled
  5418                           ;	RE3/MCLR pin function select bit
  5419                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  5420                           ;	Code Protection bit
  5421                           ;	CP = OFF, Program memory code protection is disabled
  5422                           ;	Data Code Protection bit
  5423                           ;	CPD = OFF, Data memory code protection is disabled
  5424                           ;	Brown Out Reset Selection bits
  5425                           ;	BOREN = ON, BOR enabled
  5426                           ;	Internal External Switchover bit
  5427                           ;	IESO = 0x1, unprogrammed default
  5428                           ;	Fail-Safe Clock Monitor Enabled bit
  5429                           ;	FCMEN = 0x1, unprogrammed default
  5430                           ;	Low Voltage Programming Enable bit
  5431                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  5432                           ;	In-Circuit Debugger Mode bit
  5433                           ;	DEBUG = 0x1, unprogrammed default
  5434     2007                     	org	8199
  5435     2007  2FF4               	dw	12276

Data Sizes:
    Strings     29
    Constant    0
    Data        8
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80      0      40
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    F1787$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    lcd$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_Clear@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_Clear@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_Command@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_Command@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_Init@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_Init@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_SetCursor@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_SetCursor@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_WriteChar@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_WriteChar@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_WriteString@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_WriteString@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_WriteString@str	PTR unsigned char  size(2) Largest target is 19
		 -> main@rpm(BANK0[10]), STR_1(CODE[19]), STR_2(CODE[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    PulseEnable@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    PulseEnable@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S22$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    S791$buffer	PTR unsigned char  size(1) Largest target is 0

    S791$source	PTR const unsigned char  size(1) Largest target is 0

    SetBit@port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@rpm(BANK0[10]), 

    utoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Clear
    _main->_Lcd_WriteString
    _main->___xxtofl
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    ___fltol->___xxtofl
    ___flmul->___xxtofl
    _Lcd_WriteString->_Lcd_WriteChar
    _Lcd_WriteChar->_PulseEnable
    _Lcd_SetCursor->_Lcd_Command
    _Lcd_Init->_Lcd_Clear
    _Lcd_Clear->_Lcd_Command
    _Lcd_Command->_PulseEnable
    _PulseEnable->_SetBit

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    ___fltol->___flmul
    _Lcd_Init->_Lcd_Clear

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   66057
                                             47 BANK0     28    28      0
                          _Lcd_Clear
                           _Lcd_Init
                      _Lcd_SetCursor
                    _Lcd_WriteString
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _countPulses
                            _initADC
                            _initPWM
                            _initRPM
                            _readADC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    16      3    5381
                                             30 BANK0     17    14      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    5071
                                             26 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12    10      2    4758
                                             16 BANK0     10     8      2
                              _fputc
                 _read_prec_or_width
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 8     6      2    3004
                                              8 BANK0      8     6      2
                            ___lwdiv
                            ___lwmod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    2043
                                             11 COMMON     3     0      3
                                              4 BANK0      4     4      0
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1     997
                                              8 COMMON     3     2      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3     682
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     311
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   7     5      2     533
                                              6 COMMON     7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initRPM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _countPulses                                          6     4      2     115
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     461
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (1) ___fltol                                             10     6      4     305
                                             26 BANK0     10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) ___flmul                                             26    18      8    2544
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_WriteString                                      3     1      2   10871
                                             13 COMMON     1     1      0
                                              0 BANK0      2     0      2
                      _Lcd_WriteChar
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     3      1   10477
                                              9 COMMON     4     3      1
                        _PulseEnable
                             _SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_SetCursor                                        6     4      2   11900
                                              0 BANK0      6     4      2
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0   22803
                                              2 BANK0      3     3      0
                          _Lcd_Clear
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            3     3      0   11341
                                             13 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          4     3      1   11253
                                              9 COMMON     4     3      1
                        _PulseEnable
                             _SetBit
 ---------------------------------------------------------------------------------
 (3) _PulseEnable                                          3     3      0    4890
                                              6 COMMON     3     3      0
                             _SetBit
 ---------------------------------------------------------------------------------
 (3) _SetBit                                               6     2      4    4670
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Command
       _PulseEnable
         _SetBit
       _SetBit
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Command
   _Lcd_SetCursor
     _Lcd_Command
   _Lcd_WriteString
     _Lcd_WriteChar
       _PulseEnable
       _SetBit
   ___flmul
     __Umul8_16
     ___xxtofl (ARG)
   ___fltol
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _countPulses
   _initADC
   _initPWM
   _initRPM
   _readADC
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _read_prec_or_width
           ___wmul
         _utoa
           ___lwdiv
           ___lwmod
           _pad
             _fputc
             _fputs
               _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      28       7       50.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4B      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      86      12        0.0%
ABS                  0      0      86       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Jan  3 21:49:25 2024

                         pc 0002              Lcd_Init@config 0024                          fsr 0004  
       ___wmul@multiplicand 0072         __Umul8_16@word_mpld 0076                         l108 0D88  
                       l116 0C8C                         l218 0D10                         l419 0FE2  
                       l702 003A                         l634 0D5C                         l627 07D6  
                       l672 01B4                         l673 01BE                         l665 019E  
                       l659 0160                         l699 0016                         _PR2 0092  
                       _pad 0007                         fsr0 0004            ?_Lcd_WriteString 0020  
                       indf 0000                ___flmul@aexp 002E                ___flmul@bexp 0033  
       __end_of_Lcd_Command 03E9                ___flmul@sign 002D                ___flmul@temp 0038  
              ___flmul@prod 0034                ___fltol@exp1 0043                        l1404 0EAF  
                      l1500 0018                        l2036 011D                        l2038 0D36  
                      l1424 0DF1                        l1408 0ED8                        l1450 0E71  
                      l1418 0D93                        l1428 0D08                        l1452 0E7F  
                      l1532 0F8D                        l1710 0D75                        l1542 0F13  
                      l1462 0EA0                        l1526 0F88                        l1622 0CEE  
                      l1608 0D54                        l1712 0D8B                        l1480 0E59  
                      l1528 0F50                        l1624 0D03                        l1634 0DB6  
                      l1810 0544                        l1546 0F2E                        l1458 0E95  
                      l1474 0E3D                        l1570 00E5                        l1660 0D2B  
                      l1900 07AA                        l1812 0546                        l1548 0F3D  
                      l1476 0E4B                        l1484 0E64                        l1492 0012  
                      l1822 055C                        l1814 054E                        l1582 010F  
                      l1664 0D2E                        l1744 0FA0                        l1576 0106  
                      l1584 0122                        l1666 0D3E                        l1658 0D29  
                      l1906 07C3                        l1930 016F                        l1764 0FCE  
                      l1748 0FA9                        l1924 0158                        l1588 012C  
                      l1774 0FF1                        l1766 0FDE                        l1934 0171  
                      l1792 0521                        l1944 01B2                        l1936 0183  
                      l1882 0760                        l1874 072C                        l1794 0523  
                      l1946 01A3                        l1876 0749                        l1796 052B  
                      l1980 0244                        l1886 0762                        l1958 01DB  
                      ?_pad 007B                        l1896 0794                        STR_1 0810  
                      STR_2 0823                        STR_3 0829                        u2000 037A  
                      u2010 037B                        u2100 03DE                        u2030 039B  
                      u2040 039C                        u2025 0392                        u2210 0446  
                      u2060 03BC                        u2300 04BD                        u2220 0447  
                      u2205 043D                        u2070 03BD                        u2150 0404  
                      u2055 03B3                        u2320 04DD                        u2240 0467  
                      u2160 0405                        u2145 03FB                        u2090 03DD  
                      u2330 04DE                        u2250 0468                        u3107 0074  
                      u2315 04D4                        u2235 045E                        u3035 01C6  
                      u1604 0DE4                        u2260 049B                        u2180 0425  
                      u3060 01FB                        u1605 0DE2                        u2085 03D4  
                      u3117 0CCD                        u1614 0DF7                        u2350 04FE  
                      u2270 049C                        u2190 0426                        u1615 0DF5  
                      u3127 0E1F                        u2175 041C                        u2360 04FF  
                      u2345 04F5                        u2505 0FCF                        u1705 0E8C  
                      u2290 04BC                        u1635 0D11                        u1715 0E96  
                      u1900 02E5                        u2285 04B3                        u1645 0D18  
                      u3077 02C4                        u3087 004D                        u2535 0FE7  
                      u1575 0ED6                        u1815 0022                        u1920 0305  
                      u3097 0061                        u2385 0D5D                        u1745 0E40  
                      u1930 0306                        u1915 02FC                        u2715 0655  
                      u2475 0FB2                        u1675 0E74                        u1765 0E51  
                      u1950 0326                        u2815 073B                        u1695 0E80  
                      u1775 0E5A                        u1960 0327                        u1945 031D  
                      u2905 07B5                        u1890 02E4                        u2755 06E1  
                      u1980 0347                        u1885 02DB                        u2685 0600  
                      u1990 0348                        u1975 033E                        u2785 0718  
                      u2795 0730                        u2955 017A                        u2885 077F  
                      u2895 079D                        u2975 0196                        u2995 01AB  
                      _TMR0 0001          Lcd_WriteString@str 0020                ?_countPulses 0070  
                      _dbuf 00A0                        _main 01E4                        _prec 006D  
                      pad@i 0025                        pad@p 007C                        btemp 007E  
                      _utoa 0F42                        start 0000                       ??_pad 0024  
             ___fltol@sign1 0042                       ?_main 0070             __end_of___flmul 07E3  
           __end_of___fltol 1000                       _ANSEL 0188                       ?_utoa 0028  
                     _T2CON 0012             __end_of___lwdiv 0EA5             __end_of___lwmod 0E69  
              vfpfcnvrt@fmt 0030                       _PORTD 0008                       _TRISC 0087  
                     _TRISD 0088             __end_of_initADC 0CAD             __end_of_readADC 0C94  
           __end_of_initRPM 0C89             __end_of_initPWM 0CA0                       _flags 006F  
       read_prec_or_width@c 0079         read_prec_or_width@n 007A                       _fputc 0EA5  
                     _fputs 0D90                       pad@fp 0027                  SetBit@port 0070  
                     _width 006B                       _putch 0006                       pclath 000A  
             main@adcResult 005D                       utoa@d 0028                       utoa@i 002E  
                     utoa@p 002D                       utoa@w 002A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 0CEB            __end_of_Lcd_Init 00B0  
         PulseEnable@config 0078             __initialization 07E3                __end_of_main 02C9  
              __end_of_utoa 0F99                 _Lcd_Command 02C9                      ??_main 004F  
                    ??_utoa 007E  __end_of_read_prec_or_width 0F42                      _ADCON0 001F  
                    _ADCON1 009F       __end_of_Lcd_SetCursor 0D4A                      ?_fputc 0070  
                    ?_fputs 0078                      _ADRESH 001E                      _ADRESL 009E  
                    _CCPR1L 0015                      ?_putch 0070                      _ANSELH 0189  
          __end_of___xxtofl 01E4                      _SetBit 0DDB        Lcd_SetCursor@address 0024  
              vfprintf@cfmt 003D                      ___wmul 0D06                   ??___flmul 0028  
                 ??___fltol 003E                   ??___lwdiv 0074                   ??___lwmod 0074  
      read_prec_or_width@ap 0076                 SetBit@value 0073                      pad@buf 007B  
     __end_of_Lcd_WriteChar 050A                   ??_initADC 0070                   ??_readADC 0072  
                 ??_initRPM 0070                   ??_initPWM 0070                      fputc@c 0070  
                    fputs@c 0020                      fputs@i 0021                      fputs@s 0023  
                    putch@c 0070            __end_of_vfprintf 0D06                      utoa@fp 002C  
                 ??_sprintf 0041                ___xxtofl@arg 007A                ___xxtofl@exp 0079  
              ___xxtofl@val 0070     __end_of__initialization 07FC               ??_PulseEnable 0076  
         __end_of_Lcd_Clear 0CD2                  ___fltol@f1 003A              __pcstackCOMMON 0070  
              __pidataBANK1 0C76               __end_of_fputc 0EF0               __end_of_fputs 0DB5  
             __end_of_putch 0007              _OPTION_REGbits 0081                   ?_Lcd_Init 0070  
                   ??_fputc 0073                     ??_fputs 0079                     ??_putch 0070  
                __pbssBANK0 006B                  __pbssBANK1 00A0           __end_of__Umul8_16 0D6D  
                   ?_SetBit 0070                  __pmaintext 01E4                     ?___wmul 0070  
       __end_of_PulseEnable 0E37        countPulses@lastState 0074                     _CCP1CON 0017  
                 ?___xxtofl 0070                  ??_Lcd_Init 0022       Lcd_WriteString@config 007D  
                __stringtab 0800           Lcd_WriteChar@data 0079                     ___flmul 050A  
                   ___fltol 0F99                     ___lwdiv 0E69                     ___lwmod 0E37  
                 ?_vfprintf 003A                ?_Lcd_Command 0079                     __ptext1 0CD2  
                   __ptext2 0CEB                     __ptext3 00B0                     __ptext4 0F42  
                   __ptext5 0007                     __ptext6 0D90                     __ptext7 0EA5  
                   __ptext8 0006                     __ptext9 0E37                     _initADC 0CA0  
                   _readADC 0C89                     _initRPM 0C7E                     _initPWM 0C94  
     read_prec_or_width@fmt 007C                  ??___xxtofl 0074                     main@lcd 0063  
                   _sprintf 0CD2                     clrloop0 0C6F                     main@rpm 0053  
      end_of_initialization 07FC                     fputc@fp 0072            Lcd_SetCursor@row 0020  
                   fputs@fp 0078          _read_prec_or_width 0EF0                 _PulseEnable 0E05  
         __end_of_vfpfcnvrt 0143         ?_read_prec_or_width 0076            vfpfcnvrt@convarg 0034  
                ??_vfprintf 007E                   _PORTBbits 0006               ___xxtofl@sign 0078  
                 _TRISBbits 0086        ??_read_prec_or_width 0078                  main@fanRPM 0061  
               ___flmul@grs 002F                  main@pulses 005F           ??_Lcd_WriteString 007D  
                 _Lcd_Clear 0CBE              __end_of_SetBit 0E05                 vfpfcnvrt@ap 0031  
               vfpfcnvrt@cp 0039                 vfpfcnvrt@fp 0038              __end_of___wmul 0D27  
                 SetBit@pin 0072         start_initialization 07E3                 __end_of_pad 0045  
             ??_countPulses 0072                    ??_SetBit 0074                 vfprintf@fmt 003A  
                ?_Lcd_Clear 0070         Lcd_SetCursor@config 0025         Lcd_SetCursor@column 0021  
                  ??___wmul 0074                  init_fetch0 0CAD                   __Umul8_16 0D4A  
               __pdataBANK1 00C0           Lcd_Command@config 007C                   ___flmul@a 0024  
                 ___flmul@b 0020         Lcd_WriteChar@config 007C                   ___latbits 0002  
             __pcstackBANK0 0020               _Lcd_SetCursor 0D27            ___lwdiv@dividend 0072  
       __end_of_countPulses 0D90                    ?___flmul 0020                    ?___fltol 003A  
                ?__Umul8_16 0070                    ?___lwdiv 0070                    ?___lwmod 0070  
                 __pstrings 0800                    ?_initADC 0070                    ?_readADC 0070  
             _Lcd_WriteChar 03E9                    ?_initRPM 0070                    ?_initPWM 0070  
          ___lwdiv@quotient 0075              ?_Lcd_SetCursor 0020                    ?_sprintf 003E  
            ___wmul@product 0074                   clear_ram0 0C6E                ?_PulseEnable 0070  
               ??_Lcd_Clear 0020             Lcd_Clear@config 007D                   main@F1787 00C0  
                 _vfpfcnvrt 00B0                  _ADCON0bits 001F                 __stringbase 080F  
            ?_Lcd_WriteChar 0079           ___wmul@multiplier 0070                    _Lcd_Init 0045  
           _Lcd_WriteString 0DB5                 _countPulses 0D6D       countPulses@pulseCount 0072  
   countPulses@currentState 0075                  vfprintf@ap 003B                  vfprintf@fp 003C  
               ??__Umul8_16 0072                  ?_vfpfcnvrt 0030          __end_of__stringtab 0810  
                sprintf@fmt 003E                    ___xxtofl 0143             ??_Lcd_SetCursor 0022  
           ___lwdiv@divisor 0070             ___lwdiv@counter 0077                    __ptext10 0E69  
                  __ptext11 0EF0                    __ptext20 050A                    __ptext12 0D06  
                  __ptext21 0D4A                    __ptext13 0C89                    __ptext22 0DB5  
                  __ptext14 0C7E                    __ptext23 03E9                    __ptext15 0C94  
                  __ptext24 0D27                    __ptext16 0CA0                    __ptext25 0045  
                  __ptext17 0D6D                    __ptext26 0CBE                    __ptext18 0143  
                  __ptext27 02C9                    __ptext19 0F99                    __ptext28 0E05  
                  __ptext29 0DDB                    _vfprintf 0CEB             ??_Lcd_WriteChar 007A  
   __end_of_Lcd_WriteString 0DDB                  _INTCONbits 000B                    init_ram0 0CB1  
                 sprintf@ap 0042            ___lwmod@dividend 0072                   stringcode 080A  
               ??_vfpfcnvrt 0032               ??_Lcd_Command 007A              Lcd_Command@cmd 0079  
    __Umul8_16@multiplicand 0070                    sprintf@f 0044                    sprintf@s 0043  
           ___lwmod@divisor 0070             ___lwmod@counter 0075                    stringdir 080A  
                  stringtab 0800        __Umul8_16@multiplier 0078           __Umul8_16@product 0074  
