

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Jan  4 13:30:43 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    48                           	dabs	1,0x7E,2
    49     0000                     
    50                           ; Generated 12/10/2023 GMT
    51                           ; 
    52                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution. Publication is not required when
    66                           ;        this file is used in an embedded application.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84     0000                     	;# 
    85     0001                     	;# 
    86     0002                     	;# 
    87     0003                     	;# 
    88     0004                     	;# 
    89     0005                     	;# 
    90     0006                     	;# 
    91     0007                     	;# 
    92     0008                     	;# 
    93     0009                     	;# 
    94     000A                     	;# 
    95     000B                     	;# 
    96     000C                     	;# 
    97     000D                     	;# 
    98     000E                     	;# 
    99     000E                     	;# 
   100     000F                     	;# 
   101     0010                     	;# 
   102     0011                     	;# 
   103     0012                     	;# 
   104     0013                     	;# 
   105     0014                     	;# 
   106     0015                     	;# 
   107     0015                     	;# 
   108     0016                     	;# 
   109     0017                     	;# 
   110     0018                     	;# 
   111     0019                     	;# 
   112     001A                     	;# 
   113     001B                     	;# 
   114     001B                     	;# 
   115     001C                     	;# 
   116     001D                     	;# 
   117     001E                     	;# 
   118     001F                     	;# 
   119     0081                     	;# 
   120     0085                     	;# 
   121     0086                     	;# 
   122     0087                     	;# 
   123     0088                     	;# 
   124     0089                     	;# 
   125     008C                     	;# 
   126     008D                     	;# 
   127     008E                     	;# 
   128     008F                     	;# 
   129     0090                     	;# 
   130     0091                     	;# 
   131     0092                     	;# 
   132     0093                     	;# 
   133     0093                     	;# 
   134     0093                     	;# 
   135     0094                     	;# 
   136     0095                     	;# 
   137     0096                     	;# 
   138     0097                     	;# 
   139     0098                     	;# 
   140     0099                     	;# 
   141     009A                     	;# 
   142     009B                     	;# 
   143     009C                     	;# 
   144     009D                     	;# 
   145     009E                     	;# 
   146     009F                     	;# 
   147     0105                     	;# 
   148     0107                     	;# 
   149     0108                     	;# 
   150     0109                     	;# 
   151     010C                     	;# 
   152     010C                     	;# 
   153     010D                     	;# 
   154     010E                     	;# 
   155     010F                     	;# 
   156     0185                     	;# 
   157     0187                     	;# 
   158     0188                     	;# 
   159     0189                     	;# 
   160     018C                     	;# 
   161     018D                     	;# 
   162     0000                     	;# 
   163     0001                     	;# 
   164     0002                     	;# 
   165     0003                     	;# 
   166     0004                     	;# 
   167     0005                     	;# 
   168     0006                     	;# 
   169     0007                     	;# 
   170     0008                     	;# 
   171     0009                     	;# 
   172     000A                     	;# 
   173     000B                     	;# 
   174     000C                     	;# 
   175     000D                     	;# 
   176     000E                     	;# 
   177     000E                     	;# 
   178     000F                     	;# 
   179     0010                     	;# 
   180     0011                     	;# 
   181     0012                     	;# 
   182     0013                     	;# 
   183     0014                     	;# 
   184     0015                     	;# 
   185     0015                     	;# 
   186     0016                     	;# 
   187     0017                     	;# 
   188     0018                     	;# 
   189     0019                     	;# 
   190     001A                     	;# 
   191     001B                     	;# 
   192     001B                     	;# 
   193     001C                     	;# 
   194     001D                     	;# 
   195     001E                     	;# 
   196     001F                     	;# 
   197     0081                     	;# 
   198     0085                     	;# 
   199     0086                     	;# 
   200     0087                     	;# 
   201     0088                     	;# 
   202     0089                     	;# 
   203     008C                     	;# 
   204     008D                     	;# 
   205     008E                     	;# 
   206     008F                     	;# 
   207     0090                     	;# 
   208     0091                     	;# 
   209     0092                     	;# 
   210     0093                     	;# 
   211     0093                     	;# 
   212     0093                     	;# 
   213     0094                     	;# 
   214     0095                     	;# 
   215     0096                     	;# 
   216     0097                     	;# 
   217     0098                     	;# 
   218     0099                     	;# 
   219     009A                     	;# 
   220     009B                     	;# 
   221     009C                     	;# 
   222     009D                     	;# 
   223     009E                     	;# 
   224     009F                     	;# 
   225     0105                     	;# 
   226     0107                     	;# 
   227     0108                     	;# 
   228     0109                     	;# 
   229     010C                     	;# 
   230     010C                     	;# 
   231     010D                     	;# 
   232     010E                     	;# 
   233     010F                     	;# 
   234     0185                     	;# 
   235     0187                     	;# 
   236     0188                     	;# 
   237     0189                     	;# 
   238     018C                     	;# 
   239     018D                     	;# 
   240     0000                     	;# 
   241     0001                     	;# 
   242     0002                     	;# 
   243     0003                     	;# 
   244     0004                     	;# 
   245     0005                     	;# 
   246     0006                     	;# 
   247     0007                     	;# 
   248     0008                     	;# 
   249     0009                     	;# 
   250     000A                     	;# 
   251     000B                     	;# 
   252     000C                     	;# 
   253     000D                     	;# 
   254     000E                     	;# 
   255     000E                     	;# 
   256     000F                     	;# 
   257     0010                     	;# 
   258     0011                     	;# 
   259     0012                     	;# 
   260     0013                     	;# 
   261     0014                     	;# 
   262     0015                     	;# 
   263     0015                     	;# 
   264     0016                     	;# 
   265     0017                     	;# 
   266     0018                     	;# 
   267     0019                     	;# 
   268     001A                     	;# 
   269     001B                     	;# 
   270     001B                     	;# 
   271     001C                     	;# 
   272     001D                     	;# 
   273     001E                     	;# 
   274     001F                     	;# 
   275     0081                     	;# 
   276     0085                     	;# 
   277     0086                     	;# 
   278     0087                     	;# 
   279     0088                     	;# 
   280     0089                     	;# 
   281     008C                     	;# 
   282     008D                     	;# 
   283     008E                     	;# 
   284     008F                     	;# 
   285     0090                     	;# 
   286     0091                     	;# 
   287     0092                     	;# 
   288     0093                     	;# 
   289     0093                     	;# 
   290     0093                     	;# 
   291     0094                     	;# 
   292     0095                     	;# 
   293     0096                     	;# 
   294     0097                     	;# 
   295     0098                     	;# 
   296     0099                     	;# 
   297     009A                     	;# 
   298     009B                     	;# 
   299     009C                     	;# 
   300     009D                     	;# 
   301     009E                     	;# 
   302     009F                     	;# 
   303     0105                     	;# 
   304     0107                     	;# 
   305     0108                     	;# 
   306     0109                     	;# 
   307     010C                     	;# 
   308     010C                     	;# 
   309     010D                     	;# 
   310     010E                     	;# 
   311     010F                     	;# 
   312     0185                     	;# 
   313     0187                     	;# 
   314     0188                     	;# 
   315     0189                     	;# 
   316     018C                     	;# 
   317     018D                     	;# 
   318                           
   319                           	psect	idataBANK1
   320     0AE2                     __pidataBANK1:
   321                           
   322                           ;initializer for main@F1791
   323     0AE2  3408               	retlw	8
   324     0AE3  3400               	retlw	0
   325     0AE4  3402               	retlw	2
   326     0AE5  3403               	retlw	3
   327     0AE6  3404               	retlw	4
   328     0AE7  3405               	retlw	5
   329     0AE8  3406               	retlw	6
   330     0AE9  3407               	retlw	7
   331     001E                     _ADRESH	set	30
   332     001F                     _ADCON0bits	set	31
   333     001F                     _ADCON0	set	31
   334     000B                     _INTCONbits	set	11
   335     0006                     _PORTBbits	set	6
   336     0001                     _TMR0	set	1
   337     0015                     _CCPR1L	set	21
   338     0017                     _CCP1CON	set	23
   339     0012                     _T2CON	set	18
   340     0008                     _PORTD	set	8
   341     0088                     _TRISD	set	136
   342     009E                     _ADRESL	set	158
   343     009F                     _ADCON1	set	159
   344     0087                     _TRISC	set	135
   345     0081                     _OPTION_REGbits	set	129
   346     0086                     _TRISBbits	set	134
   347     0092                     _PR2	set	146
   348     0188                     _ANSEL	set	392
   349     0189                     _ANSELH	set	393
   350                           
   351                           	psect	strings
   352     0800                     __pstrings:
   353     0800                     stringtab:
   354     0800                     __stringtab:
   355                           
   356                           ;	String table - string pointers are 1 byte each
   357     0800  1BFF               	btfsc	btemp+1,7
   358     0801  280A               	ljmp	stringcode
   359     0802  1383               	bcf	3,7
   360     0803  187F               	btfsc	btemp+1,0
   361     0804  1783               	bsf	3,7
   362     0805  0800               	movf	0,w
   363     0806  0A84               	incf	4,f
   364     0807  1903               	skipnz
   365     0808  0AFF               	incf	btemp+1,f
   366     0809  0008               	return
   367     080A                     stringcode:
   368     080A                     stringdir:
   369     080A  3008               	movlw	high stringdir
   370     080B  008A               	movwf	10
   371     080C  0804               	movf	4,w
   372     080D  0A84               	incf	4,f
   373     080E  0782               	addwf	2,f
   374     080F                     __stringbase:
   375     080F  3400               	retlw	0
   376     0810                     __end_of__stringtab:
   377     0810                     STR_1:
   378     0810  3443               	retlw	67	;'C'
   379     0811  344F               	retlw	79	;'O'
   380     0812  344F               	retlw	79	;'O'
   381     0813  344C               	retlw	76	;'L'
   382     0814  3445               	retlw	69	;'E'
   383     0815  3452               	retlw	82	;'R'
   384     0816  3420               	retlw	32	;' '
   385     0817  3452               	retlw	82	;'R'
   386     0818  3450               	retlw	80	;'P'
   387     0819  344D               	retlw	77	;'M'
   388     081A  3420               	retlw	32	;' '
   389     081B  3443               	retlw	67	;'C'
   390     081C  346F               	retlw	111	;'o'
   391     081D  3475               	retlw	117	;'u'
   392     081E  346E               	retlw	110	;'n'
   393     081F  3474               	retlw	116	;'t'
   394     0820  3465               	retlw	101	;'e'
   395     0821  3472               	retlw	114	;'r'
   396     0822  3400               	retlw	0
   397     0823                     STR_2:
   398     0823  3452               	retlw	82	;'R'
   399     0824  3450               	retlw	80	;'P'
   400     0825  344D               	retlw	77	;'M'
   401     0826  343A               	retlw	58	;':'
   402     0827  3420               	retlw	32	;' '
   403     0828  3400               	retlw	0
   404     0829                     STR_3:
   405     0829  3425               	retlw	37	;'%'
   406     082A  3434               	retlw	52	;'4'
   407     082B  3475               	retlw	117	;'u'
   408     082C  3400               	retlw	0
   409                           
   410                           	psect	cinit
   411     07E7                     start_initialization:	
   412                           ; #config settings
   413                           
   414     07E7                     __initialization:
   415                           
   416                           ; Initialize objects allocated to BANK1
   417     07E7  1383               	bcf	3,7	;select IRP bank0
   418     07E8  30CC               	movlw	low (__pdataBANK1+8)
   419     07E9  00FD               	movwf	btemp+-1
   420     07EA  300A               	movlw	high __pidataBANK1
   421     07EB  00FE               	movwf	btemp
   422     07EC  30E2               	movlw	low __pidataBANK1
   423     07ED  00FF               	movwf	btemp+1
   424     07EE  30C4               	movlw	low __pdataBANK1
   425     07EF  0084               	movwf	4
   426     07F0  120A  158A  231D  120A  118A  	fcall	init_ram0
   427                           
   428                           ; Clear objects allocated to BANK1
   429     07F5  30A0               	movlw	low __pbssBANK1
   430     07F6  0084               	movwf	4
   431     07F7  30C4               	movlw	low (__pbssBANK1+36)
   432     07F8  120A  158A  22DA   	fcall	clear_ram0
   433                           
   434                           ; Clear objects allocated to BANK0
   435     07FB  01EE               	clrf	__pbssBANK0& (0+127)
   436     07FC                     end_of_initialization:	
   437                           ;End of C runtime variable initialization code
   438                           
   439     07FC                     __end_of__initialization:
   440     07FC  0183               	clrf	3
   441     07FD  120A  118A  29C7   	ljmp	_main	;jump to C main() function
   442                           
   443                           	psect	bssBANK0
   444     006E                     __pbssBANK0:
   445     006E                     _flags:
   446     006E                     	ds	1
   447                           
   448                           	psect	bssBANK1
   449     00A0                     __pbssBANK1:
   450     00A0                     _width:
   451     00A0                     	ds	2
   452     00A2                     _prec:
   453     00A2                     	ds	2
   454     00A4                     _dbuf:
   455     00A4                     	ds	32
   456                           
   457                           	psect	dataBANK1
   458     00C4                     __pdataBANK1:
   459     00C4                     main@F1791:
   460     00C4                     	ds	8
   461                           
   462                           	psect	inittext
   463     0B19                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466     0B19  087E               	movf	126,w
   467     0B1A  008A               	movwf	10
   468     0B1B  087F               	movf	127,w
   469     0B1C  0082               	movwf	2
   470     0B1D                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477     0B1D  2319  120A  158A   	fcall	init_fetch0
   478     0B20  0080               	movwf	0
   479     0B21  0A84               	incf	4,f
   480     0B22  0804               	movf	4,w
   481     0B23  067D               	xorwf	125,w
   482     0B24  1903               	btfsc	3,2
   483     0B25  3400               	retlw	0
   484     0B26  0AFF               	incf	127,f
   485     0B27  1903               	btfsc	3,2
   486     0B28  0AFE               	incf	126,f
   487     0B29  2B1D               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490     0ADA                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494     0ADA  0064               	clrwdt	;clear the watchdog before getting into this loop
   495     0ADB                     clrloop0:
   496     0ADB  0180               	clrf	0	;clear RAM location pointed to by FSR
   497     0ADC  0A84               	incf	4,f	;increment pointer
   498     0ADD  0604               	xorwf	4,w	;XOR with final address
   499     0ADE  1903               	btfsc	3,2	;have we reached the end yet?
   500     0ADF  3400               	retlw	0	;all done for this memory range, return
   501     0AE0  0604               	xorwf	4,w	;XOR again to restore value
   502     0AE1  2ADB               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackCOMMON
   505     0070                     __pcstackCOMMON:
   506     0070                     ?_Lcd_Clear:
   507     0070                     ?_putch:	
   508                           ; 1 bytes @ 0x0
   509                           
   510     0070                     ??_putch:	
   511                           ; 1 bytes @ 0x0
   512                           
   513     0070                     ?_SetBit:	
   514                           ; 1 bytes @ 0x0
   515                           
   516     0070                     ?_PulseEnable:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     ?_Lcd_Init:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0070                     ?_initPWM:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     ??_initPWM:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ?_initRPM:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0070                     ??_initRPM:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0070                     ?_initADC:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0070                     ??_initADC:	
   538                           ; 1 bytes @ 0x0
   539                           
   540     0070                     ?_main:	
   541                           ; 1 bytes @ 0x0
   542                           
   543     0070                     ?__Umul8_16:	
   544                           ; 1 bytes @ 0x0
   545                           
   546     0070                     ?_fputc:	
   547                           ; 2 bytes @ 0x0
   548                           
   549     0070                     ?_countPulses:	
   550                           ; 2 bytes @ 0x0
   551                           
   552     0070                     ?_readADC:	
   553                           ; 2 bytes @ 0x0
   554                           
   555     0070                     ?___wmul:	
   556                           ; 2 bytes @ 0x0
   557                           
   558     0070                     ?___lwdiv:	
   559                           ; 2 bytes @ 0x0
   560                           
   561     0070                     ?___lwmod:	
   562                           ; 2 bytes @ 0x0
   563                           
   564     0070                     ?___lmul:	
   565                           ; 2 bytes @ 0x0
   566                           
   567     0070                     ?___xxtofl:	
   568                           ; 4 bytes @ 0x0
   569                           
   570     0070                     __Umul8_16@multiplicand:	
   571                           ; 4 bytes @ 0x0
   572                           
   573     0070                     putch@c:	
   574                           ; 1 bytes @ 0x0
   575                           
   576     0070                     SetBit@port:	
   577                           ; 1 bytes @ 0x0
   578                           
   579     0070                     ___wmul@multiplier:	
   580                           ; 2 bytes @ 0x0
   581                           
   582     0070                     ___lwdiv@divisor:	
   583                           ; 2 bytes @ 0x0
   584                           
   585     0070                     ___lwmod@divisor:	
   586                           ; 2 bytes @ 0x0
   587                           
   588     0070                     fputc@c:	
   589                           ; 2 bytes @ 0x0
   590                           
   591     0070                     ___lmul@multiplier:	
   592                           ; 2 bytes @ 0x0
   593                           
   594     0070                     ___xxtofl@val:	
   595                           ; 4 bytes @ 0x0
   596                           
   597                           
   598                           ; 4 bytes @ 0x0
   599     0070                     	ds	2
   600     0072                     ??__Umul8_16:
   601     0072                     ??_countPulses:	
   602                           ; 1 bytes @ 0x2
   603                           
   604     0072                     ??_readADC:	
   605                           ; 1 bytes @ 0x2
   606                           
   607     0072                     SetBit@pin:	
   608                           ; 1 bytes @ 0x2
   609                           
   610     0072                     fputc@fp:	
   611                           ; 1 bytes @ 0x2
   612                           
   613     0072                     countPulses@pulseCount:	
   614                           ; 1 bytes @ 0x2
   615                           
   616     0072                     ___wmul@multiplicand:	
   617                           ; 2 bytes @ 0x2
   618                           
   619     0072                     ___lwdiv@dividend:	
   620                           ; 2 bytes @ 0x2
   621                           
   622     0072                     ___lwmod@dividend:	
   623                           ; 2 bytes @ 0x2
   624                           
   625                           
   626                           ; 2 bytes @ 0x2
   627     0072                     	ds	1
   628     0073                     ??_fputc:
   629     0073                     SetBit@value:	
   630                           ; 1 bytes @ 0x3
   631                           
   632                           
   633                           ; 1 bytes @ 0x3
   634     0073                     	ds	1
   635     0074                     ??_SetBit:
   636     0074                     ??___wmul:	
   637                           ; 1 bytes @ 0x4
   638                           
   639     0074                     ??___lwdiv:	
   640                           ; 1 bytes @ 0x4
   641                           
   642     0074                     ??___lwmod:	
   643                           ; 1 bytes @ 0x4
   644                           
   645     0074                     ??___xxtofl:	
   646                           ; 1 bytes @ 0x4
   647                           
   648     0074                     countPulses@lastState:	
   649                           ; 1 bytes @ 0x4
   650                           
   651     0074                     ___wmul@product:	
   652                           ; 1 bytes @ 0x4
   653                           
   654     0074                     __Umul8_16@product:	
   655                           ; 2 bytes @ 0x4
   656                           
   657     0074                     ___lmul@multiplicand:	
   658                           ; 2 bytes @ 0x4
   659                           
   660                           
   661                           ; 4 bytes @ 0x4
   662     0074                     	ds	1
   663     0075                     countPulses@currentState:
   664     0075                     ___lwmod@counter:	
   665                           ; 1 bytes @ 0x5
   666                           
   667     0075                     ___lwdiv@quotient:	
   668                           ; 1 bytes @ 0x5
   669                           
   670                           
   671                           ; 2 bytes @ 0x5
   672     0075                     	ds	1
   673     0076                     ??_PulseEnable:
   674     0076                     ?_read_prec_or_width:	
   675                           ; 1 bytes @ 0x6
   676                           
   677     0076                     read_prec_or_width@ap:	
   678                           ; 2 bytes @ 0x6
   679                           
   680     0076                     __Umul8_16@word_mpld:	
   681                           ; 1 bytes @ 0x6
   682                           
   683                           
   684                           ; 2 bytes @ 0x6
   685     0076                     	ds	1
   686     0077                     ___lwdiv@counter:
   687                           
   688                           ; 1 bytes @ 0x7
   689     0077                     	ds	1
   690     0078                     ??___lmul:
   691     0078                     ??_read_prec_or_width:	
   692                           ; 1 bytes @ 0x8
   693                           
   694     0078                     ?_fputs:	
   695                           ; 1 bytes @ 0x8
   696                           
   697     0078                     PulseEnable@config:	
   698                           ; 2 bytes @ 0x8
   699                           
   700     0078                     __Umul8_16@multiplier:	
   701                           ; 1 bytes @ 0x8
   702                           
   703     0078                     ___xxtofl@sign:	
   704                           ; 1 bytes @ 0x8
   705                           
   706     0078                     fputs@fp:	
   707                           ; 1 bytes @ 0x8
   708                           
   709                           
   710                           ; 1 bytes @ 0x8
   711     0078                     	ds	1
   712     0079                     ??_fputs:
   713     0079                     ?_Lcd_Command:	
   714                           ; 1 bytes @ 0x9
   715                           
   716     0079                     ?_Lcd_WriteChar:	
   717                           ; 1 bytes @ 0x9
   718                           
   719     0079                     Lcd_Command@cmd:	
   720                           ; 1 bytes @ 0x9
   721                           
   722     0079                     Lcd_WriteChar@data:	
   723                           ; 1 bytes @ 0x9
   724                           
   725     0079                     ___xxtofl@exp:	
   726                           ; 1 bytes @ 0x9
   727                           
   728     0079                     read_prec_or_width@c:	
   729                           ; 1 bytes @ 0x9
   730                           
   731     0079                     ___lmul@product:	
   732                           ; 1 bytes @ 0x9
   733                           
   734                           
   735                           ; 4 bytes @ 0x9
   736     0079                     	ds	1
   737     007A                     ??_Lcd_Command:
   738     007A                     ??_Lcd_WriteChar:	
   739                           ; 1 bytes @ 0xA
   740                           
   741     007A                     read_prec_or_width@n:	
   742                           ; 1 bytes @ 0xA
   743                           
   744     007A                     ___xxtofl@arg:	
   745                           ; 2 bytes @ 0xA
   746                           
   747                           
   748                           ; 4 bytes @ 0xA
   749     007A                     	ds	1
   750     007B                     ?_pad:
   751     007B                     pad@buf:	
   752                           ; 1 bytes @ 0xB
   753                           
   754                           
   755                           ; 1 bytes @ 0xB
   756     007B                     	ds	1
   757     007C                     Lcd_Command@config:
   758     007C                     Lcd_WriteChar@config:	
   759                           ; 1 bytes @ 0xC
   760                           
   761     007C                     read_prec_or_width@fmt:	
   762                           ; 1 bytes @ 0xC
   763                           
   764     007C                     pad@p:	
   765                           ; 1 bytes @ 0xC
   766                           
   767                           
   768                           ; 2 bytes @ 0xC
   769     007C                     	ds	1
   770     007D                     ??_Lcd_WriteString:
   771     007D                     ??___aldiv:	
   772                           ; 1 bytes @ 0xD
   773                           
   774     007D                     Lcd_WriteString@config:	
   775                           ; 1 bytes @ 0xD
   776                           
   777     007D                     Lcd_Clear@config:	
   778                           ; 1 bytes @ 0xD
   779                           
   780                           
   781                           ; 1 bytes @ 0xD
   782     007D                     	ds	1
   783     007E                     ??_vfprintf:
   784     007E                     ??_utoa:	
   785                           ; 1 bytes @ 0xE
   786                           
   787                           
   788                           	psect	cstackBANK0
   789     0020                     __pcstackBANK0:	
   790                           ; 1 bytes @ 0xE
   791                           
   792     0020                     ??_Lcd_Clear:
   793     0020                     ?_Lcd_WriteString:	
   794                           ; 1 bytes @ 0x0
   795                           
   796     0020                     ?_Lcd_SetCursor:	
   797                           ; 1 bytes @ 0x0
   798                           
   799     0020                     ?___aldiv:	
   800                           ; 1 bytes @ 0x0
   801                           
   802     0020                     ?___flmul:	
   803                           ; 4 bytes @ 0x0
   804                           
   805     0020                     Lcd_SetCursor@row:	
   806                           ; 4 bytes @ 0x0
   807                           
   808     0020                     fputs@c:	
   809                           ; 1 bytes @ 0x0
   810                           
   811     0020                     Lcd_WriteString@str:	
   812                           ; 1 bytes @ 0x0
   813                           
   814     0020                     ___aldiv@divisor:	
   815                           ; 2 bytes @ 0x0
   816                           
   817     0020                     ___flmul@b:	
   818                           ; 4 bytes @ 0x0
   819                           
   820                           
   821                           ; 4 bytes @ 0x0
   822     0020                     	ds	1
   823     0021                     Lcd_SetCursor@column:
   824     0021                     fputs@i:	
   825                           ; 1 bytes @ 0x1
   826                           
   827                           
   828                           ; 2 bytes @ 0x1
   829     0021                     	ds	1
   830     0022                     ??_Lcd_Init:
   831     0022                     ??_Lcd_SetCursor:	
   832                           ; 1 bytes @ 0x2
   833                           
   834                           
   835                           ; 1 bytes @ 0x2
   836     0022                     	ds	1
   837     0023                     fputs@s:
   838                           
   839                           ; 1 bytes @ 0x3
   840     0023                     	ds	1
   841     0024                     ??_pad:
   842     0024                     Lcd_Init@config:	
   843                           ; 1 bytes @ 0x4
   844                           
   845     0024                     Lcd_SetCursor@address:	
   846                           ; 1 bytes @ 0x4
   847                           
   848     0024                     ___aldiv@dividend:	
   849                           ; 1 bytes @ 0x4
   850                           
   851     0024                     ___flmul@a:	
   852                           ; 4 bytes @ 0x4
   853                           
   854                           
   855                           ; 4 bytes @ 0x4
   856     0024                     	ds	1
   857     0025                     Lcd_SetCursor@config:
   858     0025                     pad@i:	
   859                           ; 1 bytes @ 0x5
   860                           
   861                           
   862                           ; 2 bytes @ 0x5
   863     0025                     	ds	2
   864     0027                     pad@fp:
   865                           
   866                           ; 1 bytes @ 0x7
   867     0027                     	ds	1
   868     0028                     ??___flmul:
   869     0028                     ?_utoa:	
   870                           ; 1 bytes @ 0x8
   871                           
   872     0028                     ___aldiv@counter:	
   873                           ; 1 bytes @ 0x8
   874                           
   875     0028                     utoa@d:	
   876                           ; 1 bytes @ 0x8
   877                           
   878                           
   879                           ; 2 bytes @ 0x8
   880     0028                     	ds	1
   881     0029                     ___aldiv@sign:
   882                           
   883                           ; 1 bytes @ 0x9
   884     0029                     	ds	1
   885     002A                     utoa@w:
   886     002A                     ___aldiv@quotient:	
   887                           ; 2 bytes @ 0xA
   888                           
   889                           
   890                           ; 4 bytes @ 0xA
   891     002A                     	ds	2
   892     002C                     utoa@fp:
   893                           
   894                           ; 1 bytes @ 0xC
   895     002C                     	ds	1
   896     002D                     ___flmul@sign:
   897     002D                     utoa@p:	
   898                           ; 1 bytes @ 0xD
   899                           
   900                           
   901                           ; 1 bytes @ 0xD
   902     002D                     	ds	1
   903     002E                     ?_map:
   904     002E                     ___flmul@aexp:	
   905                           ; 4 bytes @ 0xE
   906                           
   907     002E                     utoa@i:	
   908                           ; 1 bytes @ 0xE
   909                           
   910     002E                     map@x:	
   911                           ; 2 bytes @ 0xE
   912                           
   913                           
   914                           ; 4 bytes @ 0xE
   915     002E                     	ds	1
   916     002F                     ___flmul@grs:
   917                           
   918                           ; 4 bytes @ 0xF
   919     002F                     	ds	1
   920     0030                     ?_vfpfcnvrt:
   921     0030                     vfpfcnvrt@fmt:	
   922                           ; 1 bytes @ 0x10
   923                           
   924                           
   925                           ; 1 bytes @ 0x10
   926     0030                     	ds	1
   927     0031                     vfpfcnvrt@ap:
   928                           
   929                           ; 1 bytes @ 0x11
   930     0031                     	ds	1
   931     0032                     ??_vfpfcnvrt:
   932     0032                     map@in_min:	
   933                           ; 1 bytes @ 0x12
   934                           
   935                           
   936                           ; 4 bytes @ 0x12
   937     0032                     	ds	1
   938     0033                     ___flmul@bexp:
   939                           
   940                           ; 1 bytes @ 0x13
   941     0033                     	ds	1
   942     0034                     ___flmul@prod:
   943     0034                     vfpfcnvrt@convarg:	
   944                           ; 4 bytes @ 0x14
   945                           
   946                           
   947                           ; 4 bytes @ 0x14
   948     0034                     	ds	2
   949     0036                     map@in_max:
   950                           
   951                           ; 4 bytes @ 0x16
   952     0036                     	ds	2
   953     0038                     vfpfcnvrt@fp:
   954     0038                     ___flmul@temp:	
   955                           ; 1 bytes @ 0x18
   956                           
   957                           
   958                           ; 2 bytes @ 0x18
   959     0038                     	ds	1
   960     0039                     vfpfcnvrt@cp:
   961                           
   962                           ; 1 bytes @ 0x19
   963     0039                     	ds	1
   964     003A                     ?_vfprintf:
   965     003A                     ?___fltol:	
   966                           ; 2 bytes @ 0x1A
   967                           
   968     003A                     vfprintf@fmt:	
   969                           ; 4 bytes @ 0x1A
   970                           
   971     003A                     map@out_min:	
   972                           ; 1 bytes @ 0x1A
   973                           
   974     003A                     ___fltol@f1:	
   975                           ; 4 bytes @ 0x1A
   976                           
   977                           
   978                           ; 4 bytes @ 0x1A
   979     003A                     	ds	1
   980     003B                     vfprintf@ap:
   981                           
   982                           ; 1 bytes @ 0x1B
   983     003B                     	ds	1
   984     003C                     vfprintf@fp:
   985                           
   986                           ; 1 bytes @ 0x1C
   987     003C                     	ds	1
   988     003D                     vfprintf@cfmt:
   989                           
   990                           ; 1 bytes @ 0x1D
   991     003D                     	ds	1
   992     003E                     ??___fltol:
   993     003E                     ?_sprintf:	
   994                           ; 1 bytes @ 0x1E
   995                           
   996     003E                     sprintf@fmt:	
   997                           ; 2 bytes @ 0x1E
   998                           
   999     003E                     map@out_max:	
  1000                           ; 1 bytes @ 0x1E
  1001                           
  1002                           
  1003                           ; 4 bytes @ 0x1E
  1004     003E                     	ds	3
  1005     0041                     ??_sprintf:
  1006                           
  1007                           ; 1 bytes @ 0x21
  1008     0041                     	ds	1
  1009     0042                     ??_map:
  1010     0042                     ___fltol@sign1:	
  1011                           ; 1 bytes @ 0x22
  1012                           
  1013     0042                     sprintf@ap:	
  1014                           ; 1 bytes @ 0x22
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x22
  1018     0042                     	ds	1
  1019     0043                     ___fltol@exp1:
  1020     0043                     sprintf@s:	
  1021                           ; 1 bytes @ 0x23
  1022                           
  1023                           
  1024                           ; 1 bytes @ 0x23
  1025     0043                     	ds	1
  1026     0044                     sprintf@f:
  1027                           
  1028                           ; 11 bytes @ 0x24
  1029     0044                     	ds	14
  1030     0052                     ??_main:
  1031                           
  1032                           ; 1 bytes @ 0x32
  1033     0052                     	ds	4
  1034     0056                     main@rpm:
  1035                           
  1036                           ; 10 bytes @ 0x36
  1037     0056                     	ds	10
  1038     0060                     main@adcResult:
  1039                           
  1040                           ; 2 bytes @ 0x40
  1041     0060                     	ds	2
  1042     0062                     main@pulses:
  1043                           
  1044                           ; 2 bytes @ 0x42
  1045     0062                     	ds	2
  1046     0064                     main@fanRPM:
  1047                           
  1048                           ; 2 bytes @ 0x44
  1049     0064                     	ds	2
  1050     0066                     main@lcd:
  1051                           
  1052                           ; 8 bytes @ 0x46
  1053     0066                     	ds	8
  1054                           
  1055                           	psect	maintext
  1056     01C7                     __pmaintext:	
  1057 ;;
  1058 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1059 ;;
  1060 ;; *************** function _main *****************
  1061 ;; Defined at:
  1062 ;;		line 80 in file "newmain.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  rpm            10   54[BANK0 ] unsigned char [10]
  1067 ;;  fanRPM          2   68[BANK0 ] unsigned int 
  1068 ;;  pulses          2   66[BANK0 ] unsigned int 
  1069 ;;  adcResult       2   64[BANK0 ] unsigned int 
  1070 ;;  lcd             8   70[BANK0 ] struct .
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : B00/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1080 ;;      Params:         0       0       0       0       0
  1081 ;;      Locals:         0      24       0       0       0
  1082 ;;      Temps:          0       4       0       0       0
  1083 ;;      Totals:         0      28       0       0       0
  1084 ;;Total ram usage:       28 bytes
  1085 ;; Hardware stack levels required when called: 8
  1086 ;; This function calls:
  1087 ;;		_Lcd_Clear
  1088 ;;		_Lcd_Init
  1089 ;;		_Lcd_SetCursor
  1090 ;;		_Lcd_WriteString
  1091 ;;		___flmul
  1092 ;;		___fltol
  1093 ;;		___xxtofl
  1094 ;;		_countPulses
  1095 ;;		_initADC
  1096 ;;		_initPWM
  1097 ;;		_initRPM
  1098 ;;		_map
  1099 ;;		_readADC
  1100 ;;		_sprintf
  1101 ;; This function is called by:
  1102 ;;		Startup code after reset
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106     01C7                     _main:	
  1107                           ;psect for function _main
  1108                           
  1109                           
  1110                           ;newmain.c: 83:     };
  1111                           
  1112                           ;incstack = 0
  1113                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1114     01C7  120A  158A  2300  120A  118A  	fcall	_initPWM
  1115                           
  1116                           ;newmain.c: 84: 
  1117     01CC  120A  158A  230C  120A  118A  	fcall	_initADC
  1118                           
  1119                           ;newmain.c: 85: 
  1120     01D1  120A  158A  22EA  120A  118A  	fcall	_initRPM
  1121                           
  1122                           ;newmain.c: 90: 
  1123     01D6  3066               	movlw	main@lcd& (0+255)
  1124     01D7  0084               	movwf	4
  1125     01D8  30C4               	movlw	low main@F1791
  1126     01D9  00D2               	movwf	??_main
  1127     01DA  0804               	movf	4,w
  1128     01DB  00D3               	movwf	??_main+1
  1129     01DC  3008               	movlw	8
  1130     01DD  00D4               	movwf	??_main+2
  1131     01DE                     u3420:
  1132     01DE  0852               	movf	??_main,w
  1133     01DF  0084               	movwf	4
  1134     01E0  1383               	bcf	3,7	;select IRP bank1
  1135     01E1  0800               	movf	0,w
  1136     01E2  00D5               	movwf	??_main+3
  1137     01E3  0AD2               	incf	??_main,f
  1138     01E4  0853               	movf	??_main+1,w
  1139     01E5  0084               	movwf	4
  1140     01E6  0855               	movf	??_main+3,w
  1141     01E7  0080               	movwf	0
  1142     01E8  0AD3               	incf	??_main+1,f
  1143     01E9  0BD4               	decfsz	??_main+2,f
  1144     01EA  29DE               	goto	u3420
  1145                           
  1146                           ;newmain.c: 101:         unsigned int adcResult = readADC();
  1147     01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1148     01EC  0188               	clrf	8	;volatile
  1149                           
  1150                           ;newmain.c: 103:         unsigned int pulses = countPulses();
  1151     01ED  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1152     01EE  120A  118A  201B  120A  118A  	fcall	_Lcd_Init
  1153                           
  1154                           ;newmain.c: 104: 
  1155     01F3  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1156     01F4  120A  118A  2007  120A  118A  	fcall	_Lcd_Clear
  1157                           
  1158                           ;newmain.c: 107:         Lcd_SetCursor(&lcd, 2, 6);
  1159     01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1160     01FA  1303               	bcf	3,6	;RP1=0, select bank0
  1161     01FB  01A0               	clrf	Lcd_SetCursor@row
  1162     01FC  0AA0               	incf	Lcd_SetCursor@row,f
  1163     01FD  01A1               	clrf	Lcd_SetCursor@column
  1164     01FE  0AA1               	incf	Lcd_SetCursor@column,f
  1165     01FF  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1166     0200  120A  158A  237F  120A  118A  	fcall	_Lcd_SetCursor
  1167                           
  1168                           ;newmain.c: 108:         Lcd_WriteString(&lcd, rpm);
  1169     0205  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1170     0206  1283               	bcf	3,5	;RP0=0, select bank0
  1171     0207  1303               	bcf	3,6	;RP1=0, select bank0
  1172     0208  00A0               	movwf	Lcd_WriteString@str
  1173     0209  3080               	movlw	128
  1174     020A  00A1               	movwf	Lcd_WriteString@str+1
  1175     020B  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1176     020C  120A  158A  240D  120A  118A  	fcall	_Lcd_WriteString
  1177                           
  1178                           ;newmain.c: 109: 
  1179     0211  3002               	movlw	2
  1180     0212  00A0               	movwf	Lcd_SetCursor@row
  1181     0213  01A1               	clrf	Lcd_SetCursor@column
  1182     0214  0AA1               	incf	Lcd_SetCursor@column,f
  1183     0215  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1184     0216  120A  158A  237F  120A  118A  	fcall	_Lcd_SetCursor
  1185                           
  1186                           ;newmain.c: 110: 
  1187     021B  3014               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1188     021C  1283               	bcf	3,5	;RP0=0, select bank0
  1189     021D  1303               	bcf	3,6	;RP1=0, select bank0
  1190     021E  00A0               	movwf	Lcd_WriteString@str
  1191     021F  3080               	movlw	128
  1192     0220  00A1               	movwf	Lcd_WriteString@str+1
  1193     0221  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1194     0222  120A  158A  240D  120A  118A  	fcall	_Lcd_WriteString
  1195     0227                     l2096:
  1196                           
  1197                           ;newmain.c: 114:         _delay((unsigned long)((100)*(4000000/4000.0)));;newmain.c: 116
      +                          : }
  1198     0227  120A  158A  22F5  120A  118A  	fcall	_readADC
  1199     022C  0871               	movf	?_readADC+1,w
  1200     022D  1283               	bcf	3,5	;RP0=0, select bank0
  1201     022E  00E1               	movwf	main@adcResult+1
  1202     022F  0870               	movf	?_readADC,w
  1203     0230  00E0               	movwf	main@adcResult
  1204     0231  120A  158A  23C5  120A  118A  	fcall	_countPulses
  1205     0236  0871               	movf	?_countPulses+1,w
  1206     0237  00E3               	movwf	main@pulses+1
  1207     0238  0870               	movf	?_countPulses,w
  1208     0239  00E2               	movwf	main@pulses
  1209     023A  0863               	movf	main@pulses+1,w
  1210     023B  00D3               	movwf	??_main+1
  1211     023C  0862               	movf	main@pulses,w
  1212     023D  00D2               	movwf	??_main
  1213     023E  1003               	clrc
  1214     023F  0CD3               	rrf	??_main+1,f
  1215     0240  0CD2               	rrf	??_main,f
  1216     0241  0852               	movf	??_main,w
  1217     0242  00F0               	movwf	___xxtofl@val
  1218     0243  0853               	movf	??_main+1,w
  1219     0244  00F1               	movwf	___xxtofl@val+1
  1220     0245  01F2               	clrf	___xxtofl@val+2
  1221     0246  01F3               	clrf	___xxtofl@val+3
  1222     0247  3000               	movlw	0
  1223     0248  120A  118A  2126  120A  118A  	fcall	___xxtofl
  1224     024D  0873               	movf	?___xxtofl+3,w
  1225     024E  00A7               	movwf	___flmul@a+3
  1226     024F  0872               	movf	?___xxtofl+2,w
  1227     0250  00A6               	movwf	___flmul@a+2
  1228     0251  0871               	movf	?___xxtofl+1,w
  1229     0252  00A5               	movwf	___flmul@a+1
  1230     0253  0870               	movf	?___xxtofl,w
  1231     0254  00A4               	movwf	___flmul@a
  1232     0255  3043               	movlw	67
  1233     0256  00A3               	movwf	___flmul@b+3
  1234     0257  30B7               	movlw	183
  1235     0258  00A2               	movwf	___flmul@b+2
  1236     0259  301B               	movlw	27
  1237     025A  00A1               	movwf	___flmul@b+1
  1238     025B  3000               	movlw	0
  1239     025C  00A0               	movwf	___flmul@b
  1240     025D  120A  118A  250E  120A  118A  	fcall	___flmul
  1241     0262  0823               	movf	?___flmul+3,w
  1242     0263  00BD               	movwf	___fltol@f1+3
  1243     0264  0822               	movf	?___flmul+2,w
  1244     0265  00BC               	movwf	___fltol@f1+2
  1245     0266  0821               	movf	?___flmul+1,w
  1246     0267  00BB               	movwf	___fltol@f1+1
  1247     0268  0820               	movf	?___flmul,w
  1248     0269  00BA               	movwf	___fltol@f1
  1249     026A  120A  158A  2672  120A  118A  	fcall	___fltol
  1250     026F  083B               	movf	?___fltol+1,w
  1251     0270  00E5               	movwf	main@fanRPM+1
  1252     0271  083A               	movf	?___fltol,w
  1253     0272  00E4               	movwf	main@fanRPM
  1254     0273  301A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1255     0274  00BE               	movwf	sprintf@fmt
  1256     0275  0865               	movf	main@fanRPM+1,w
  1257     0276  00C0               	movwf	?_sprintf+2
  1258     0277  0864               	movf	main@fanRPM,w
  1259     0278  00BF               	movwf	?_sprintf+1
  1260     0279  3056               	movlw	(low (main@rpm| 0))& (0+255)
  1261     027A  120A  158A  232A  120A  118A  	fcall	_sprintf
  1262     027F  3002               	movlw	2
  1263     0280  00A0               	movwf	Lcd_SetCursor@row
  1264     0281  3006               	movlw	6
  1265     0282  00A1               	movwf	Lcd_SetCursor@column
  1266     0283  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1267     0284  120A  158A  237F  120A  118A  	fcall	_Lcd_SetCursor
  1268     0289  3056               	movlw	(low (main@rpm| 0))& (0+255)
  1269     028A  1283               	bcf	3,5	;RP0=0, select bank0
  1270     028B  1303               	bcf	3,6	;RP1=0, select bank0
  1271     028C  00A0               	movwf	Lcd_WriteString@str
  1272     028D  3000               	movlw	0
  1273     028E  00A1               	movwf	Lcd_WriteString@str+1
  1274     028F  3066               	movlw	(low (main@lcd| 0))& (0+255)
  1275     0290  120A  158A  240D  120A  118A  	fcall	_Lcd_WriteString
  1276     0295  0860               	movf	main@adcResult,w
  1277     0296  00AE               	movwf	map@x
  1278     0297  0861               	movf	main@adcResult+1,w
  1279     0298  00AF               	movwf	map@x+1
  1280     0299  01B0               	clrf	map@x+2
  1281     029A  01B1               	clrf	map@x+3
  1282     029B  3000               	movlw	0
  1283     029C  00B5               	movwf	map@in_min+3
  1284     029D  3000               	movlw	0
  1285     029E  00B4               	movwf	map@in_min+2
  1286     029F  3000               	movlw	0
  1287     02A0  00B3               	movwf	map@in_min+1
  1288     02A1  3000               	movlw	0
  1289     02A2  00B2               	movwf	map@in_min
  1290     02A3  3000               	movlw	0
  1291     02A4  00B9               	movwf	map@in_max+3
  1292     02A5  3000               	movlw	0
  1293     02A6  00B8               	movwf	map@in_max+2
  1294     02A7  3003               	movlw	3
  1295     02A8  00B7               	movwf	map@in_max+1
  1296     02A9  30FF               	movlw	255
  1297     02AA  00B6               	movwf	map@in_max
  1298     02AB  3000               	movlw	0
  1299     02AC  00BD               	movwf	map@out_min+3
  1300     02AD  3000               	movlw	0
  1301     02AE  00BC               	movwf	map@out_min+2
  1302     02AF  3000               	movlw	0
  1303     02B0  00BB               	movwf	map@out_min+1
  1304     02B1  3000               	movlw	0
  1305     02B2  00BA               	movwf	map@out_min
  1306     02B3  3000               	movlw	0
  1307     02B4  00C1               	movwf	map@out_max+3
  1308     02B5  3000               	movlw	0
  1309     02B6  00C0               	movwf	map@out_max+2
  1310     02B7  3000               	movlw	0
  1311     02B8  00BF               	movwf	map@out_max+1
  1312     02B9  30FF               	movlw	255
  1313     02BA  00BE               	movwf	map@out_max
  1314     02BB  120A  118A  2086  120A  118A  	fcall	_map
  1315     02C0  082E               	movf	?_map,w
  1316     02C1  0095               	movwf	21	;volatile
  1317     02C2  3082               	movlw	130
  1318     02C3  1283               	bcf	3,5	;RP0=0, select bank0
  1319     02C4  1303               	bcf	3,6	;RP1=0, select bank0
  1320     02C5  00D3               	movwf	??_main+1
  1321     02C6  30DD               	movlw	221
  1322     02C7  00D2               	movwf	??_main
  1323     02C8                     u3437:
  1324     02C8  0BD2               	decfsz	??_main,f
  1325     02C9  2AC8               	goto	u3437
  1326     02CA  0BD3               	decfsz	??_main+1,f
  1327     02CB  2AC8               	goto	u3437
  1328     02CC  2A27               	goto	l2096
  1329     02CD                     __end_of_main:
  1330                           
  1331                           	psect	text1
  1332     0B2A                     __ptext1:	
  1333 ;; *************** function _sprintf *****************
  1334 ;; Defined at:
  1335 ;;		line 9 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/nf_sprintf.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;  s               1    wreg     PTR unsigned char 
  1338 ;;		 -> main@rpm(10), 
  1339 ;;  fmt             1   30[BANK0 ] PTR const unsigned char 
  1340 ;;		 -> STR_3(4), 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  s               1   35[BANK0 ] PTR unsigned char 
  1343 ;;		 -> main@rpm(10), 
  1344 ;;  f              11   36[BANK0 ] struct _IO_FILE
  1345 ;;  ret             2    0        int 
  1346 ;;  ap              1   34[BANK0 ] PTR void [1]
  1347 ;;		 -> ?_sprintf(2), 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  2   30[BANK0 ] int 
  1350 ;; Registers used:
  1351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 300/0
  1354 ;;		On exit  : B00/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1357 ;;      Params:         0       3       0       0       0
  1358 ;;      Locals:         0      13       0       0       0
  1359 ;;      Temps:          0       1       0       0       0
  1360 ;;      Totals:         0      17       0       0       0
  1361 ;;Total ram usage:       17 bytes
  1362 ;; Hardware stack levels used: 1
  1363 ;; Hardware stack levels required when called: 7
  1364 ;; This function calls:
  1365 ;;		_vfprintf
  1366 ;; This function is called by:
  1367 ;;		_main
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371     0B2A                     _sprintf:	
  1372                           ;psect for function _sprintf
  1373                           
  1374                           
  1375                           ;incstack = 0
  1376                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1377                           ;sprintf@s stored from wreg
  1378     0B2A  00C3               	movwf	sprintf@s
  1379     0B2B  303F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1380     0B2C  00C2               	movwf	sprintf@ap
  1381     0B2D  0843               	movf	sprintf@s,w
  1382     0B2E  00C4               	movwf	sprintf@f
  1383     0B2F  01C6               	clrf	sprintf@f+2
  1384     0B30  01C7               	clrf	sprintf@f+3
  1385     0B31  01CD               	clrf	sprintf@f+9
  1386     0B32  01CE               	clrf	sprintf@f+10
  1387     0B33  083E               	movf	sprintf@fmt,w
  1388     0B34  00BA               	movwf	vfprintf@fmt
  1389     0B35  3042               	movlw	(low (sprintf@ap| 0))& (0+255)
  1390     0B36  00BB               	movwf	vfprintf@ap
  1391     0B37  3044               	movlw	(low (sprintf@f| 0))& (0+255)
  1392     0B38  120A  158A  2343   	fcall	_vfprintf
  1393     0B3B  0846               	movf	sprintf@f+2,w
  1394     0B3C  0743               	addwf	sprintf@s,w
  1395     0B3D  00C1               	movwf	??_sprintf
  1396     0B3E  0841               	movf	??_sprintf,w
  1397     0B3F  0084               	movwf	4
  1398     0B40  1383               	bcf	3,7	;select IRP bank0
  1399     0B41  0180               	clrf	0
  1400     0B42  0008               	return
  1401     0B43                     __end_of_sprintf:
  1402                           
  1403                           	psect	text2
  1404     0B43                     __ptext2:	
  1405 ;; *************** function _vfprintf *****************
  1406 ;; Defined at:
  1407 ;;		line 1817 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;  fp              1    wreg     PTR struct _IO_FILE
  1410 ;;		 -> sprintf@f(11), 
  1411 ;;  fmt             1   26[BANK0 ] PTR const unsigned char 
  1412 ;;		 -> STR_3(4), 
  1413 ;;  ap              1   27[BANK0 ] PTR PTR void 
  1414 ;;		 -> sprintf@ap(1), 
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  fp              1   28[BANK0 ] PTR struct _IO_FILE
  1417 ;;		 -> sprintf@f(11), 
  1418 ;;  cfmt            1   29[BANK0 ] PTR unsigned char 
  1419 ;;		 -> STR_3(4), 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2   26[BANK0 ] int 
  1422 ;; Registers used:
  1423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 300/0
  1426 ;;		On exit  : 300/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1429 ;;      Params:         0       2       0       0       0
  1430 ;;      Locals:         0       2       0       0       0
  1431 ;;      Temps:          0       0       0       0       0
  1432 ;;      Totals:         0       4       0       0       0
  1433 ;;Total ram usage:        4 bytes
  1434 ;; Hardware stack levels used: 1
  1435 ;; Hardware stack levels required when called: 6
  1436 ;; This function calls:
  1437 ;;		_vfpfcnvrt
  1438 ;; This function is called by:
  1439 ;;		_sprintf
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443     0B43                     _vfprintf:	
  1444                           ;psect for function _vfprintf
  1445                           
  1446                           
  1447                           ;incstack = 0
  1448 ;; using string table level
  1449                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1450                           ;vfprintf@fp stored from wreg
  1451     0B43  00BC               	movwf	vfprintf@fp
  1452                           
  1453                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1817: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.45/pic/sources/c99/
      +                          common/doprnt.c: 1818: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt
      +                          .c: 1820:     char *cfmt;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprn
      +                          t.c: 1822:     cfmt = (char *)fmt;
  1454     0B44  083A               	movf	vfprintf@fmt,w
  1455     0B45  00BD               	movwf	vfprintf@cfmt
  1456     0B46                     l1734:	
  1457                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1826:     while (*cf
      +                          mt) {
  1458                           
  1459                           
  1460                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1826:     while (*cf
      +                          mt) {
  1461     0B46  083D               	movf	vfprintf@cfmt,w
  1462     0B47  0084               	movwf	4
  1463     0B48  120A  158A  200A  120A  158A  	fcall	stringdir
  1464     0B4D  3A00               	xorlw	0
  1465     0B4E  1903               	btfsc	3,2
  1466     0B4F  2B5B               	goto	l1736
  1467                           
  1468                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1830:    vfpfcnvrt(f
      +                          p, &cfmt, ap);
  1469     0B50  303D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1470     0B51  00B0               	movwf	vfpfcnvrt@fmt
  1471     0B52  083B               	movf	vfprintf@ap,w
  1472     0B53  00B1               	movwf	vfpfcnvrt@ap
  1473     0B54  083C               	movf	vfprintf@fp,w
  1474     0B55  120A  158A  2766  120A  158A  	fcall	_vfpfcnvrt
  1475     0B5A  2B46               	goto	l1734
  1476     0B5B                     l1736:
  1477                           
  1478                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1835:  return 0;
  1479     0B5B  01BA               	clrf	?_vfprintf
  1480     0B5C  01BB               	clrf	?_vfprintf+1
  1481     0B5D  0008               	return
  1482     0B5E                     __end_of_vfprintf:
  1483                           
  1484                           	psect	text3
  1485     0F66                     __ptext3:	
  1486 ;; *************** function _vfpfcnvrt *****************
  1487 ;; Defined at:
  1488 ;;		line 1177 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  fp              1    wreg     PTR struct _IO_FILE
  1491 ;;		 -> sprintf@f(11), 
  1492 ;;  fmt             1   16[BANK0 ] PTR PTR unsigned char 
  1493 ;;		 -> vfprintf@cfmt(1), 
  1494 ;;  ap              1   17[BANK0 ] PTR PTR void 
  1495 ;;		 -> sprintf@ap(1), 
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  fp              1   24[BANK0 ] PTR struct _IO_FILE
  1498 ;;		 -> sprintf@f(11), 
  1499 ;;  convarg         4   20[BANK0 ] struct .
  1500 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  1501 ;;		 -> STR_3(4), 
  1502 ;;  done            1    0        _Bool 
  1503 ;;  c               1    0        unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 300/0
  1510 ;;		On exit  : 300/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1513 ;;      Params:         0       2       0       0       0
  1514 ;;      Locals:         0       6       0       0       0
  1515 ;;      Temps:          0       2       0       0       0
  1516 ;;      Totals:         0      10       0       0       0
  1517 ;;Total ram usage:       10 bytes
  1518 ;; Hardware stack levels used: 1
  1519 ;; Hardware stack levels required when called: 5
  1520 ;; This function calls:
  1521 ;;		_fputc
  1522 ;;		_read_prec_or_width
  1523 ;;		_utoa
  1524 ;; This function is called by:
  1525 ;;		_vfprintf
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529     0F66                     _vfpfcnvrt:	
  1530                           ;psect for function _vfpfcnvrt
  1531                           
  1532                           
  1533                           ;incstack = 0
  1534 ;; using string table level
  1535                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1536                           ;vfpfcnvrt@fp stored from wreg
  1537     0F66  00B8               	movwf	vfpfcnvrt@fp
  1538                           
  1539                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1177: vfpfcnvrt(FILE
      +                           *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.45/pic/sources/c99/common/
      +                          doprnt.c: 1178: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 117
      +                          9:     char c, *cp;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1
      +                          180:     _Bool done;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 
      +                          1188:  } convarg;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 120
      +                          1:     if ((*fmt)[0] == '%') {
  1540     0F67  0830               	movf	vfpfcnvrt@fmt,w
  1541     0F68  0084               	movwf	4
  1542     0F69  1383               	bcf	3,7	;select IRP bank0
  1543     0F6A  0800               	movf	0,w
  1544     0F6B  0084               	movwf	4
  1545     0F6C  120A  158A  200A  120A  158A  	fcall	stringdir
  1546     0F71  3A25               	xorlw	37
  1547     0F72  1D03               	skipz
  1548     0F73  2FE9               	goto	l1646
  1549                           
  1550                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1202:         ++*fmt
      +                          ;
  1551     0F74  3001               	movlw	1
  1552     0F75  00B2               	movwf	??_vfpfcnvrt
  1553     0F76  0830               	movf	vfpfcnvrt@fmt,w
  1554     0F77  0084               	movwf	4
  1555     0F78  0832               	movf	??_vfpfcnvrt,w
  1556     0F79  0780               	addwf	0,f
  1557                           
  1558                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1204:         flags 
      +                          = width = 0;
  1559     0F7A  1683               	bsf	3,5	;RP0=1, select bank1
  1560     0F7B  01A0               	clrf	_width^(0+128)
  1561     0F7C  01A1               	clrf	(_width+1)^(0+128)
  1562     0F7D  1003               	clrc
  1563     0F7E  3000               	movlw	0
  1564     0F7F  1803               	btfsc	3,0
  1565     0F80  3001               	movlw	1
  1566     0F81  1283               	bcf	3,5	;RP0=0, select bank0
  1567     0F82  00EE               	movwf	_flags
  1568                           
  1569                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1205:         prec =
      +                           -1;
  1570     0F83  30FF               	movlw	255
  1571     0F84  1683               	bsf	3,5	;RP0=1, select bank1
  1572     0F85  00A2               	movwf	_prec^(0+128)
  1573     0F86  30FF               	movlw	255
  1574     0F87  00A3               	movwf	(_prec^(0+128)+1)
  1575                           
  1576                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1256:   width = read
      +                          _prec_or_width(fmt, ap);
  1577     0F88  1283               	bcf	3,5	;RP0=0, select bank0
  1578     0F89  0831               	movf	vfpfcnvrt@ap,w
  1579     0F8A  00F6               	movwf	read_prec_or_width@ap
  1580     0F8B  0830               	movf	vfpfcnvrt@fmt,w
  1581     0F8C  120A  158A  25C5  120A  158A  	fcall	_read_prec_or_width
  1582     0F91  0877               	movf	?_read_prec_or_width+1,w
  1583     0F92  1683               	bsf	3,5	;RP0=1, select bank1
  1584     0F93  1303               	bcf	3,6	;RP1=0, select bank1
  1585     0F94  00A1               	movwf	(_width+1)^(0+128)
  1586     0F95  0876               	movf	?_read_prec_or_width,w
  1587     0F96  00A0               	movwf	_width^(0+128)
  1588                           
  1589                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1257:   if (width < 
      +                          0) {
  1590     0F97  1FA1               	btfss	(_width+1)^(0+128),7
  1591     0F98  2FA1               	goto	l1628
  1592                           
  1593                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1258:    flags |= (1
      +                           << 0);
  1594     0F99  1283               	bcf	3,5	;RP0=0, select bank0
  1595     0F9A  146E               	bsf	_flags,0
  1596                           
  1597                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1259:    width = -wi
      +                          dth;
  1598     0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  1599     0F9C  09A0               	comf	_width^(0+128),f
  1600     0F9D  09A1               	comf	(_width+1)^(0+128),f
  1601     0F9E  0AA0               	incf	_width^(0+128),f
  1602     0F9F  1903               	skipnz
  1603     0FA0  0AA1               	incf	(_width+1)^(0+128),f
  1604     0FA1                     l1628:
  1605                           
  1606                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1439:   if (0
  1607     0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  1608     0FA2  0830               	movf	vfpfcnvrt@fmt,w
  1609     0FA3  0084               	movwf	4
  1610     0FA4  0800               	movf	0,w
  1611     0FA5  00B9               	movwf	vfpfcnvrt@cp
  1612     0FA6  0839               	movf	vfpfcnvrt@cp,w
  1613     0FA7  0084               	movwf	4
  1614     0FA8  120A  158A  200A  120A  158A  	fcall	stringdir
  1615     0FAD  3A75               	xorlw	117
  1616     0FAE  1D03               	skipz
  1617     0FAF  2FDF               	goto	l1642
  1618                           
  1619                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1452:     ) {;/Appli
      +                          cations/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1495:    convarg.uint = (vf
      +                          pf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0
      +                          ));
  1620     0FB0  0831               	movf	vfpfcnvrt@ap,w
  1621     0FB1  0084               	movwf	4
  1622     0FB2  0800               	movf	0,w
  1623     0FB3  00B2               	movwf	??_vfpfcnvrt
  1624     0FB4  3002               	movlw	2
  1625     0FB5  0780               	addwf	0,f
  1626     0FB6  0832               	movf	??_vfpfcnvrt,w
  1627     0FB7  0084               	movwf	4
  1628     0FB8  0800               	movf	0,w
  1629     0FB9  00B4               	movwf	vfpfcnvrt@convarg
  1630     0FBA  0A84               	incf	4,f
  1631     0FBB  0800               	movf	0,w
  1632     0FBC  00B5               	movwf	vfpfcnvrt@convarg+1
  1633                           
  1634                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1497:    *fmt = cp+1
      +                          ;
  1635     0FBD  0830               	movf	vfpfcnvrt@fmt,w
  1636     0FBE  0084               	movwf	4
  1637     0FBF  0839               	movf	vfpfcnvrt@cp,w
  1638     0FC0  3E01               	addlw	1
  1639     0FC1  0080               	movwf	0
  1640                           
  1641                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1498:    switch (*cp
      +                          ) {
  1642     0FC2  2FCC               	goto	l1640
  1643     0FC3                     l1634:
  1644                           
  1645                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1542:      return (v
      +                          oid) utoa(fp, convarg.uint);;	Return value of _vfpfcnvrt is never used
  1646     0FC3  0835               	movf	vfpfcnvrt@convarg+1,w
  1647     0FC4  00A9               	movwf	utoa@d+1
  1648     0FC5  0834               	movf	vfpfcnvrt@convarg,w
  1649     0FC6  00A8               	movwf	utoa@d
  1650     0FC7  0838               	movf	vfpfcnvrt@fp,w
  1651     0FC8  120A  158A  2617   	fcall	_utoa
  1652     0FCB  0008               	return
  1653     0FCC                     l1640:
  1654     0FCC  0839               	movf	vfpfcnvrt@cp,w
  1655     0FCD  0084               	movwf	4
  1656     0FCE  120A  158A  200A  120A  158A  	fcall	stringdir
  1657     0FD3  00B2               	movwf	??_vfpfcnvrt
  1658     0FD4  01B3               	clrf	??_vfpfcnvrt+1
  1659                           
  1660                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1661                           ; Switch size 1, requested type "simple"
  1662                           ; Number of cases is 1, Range of values is 0 to 0
  1663                           ; switch strategies available:
  1664                           ; Name         Instructions Cycles
  1665                           ; simple_byte            4     3 (average)
  1666                           ; direct_byte           11     8 (fixed)
  1667                           ; jumptable            260     6 (fixed)
  1668                           ;	Chosen strategy is simple_byte
  1669     0FD5  0833               	movf	??_vfpfcnvrt+1,w
  1670     0FD6  3A00               	xorlw	0	; case 0
  1671     0FD7  1903               	skipnz
  1672     0FD8  2FDA               	goto	l2152
  1673     0FD9  2FDF               	goto	l1642
  1674     0FDA                     l2152:
  1675                           
  1676                           ; Switch size 1, requested type "simple"
  1677                           ; Number of cases is 1, Range of values is 117 to 117
  1678                           ; switch strategies available:
  1679                           ; Name         Instructions Cycles
  1680                           ; simple_byte            4     3 (average)
  1681                           ; direct_byte           14    11 (fixed)
  1682                           ; jumptable            263     9 (fixed)
  1683                           ;	Chosen strategy is simple_byte
  1684     0FDA  0832               	movf	??_vfpfcnvrt,w
  1685     0FDB  3A75               	xorlw	117	; case 117
  1686     0FDC  1903               	skipnz
  1687     0FDD  2FC3               	goto	l1634
  1688     0FDE  2FDF               	goto	l1642
  1689     0FDF                     l1642:
  1690                           
  1691                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1806:         ++*fmt
      +                          ;
  1692     0FDF  3001               	movlw	1
  1693     0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  1694     0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  1695     0FE2  00B2               	movwf	??_vfpfcnvrt
  1696     0FE3  0830               	movf	vfpfcnvrt@fmt,w
  1697     0FE4  0084               	movwf	4
  1698     0FE5  0832               	movf	??_vfpfcnvrt,w
  1699     0FE6  1383               	bcf	3,7	;select IRP bank0
  1700     0FE7  0780               	addwf	0,f
  1701     0FE8  0008               	return
  1702     0FE9                     l1646:
  1703                           
  1704                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1811:     fputc((int
      +                          )(*fmt)[0], fp);
  1705     0FE9  0830               	movf	vfpfcnvrt@fmt,w
  1706     0FEA  0084               	movwf	4
  1707     0FEB  0800               	movf	0,w
  1708     0FEC  0084               	movwf	4
  1709     0FED  120A  158A  200A  120A  158A  	fcall	stringdir
  1710     0FF2  00B2               	movwf	??_vfpfcnvrt
  1711     0FF3  01B3               	clrf	??_vfpfcnvrt+1
  1712     0FF4  0832               	movf	??_vfpfcnvrt,w
  1713     0FF5  00F0               	movwf	fputc@c
  1714     0FF6  0833               	movf	??_vfpfcnvrt+1,w
  1715     0FF7  00F1               	movwf	fputc@c+1
  1716     0FF8  0838               	movf	vfpfcnvrt@fp,w
  1717     0FF9  00F2               	movwf	fputc@fp
  1718     0FFA  120A  158A  257A  120A  158A  	fcall	_fputc
  1719     0FFF  2FDF               	goto	l1642
  1720     1000                     __end_of_vfpfcnvrt:
  1721                           
  1722                           	psect	text4
  1723     0E17                     __ptext4:	
  1724 ;; *************** function _utoa *****************
  1725 ;; Defined at:
  1726 ;;		line 1001 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  fp              1    wreg     PTR struct _IO_FILE
  1729 ;;		 -> sprintf@f(11), 
  1730 ;;  d               2    8[BANK0 ] unsigned int 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  1733 ;;		 -> sprintf@f(11), 
  1734 ;;  i               2   14[BANK0 ] int 
  1735 ;;  w               2   10[BANK0 ] int 
  1736 ;;  p               1   13[BANK0 ] _Bool 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  1    wreg      void 
  1739 ;; Registers used:
  1740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 300/0
  1743 ;;		On exit  : 300/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1746 ;;      Params:         0       2       0       0       0
  1747 ;;      Locals:         0       6       0       0       0
  1748 ;;      Temps:          0       0       0       0       0
  1749 ;;      Totals:         0       8       0       0       0
  1750 ;;Total ram usage:        8 bytes
  1751 ;; Hardware stack levels used: 1
  1752 ;; Hardware stack levels required when called: 4
  1753 ;; This function calls:
  1754 ;;		___lwdiv
  1755 ;;		___lwmod
  1756 ;;		_pad
  1757 ;; This function is called by:
  1758 ;;		_vfpfcnvrt
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762     0E17                     _utoa:	
  1763                           ;psect for function _utoa
  1764                           
  1765                           
  1766                           ;incstack = 0
  1767                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1768                           ;utoa@fp stored from wreg
  1769     0E17  00AC               	movwf	utoa@fp
  1770                           
  1771                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1001: static void ut
      +                          oa(FILE *fp, vfpf_uint_t d);/Applications/microchip/xc8/v2.45/pic/sources/c99/common/dop
      +                          rnt.c: 1002: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1003: 
      +                              int i, w;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1007:  
      +                          _Bool p = 1;
  1772     0E18  01AD               	clrf	utoa@p
  1773     0E19  0AAD               	incf	utoa@p,f
  1774                           
  1775                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1019:     w = width;
  1776     0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  1777     0E1B  0821               	movf	(_width+1)^(0+128),w
  1778     0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  1779     0E1D  00AB               	movwf	utoa@w+1
  1780     0E1E  1683               	bsf	3,5	;RP0=1, select bank1
  1781     0E1F  0820               	movf	_width^(0+128),w
  1782     0E20  1283               	bcf	3,5	;RP0=0, select bank0
  1783     0E21  00AA               	movwf	utoa@w
  1784                           
  1785                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1022:     i = sizeof
      +                          (dbuf) - 1;
  1786     0E22  301F               	movlw	31
  1787     0E23  00AE               	movwf	utoa@i
  1788     0E24  3000               	movlw	0
  1789     0E25  00AF               	movwf	utoa@i+1
  1790                           
  1791                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1023:     dbuf[i] = 
      +                          '\0';
  1792     0E26  1683               	bsf	3,5	;RP0=1, select bank1
  1793     0E27  01C3               	clrf	(_dbuf^(0+128)+31)
  1794                           
  1795                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1024:     while (i &
      +                          & (d != 0
  1796     0E28  2E61               	goto	l1584
  1797     0E29                     l1586:
  1798     0E29  0828               	movf	utoa@d,w
  1799     0E2A  0429               	iorwf	utoa@d+1,w
  1800     0E2B  1903               	btfsc	3,2
  1801     0E2C  082D               	movf	utoa@p,w
  1802     0E2D  1903               	btfsc	3,2
  1803     0E2E  2E66               	goto	l1590
  1804                           
  1805                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1033:     )) {;/Appl
      +                          ications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1034:         --i;
  1806     0E2F  30FF               	movlw	255
  1807     0E30  07AE               	addwf	utoa@i,f
  1808     0E31  1803               	skipnc
  1809     0E32  0AAF               	incf	utoa@i+1,f
  1810     0E33  30FF               	movlw	255
  1811     0E34  07AF               	addwf	utoa@i+1,f
  1812                           
  1813                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1035:         dbuf[i
      +                          ] = '0' + (d % 10);
  1814     0E35  082E               	movf	utoa@i,w
  1815     0E36  3EA4               	addlw	(low (_dbuf| 0))& (0+255)
  1816     0E37  0084               	movwf	4
  1817     0E38  300A               	movlw	10
  1818     0E39  00F0               	movwf	___lwmod@divisor
  1819     0E3A  3000               	movlw	0
  1820     0E3B  00F1               	movwf	___lwmod@divisor+1
  1821     0E3C  0829               	movf	utoa@d+1,w
  1822     0E3D  00F3               	movwf	___lwmod@dividend+1
  1823     0E3E  0828               	movf	utoa@d,w
  1824     0E3F  00F2               	movwf	___lwmod@dividend
  1825     0E40  120A  158A  248F  120A  158A  	fcall	___lwmod
  1826     0E45  0870               	movf	?___lwmod,w
  1827     0E46  3E30               	addlw	48
  1828     0E47  1383               	bcf	3,7	;select IRP bank1
  1829     0E48  0080               	movwf	0
  1830                           
  1831                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1039:   p = 0;
  1832     0E49  01AD               	clrf	utoa@p
  1833                           
  1834                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1041:         --w;
  1835     0E4A  30FF               	movlw	255
  1836     0E4B  07AA               	addwf	utoa@w,f
  1837     0E4C  1803               	skipnc
  1838     0E4D  0AAB               	incf	utoa@w+1,f
  1839     0E4E  30FF               	movlw	255
  1840     0E4F  07AB               	addwf	utoa@w+1,f
  1841                           
  1842                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1042:         d = d 
      +                          / 10;
  1843     0E50  300A               	movlw	10
  1844     0E51  00F0               	movwf	___lwdiv@divisor
  1845     0E52  3000               	movlw	0
  1846     0E53  00F1               	movwf	___lwdiv@divisor+1
  1847     0E54  0829               	movf	utoa@d+1,w
  1848     0E55  00F3               	movwf	___lwdiv@dividend+1
  1849     0E56  0828               	movf	utoa@d,w
  1850     0E57  00F2               	movwf	___lwdiv@dividend
  1851     0E58  120A  158A  24C1  120A  158A  	fcall	___lwdiv
  1852     0E5D  0871               	movf	?___lwdiv+1,w
  1853     0E5E  00A9               	movwf	utoa@d+1
  1854     0E5F  0870               	movf	?___lwdiv,w
  1855     0E60  00A8               	movwf	utoa@d
  1856     0E61                     l1584:
  1857                           
  1858                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1024:     while (i &
      +                          & (d != 0
  1859     0E61  1283               	bcf	3,5	;RP0=0, select bank0
  1860     0E62  082E               	movf	utoa@i,w
  1861     0E63  042F               	iorwf	utoa@i+1,w
  1862     0E64  1D03               	btfss	3,2
  1863     0E65  2E29               	goto	l1586
  1864     0E66                     l1590:
  1865                           
  1866                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1046:     return (vo
      +                          id) pad(fp, &dbuf[i], w);
  1867     0E66  082E               	movf	utoa@i,w
  1868     0E67  3EA4               	addlw	(low (_dbuf| 0))& (0+255)
  1869     0E68  00FB               	movwf	pad@buf
  1870     0E69  082B               	movf	utoa@w+1,w
  1871     0E6A  00FD               	movwf	pad@p+1
  1872     0E6B  082A               	movf	utoa@w,w
  1873     0E6C  00FC               	movwf	pad@p
  1874     0E6D  082C               	movf	utoa@fp,w
  1875     0E6E  120A  158A  24FD   	fcall	_pad
  1876     0E71  0008               	return
  1877     0E72                     __end_of_utoa:
  1878                           
  1879                           	psect	text5
  1880     0CFD                     __ptext5:	
  1881 ;; *************** function _pad *****************
  1882 ;; Defined at:
  1883 ;;		line 193 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  fp              1    wreg     PTR struct _IO_FILE
  1886 ;;		 -> sprintf@f(11), 
  1887 ;;  buf             1   11[COMMON] PTR unsigned char 
  1888 ;;		 -> dbuf(32), 
  1889 ;;  p               2   12[COMMON] int 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  fp              1    7[BANK0 ] PTR struct _IO_FILE
  1892 ;;		 -> sprintf@f(11), 
  1893 ;;  i               2    5[BANK0 ] int 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      void 
  1896 ;; Registers used:
  1897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 300/0
  1900 ;;		On exit  : 300/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1903 ;;      Params:         3       0       0       0       0
  1904 ;;      Locals:         0       3       0       0       0
  1905 ;;      Temps:          0       1       0       0       0
  1906 ;;      Totals:         3       4       0       0       0
  1907 ;;Total ram usage:        7 bytes
  1908 ;; Hardware stack levels used: 1
  1909 ;; Hardware stack levels required when called: 3
  1910 ;; This function calls:
  1911 ;;		_fputc
  1912 ;;		_fputs
  1913 ;; This function is called by:
  1914 ;;		_utoa
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918     0CFD                     _pad:	
  1919                           ;psect for function _pad
  1920                           
  1921                           
  1922                           ;incstack = 0
  1923                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1924                           ;pad@fp stored from wreg
  1925     0CFD  00A7               	movwf	pad@fp
  1926                           
  1927                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 193: static void pad
      +                          (FILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.45/pic/sources/c99/common/do
      +                          prnt.c: 194: {;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 195:  
      +                             int i;;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 199:     if
      +                           (flags & (1 << 0)) {
  1928     0CFE  1C6E               	btfss	_flags,0
  1929     0CFF  2D08               	goto	l1550
  1930                           
  1931                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 200:         fputs((
      +                          const char *)buf, fp);
  1932     0D00  0827               	movf	pad@fp,w
  1933     0D01  00F8               	movwf	fputs@fp
  1934     0D02  087B               	movf	pad@buf,w
  1935     0D03  120A  158A  23E8  120A  158A  	fcall	_fputs
  1936     0D08                     l1550:
  1937                           
  1938                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 205:  if (p < 0) {
  1939     0D08  1FFD               	btfss	pad@p+1,7
  1940     0D09  2D0C               	goto	l699
  1941                           
  1942                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 206:   p = 0;
  1943     0D0A  01FC               	clrf	pad@p
  1944     0D0B  01FD               	clrf	pad@p+1
  1945     0D0C                     l699:	
  1946                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 207:  }
  1947                           
  1948                           
  1949                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 208:     i = 0;
  1950     0D0C  01A5               	clrf	pad@i
  1951     0D0D  01A6               	clrf	pad@i+1
  1952     0D0E                     l1558:	
  1953                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 209:     while (i < 
      +                          p) {
  1954                           
  1955                           
  1956                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 209:     while (i < 
      +                          p) {
  1957     0D0E  0826               	movf	pad@i+1,w
  1958     0D0F  3A80               	xorlw	128
  1959     0D10  00A4               	movwf	??_pad
  1960     0D11  087D               	movf	pad@p+1,w
  1961     0D12  3A80               	xorlw	128
  1962     0D13  0224               	subwf	??_pad,w
  1963     0D14  1D03               	skipz
  1964     0D15  2D18               	goto	u1995
  1965     0D16  087C               	movf	pad@p,w
  1966     0D17  0225               	subwf	pad@i,w
  1967     0D18                     u1995:
  1968     0D18  1803               	btfsc	3,0
  1969     0D19  2D30               	goto	l702
  1970                           
  1971                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 210:         fputc('
      +                           ', fp);
  1972     0D1A  3020               	movlw	32
  1973     0D1B  00F0               	movwf	fputc@c
  1974     0D1C  3000               	movlw	0
  1975     0D1D  00F1               	movwf	fputc@c+1
  1976     0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  1977     0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  1978     0D20  0827               	movf	pad@fp,w
  1979     0D21  00F2               	movwf	fputc@fp
  1980     0D22  120A  158A  257A  120A  158A  	fcall	_fputc
  1981                           
  1982                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 211:         ++i;
  1983     0D27  3001               	movlw	1
  1984     0D28  1283               	bcf	3,5	;RP0=0, select bank0
  1985     0D29  1303               	bcf	3,6	;RP1=0, select bank0
  1986     0D2A  07A5               	addwf	pad@i,f
  1987     0D2B  1803               	skipnc
  1988     0D2C  0AA6               	incf	pad@i+1,f
  1989     0D2D  3000               	movlw	0
  1990     0D2E  07A6               	addwf	pad@i+1,f
  1991     0D2F  2D0E               	goto	l1558
  1992     0D30                     l702:
  1993                           
  1994                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 216:     if (!(flags
      +                           & (1 << 0))) {
  1995     0D30  1283               	bcf	3,5	;RP0=0, select bank0
  1996     0D31  1303               	bcf	3,6	;RP1=0, select bank0
  1997     0D32  186E               	btfsc	_flags,0
  1998     0D33  0008               	return
  1999                           
  2000                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 218:         fputs((
      +                          const char *)buf, fp);
  2001     0D34  0827               	movf	pad@fp,w
  2002     0D35  00F8               	movwf	fputs@fp
  2003     0D36  087B               	movf	pad@buf,w
  2004     0D37  120A  158A  23E8   	fcall	_fputs
  2005     0D3A  0008               	return
  2006     0D3B                     __end_of_pad:
  2007                           
  2008                           	psect	text6
  2009     0BE8                     __ptext6:	
  2010 ;; *************** function _fputs *****************
  2011 ;; Defined at:
  2012 ;;		line 8 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/nf_fputs.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  s               1    wreg     PTR const unsigned char 
  2015 ;;		 -> dbuf(32), 
  2016 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  2017 ;;		 -> sprintf@f(11), 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  2020 ;;		 -> dbuf(32), 
  2021 ;;  i               2    1[BANK0 ] int 
  2022 ;;  c               1    0[BANK0 ] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  2    8[COMMON] int 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 300/0
  2029 ;;		On exit  : B00/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2032 ;;      Params:         1       0       0       0       0
  2033 ;;      Locals:         0       4       0       0       0
  2034 ;;      Temps:          2       0       0       0       0
  2035 ;;      Totals:         3       4       0       0       0
  2036 ;;Total ram usage:        7 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 2
  2039 ;; This function calls:
  2040 ;;		_fputc
  2041 ;; This function is called by:
  2042 ;;		_pad
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046     0BE8                     _fputs:	
  2047                           ;psect for function _fputs
  2048                           
  2049                           
  2050                           ;incstack = 0
  2051                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2052                           ;fputs@s stored from wreg
  2053     0BE8  00A3               	movwf	fputs@s
  2054     0BE9  01A1               	clrf	fputs@i
  2055     0BEA  01A2               	clrf	fputs@i+1
  2056     0BEB                     l1476:
  2057     0BEB  0821               	movf	fputs@i,w
  2058     0BEC  0723               	addwf	fputs@s,w
  2059     0BED  00F9               	movwf	??_fputs
  2060     0BEE  0879               	movf	??_fputs,w
  2061     0BEF  0084               	movwf	4
  2062     0BF0  1383               	bcf	3,7	;select IRP bank0
  2063     0BF1  0800               	movf	0,w
  2064     0BF2  00A0               	movwf	fputs@c
  2065     0BF3  0820               	movf	fputs@c,w
  2066     0BF4  1903               	btfsc	3,2
  2067     0BF5  0008               	return
  2068     0BF6  0820               	movf	fputs@c,w
  2069     0BF7  00F9               	movwf	??_fputs
  2070     0BF8  01FA               	clrf	??_fputs+1
  2071     0BF9  0879               	movf	??_fputs,w
  2072     0BFA  00F0               	movwf	fputc@c
  2073     0BFB  087A               	movf	??_fputs+1,w
  2074     0BFC  00F1               	movwf	fputc@c+1
  2075     0BFD  0878               	movf	fputs@fp,w
  2076     0BFE  00F2               	movwf	fputc@fp
  2077     0BFF  120A  158A  257A  120A  158A  	fcall	_fputc
  2078     0C04  3001               	movlw	1
  2079     0C05  1283               	bcf	3,5	;RP0=0, select bank0
  2080     0C06  1303               	bcf	3,6	;RP1=0, select bank0
  2081     0C07  07A1               	addwf	fputs@i,f
  2082     0C08  1803               	skipnc
  2083     0C09  0AA2               	incf	fputs@i+1,f
  2084     0C0A  3000               	movlw	0
  2085     0C0B  07A2               	addwf	fputs@i+1,f
  2086     0C0C  2BEB               	goto	l1476
  2087     0C0D                     __end_of_fputs:
  2088                           
  2089                           	psect	text7
  2090     0D7A                     __ptext7:	
  2091 ;; *************** function _fputc *****************
  2092 ;; Defined at:
  2093 ;;		line 8 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/nf_fputc.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  c               2    0[COMMON] int 
  2096 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  2097 ;;		 -> sprintf@f(11), 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  2    0[COMMON] int 
  2102 ;; Registers used:
  2103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2104 ;; Tracked objects:
  2105 ;;		On entry : 300/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2109 ;;      Params:         3       0       0       0       0
  2110 ;;      Locals:         0       0       0       0       0
  2111 ;;      Temps:          5       0       0       0       0
  2112 ;;      Totals:         8       0       0       0       0
  2113 ;;Total ram usage:        8 bytes
  2114 ;; Hardware stack levels used: 1
  2115 ;; Hardware stack levels required when called: 1
  2116 ;; This function calls:
  2117 ;;		_putch
  2118 ;; This function is called by:
  2119 ;;		_pad
  2120 ;;		_vfpfcnvrt
  2121 ;;		_fputs
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125     0D7A                     _fputc:	
  2126                           ;psect for function _fputc
  2127                           
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2131     0D7A  0872               	movf	fputc@fp,w
  2132     0D7B  1D03               	btfss	3,2
  2133     0D7C  0872               	movf	fputc@fp,w
  2134     0D7D  1D03               	btfss	3,2
  2135     0D7E  2D84               	goto	l1462
  2136     0D7F  0870               	movf	fputc@c,w
  2137     0D80  120A  118A  2006   	fcall	_putch
  2138     0D83  0008               	return
  2139     0D84                     l1462:
  2140     0D84  0872               	movf	fputc@fp,w
  2141     0D85  3E09               	addlw	9
  2142     0D86  0084               	movwf	4
  2143     0D87  1383               	bcf	3,7	;select IRP bank0
  2144     0D88  0800               	movf	0,w
  2145     0D89  00F3               	movwf	??_fputc
  2146     0D8A  0A84               	incf	4,f
  2147     0D8B  0800               	movf	0,w
  2148     0D8C  00F4               	movwf	??_fputc+1
  2149     0D8D  0873               	movf	??_fputc,w
  2150     0D8E  0474               	iorwf	??_fputc+1,w
  2151     0D8F  1903               	btfsc	3,2
  2152     0D90  2DAD               	goto	l1466
  2153     0D91  0872               	movf	fputc@fp,w
  2154     0D92  3E09               	addlw	9
  2155     0D93  0084               	movwf	4
  2156     0D94  0800               	movf	0,w
  2157     0D95  00F3               	movwf	??_fputc
  2158     0D96  0A84               	incf	4,f
  2159     0D97  0800               	movf	0,w
  2160     0D98  00F4               	movwf	??_fputc+1
  2161     0D99  0872               	movf	fputc@fp,w
  2162     0D9A  3E02               	addlw	2
  2163     0D9B  0084               	movwf	4
  2164     0D9C  0800               	movf	0,w
  2165     0D9D  00F5               	movwf	??_fputc+2
  2166     0D9E  0A84               	incf	4,f
  2167     0D9F  0800               	movf	0,w
  2168     0DA0  00F6               	movwf	??_fputc+3
  2169     0DA1  0876               	movf	??_fputc+3,w
  2170     0DA2  3A80               	xorlw	128
  2171     0DA3  00F7               	movwf	??_fputc+4
  2172     0DA4  0874               	movf	??_fputc+1,w
  2173     0DA5  3A80               	xorlw	128
  2174     0DA6  0277               	subwf	??_fputc+4,w
  2175     0DA7  1D03               	skipz
  2176     0DA8  2DAB               	goto	u1755
  2177     0DA9  0873               	movf	??_fputc,w
  2178     0DAA  0275               	subwf	??_fputc+2,w
  2179     0DAB                     u1755:
  2180     0DAB  1803               	skipnc
  2181     0DAC  0008               	return
  2182     0DAD                     l1466:
  2183     0DAD  0872               	movf	fputc@fp,w
  2184     0DAE  3E02               	addlw	2
  2185     0DAF  0084               	movwf	4
  2186     0DB0  1383               	bcf	3,7	;select IRP bank0
  2187     0DB1  0800               	movf	0,w
  2188     0DB2  00F3               	movwf	??_fputc
  2189     0DB3  0872               	movf	fputc@fp,w
  2190     0DB4  0084               	movwf	4
  2191     0DB5  0800               	movf	0,w
  2192     0DB6  0773               	addwf	??_fputc,w
  2193     0DB7  00F4               	movwf	??_fputc+1
  2194     0DB8  0874               	movf	??_fputc+1,w
  2195     0DB9  0084               	movwf	4
  2196     0DBA  0870               	movf	fputc@c,w
  2197     0DBB  0080               	movwf	0
  2198     0DBC  0872               	movf	fputc@fp,w
  2199     0DBD  3E02               	addlw	2
  2200     0DBE  0084               	movwf	4
  2201     0DBF  3001               	movlw	1
  2202     0DC0  0780               	addwf	0,f
  2203     0DC1  0A84               	incf	4,f
  2204     0DC2  1803               	skipnc
  2205     0DC3  0A80               	incf	0,f
  2206     0DC4  0008               	return
  2207     0DC5                     __end_of_fputc:
  2208                           
  2209                           	psect	text8
  2210     0006                     __ptext8:	
  2211 ;; *************** function _putch *****************
  2212 ;; Defined at:
  2213 ;;		line 7 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/putch.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  c               1    wreg     unsigned char 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  c               1    0[COMMON] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg
  2222 ;; Tracked objects:
  2223 ;;		On entry : 300/0
  2224 ;;		On exit  : 300/0
  2225 ;;		Unchanged: 300/0
  2226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2227 ;;      Params:         0       0       0       0       0
  2228 ;;      Locals:         0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0
  2230 ;;      Totals:         0       0       0       0       0
  2231 ;;Total ram usage:        0 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_fputc
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240     0006                     _putch:	
  2241                           ;psect for function _putch
  2242                           
  2243                           
  2244                           ;incstack = 0
  2245                           ; Regs used in _putch: [wreg]
  2246     0006  0008               	return
  2247     0007                     __end_of_putch:
  2248                           
  2249                           	psect	text9
  2250     0C8F                     __ptext9:	
  2251 ;; *************** function ___lwmod *****************
  2252 ;; Defined at:
  2253 ;;		line 5 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/lwmod.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  divisor         2    0[COMMON] unsigned int 
  2256 ;;  dividend        2    2[COMMON] unsigned int 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  counter         1    5[COMMON] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  2    0[COMMON] unsigned int 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2, status,0
  2263 ;; Tracked objects:
  2264 ;;		On entry : 300/0
  2265 ;;		On exit  : 300/0
  2266 ;;		Unchanged: 300/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2268 ;;      Params:         4       0       0       0       0
  2269 ;;      Locals:         1       0       0       0       0
  2270 ;;      Temps:          1       0       0       0       0
  2271 ;;      Totals:         6       0       0       0       0
  2272 ;;Total ram usage:        6 bytes
  2273 ;; Hardware stack levels used: 1
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_utoa
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281     0C8F                     ___lwmod:	
  2282                           ;psect for function ___lwmod
  2283                           
  2284                           
  2285                           ;incstack = 0
  2286                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2287     0C8F  0870               	movf	___lwmod@divisor,w
  2288     0C90  0471               	iorwf	___lwmod@divisor+1,w
  2289     0C91  1903               	btfsc	3,2
  2290     0C92  2CBC               	goto	l1542
  2291     0C93  01F5               	clrf	___lwmod@counter
  2292     0C94  0AF5               	incf	___lwmod@counter,f
  2293     0C95                     l1532:
  2294     0C95  1BF1               	btfsc	___lwmod@divisor+1,7
  2295     0C96  2CA3               	goto	l1534
  2296     0C97  3001               	movlw	1
  2297     0C98                     u1925:
  2298     0C98  1003               	clrc
  2299     0C99  0DF0               	rlf	___lwmod@divisor,f
  2300     0C9A  0DF1               	rlf	___lwmod@divisor+1,f
  2301     0C9B  3EFF               	addlw	-1
  2302     0C9C  1D03               	skipz
  2303     0C9D  2C98               	goto	u1925
  2304     0C9E  3001               	movlw	1
  2305     0C9F  00F4               	movwf	??___lwmod
  2306     0CA0  0874               	movf	??___lwmod,w
  2307     0CA1  07F5               	addwf	___lwmod@counter,f
  2308     0CA2  2C95               	goto	l1532
  2309     0CA3                     l1534:
  2310     0CA3  0871               	movf	___lwmod@divisor+1,w
  2311     0CA4  0273               	subwf	___lwmod@dividend+1,w
  2312     0CA5  1D03               	skipz
  2313     0CA6  2CA9               	goto	u1945
  2314     0CA7  0870               	movf	___lwmod@divisor,w
  2315     0CA8  0272               	subwf	___lwmod@dividend,w
  2316     0CA9                     u1945:
  2317     0CA9  1C03               	skipc
  2318     0CAA  2CB1               	goto	l1538
  2319     0CAB  0870               	movf	___lwmod@divisor,w
  2320     0CAC  02F2               	subwf	___lwmod@dividend,f
  2321     0CAD  0871               	movf	___lwmod@divisor+1,w
  2322     0CAE  1C03               	skipc
  2323     0CAF  03F3               	decf	___lwmod@dividend+1,f
  2324     0CB0  02F3               	subwf	___lwmod@dividend+1,f
  2325     0CB1                     l1538:
  2326     0CB1  3001               	movlw	1
  2327     0CB2                     u1955:
  2328     0CB2  1003               	clrc
  2329     0CB3  0CF1               	rrf	___lwmod@divisor+1,f
  2330     0CB4  0CF0               	rrf	___lwmod@divisor,f
  2331     0CB5  3EFF               	addlw	-1
  2332     0CB6  1D03               	skipz
  2333     0CB7  2CB2               	goto	u1955
  2334     0CB8  3001               	movlw	1
  2335     0CB9  02F5               	subwf	___lwmod@counter,f
  2336     0CBA  1D03               	btfss	3,2
  2337     0CBB  2CA3               	goto	l1534
  2338     0CBC                     l1542:
  2339     0CBC  0873               	movf	___lwmod@dividend+1,w
  2340     0CBD  00F1               	movwf	?___lwmod+1
  2341     0CBE  0872               	movf	___lwmod@dividend,w
  2342     0CBF  00F0               	movwf	?___lwmod
  2343     0CC0  0008               	return
  2344     0CC1                     __end_of___lwmod:
  2345                           
  2346                           	psect	text10
  2347     0CC1                     __ptext10:	
  2348 ;; *************** function ___lwdiv *****************
  2349 ;; Defined at:
  2350 ;;		line 5 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/lwdiv.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  divisor         2    0[COMMON] unsigned int 
  2353 ;;  dividend        2    2[COMMON] unsigned int 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  quotient        2    5[COMMON] unsigned int 
  2356 ;;  counter         1    7[COMMON] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  2    0[COMMON] unsigned int 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0
  2361 ;; Tracked objects:
  2362 ;;		On entry : B00/0
  2363 ;;		On exit  : B00/0
  2364 ;;		Unchanged: B00/0
  2365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2366 ;;      Params:         4       0       0       0       0
  2367 ;;      Locals:         3       0       0       0       0
  2368 ;;      Temps:          1       0       0       0       0
  2369 ;;      Totals:         8       0       0       0       0
  2370 ;;Total ram usage:        8 bytes
  2371 ;; Hardware stack levels used: 1
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_utoa
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379     0CC1                     ___lwdiv:	
  2380                           ;psect for function ___lwdiv
  2381                           
  2382                           
  2383                           ;incstack = 0
  2384                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2385     0CC1  01F5               	clrf	___lwdiv@quotient
  2386     0CC2  01F6               	clrf	___lwdiv@quotient+1
  2387     0CC3  0870               	movf	___lwdiv@divisor,w
  2388     0CC4  0471               	iorwf	___lwdiv@divisor+1,w
  2389     0CC5  1903               	btfsc	3,2
  2390     0CC6  2CF8               	goto	l1520
  2391     0CC7  01F7               	clrf	___lwdiv@counter
  2392     0CC8  0AF7               	incf	___lwdiv@counter,f
  2393     0CC9                     l1508:
  2394     0CC9  1BF1               	btfsc	___lwdiv@divisor+1,7
  2395     0CCA  2CD7               	goto	l1510
  2396     0CCB  3001               	movlw	1
  2397     0CCC                     u1855:
  2398     0CCC  1003               	clrc
  2399     0CCD  0DF0               	rlf	___lwdiv@divisor,f
  2400     0CCE  0DF1               	rlf	___lwdiv@divisor+1,f
  2401     0CCF  3EFF               	addlw	-1
  2402     0CD0  1D03               	skipz
  2403     0CD1  2CCC               	goto	u1855
  2404     0CD2  3001               	movlw	1
  2405     0CD3  00F4               	movwf	??___lwdiv
  2406     0CD4  0874               	movf	??___lwdiv,w
  2407     0CD5  07F7               	addwf	___lwdiv@counter,f
  2408     0CD6  2CC9               	goto	l1508
  2409     0CD7                     l1510:
  2410     0CD7  3001               	movlw	1
  2411     0CD8                     u1875:
  2412     0CD8  1003               	clrc
  2413     0CD9  0DF5               	rlf	___lwdiv@quotient,f
  2414     0CDA  0DF6               	rlf	___lwdiv@quotient+1,f
  2415     0CDB  3EFF               	addlw	-1
  2416     0CDC  1D03               	skipz
  2417     0CDD  2CD8               	goto	u1875
  2418     0CDE  0871               	movf	___lwdiv@divisor+1,w
  2419     0CDF  0273               	subwf	___lwdiv@dividend+1,w
  2420     0CE0  1D03               	skipz
  2421     0CE1  2CE4               	goto	u1885
  2422     0CE2  0870               	movf	___lwdiv@divisor,w
  2423     0CE3  0272               	subwf	___lwdiv@dividend,w
  2424     0CE4                     u1885:
  2425     0CE4  1C03               	skipc
  2426     0CE5  2CED               	goto	l1516
  2427     0CE6  0870               	movf	___lwdiv@divisor,w
  2428     0CE7  02F2               	subwf	___lwdiv@dividend,f
  2429     0CE8  0871               	movf	___lwdiv@divisor+1,w
  2430     0CE9  1C03               	skipc
  2431     0CEA  03F3               	decf	___lwdiv@dividend+1,f
  2432     0CEB  02F3               	subwf	___lwdiv@dividend+1,f
  2433     0CEC  1475               	bsf	___lwdiv@quotient,0
  2434     0CED                     l1516:
  2435     0CED  3001               	movlw	1
  2436     0CEE                     u1895:
  2437     0CEE  1003               	clrc
  2438     0CEF  0CF1               	rrf	___lwdiv@divisor+1,f
  2439     0CF0  0CF0               	rrf	___lwdiv@divisor,f
  2440     0CF1  3EFF               	addlw	-1
  2441     0CF2  1D03               	skipz
  2442     0CF3  2CEE               	goto	u1895
  2443     0CF4  3001               	movlw	1
  2444     0CF5  02F7               	subwf	___lwdiv@counter,f
  2445     0CF6  1D03               	btfss	3,2
  2446     0CF7  2CD7               	goto	l1510
  2447     0CF8                     l1520:
  2448     0CF8  0876               	movf	___lwdiv@quotient+1,w
  2449     0CF9  00F1               	movwf	?___lwdiv+1
  2450     0CFA  0875               	movf	___lwdiv@quotient,w
  2451     0CFB  00F0               	movwf	?___lwdiv
  2452     0CFC  0008               	return
  2453     0CFD                     __end_of___lwdiv:
  2454                           
  2455                           	psect	text11
  2456     0DC5                     __ptext11:	
  2457 ;; *************** function _read_prec_or_width *****************
  2458 ;; Defined at:
  2459 ;;		line 1158 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  fmt             1    wreg     PTR PTR const unsigned c
  2462 ;;		 -> vfprintf@cfmt(1), 
  2463 ;;  ap              1    6[COMMON] PTR PTR void [1]
  2464 ;;		 -> sprintf@ap(1), 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  fmt             1   12[COMMON] PTR PTR const unsigned c
  2467 ;;		 -> vfprintf@cfmt(1), 
  2468 ;;  c               1    9[COMMON] unsigned char 
  2469 ;;  n               2   10[COMMON] int 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  2    6[COMMON] int 
  2472 ;; Registers used:
  2473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : B00/0
  2476 ;;		On exit  : 800/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2479 ;;      Params:         2       0       0       0       0
  2480 ;;      Locals:         4       0       0       0       0
  2481 ;;      Temps:          1       0       0       0       0
  2482 ;;      Totals:         7       0       0       0       0
  2483 ;;Total ram usage:        7 bytes
  2484 ;; Hardware stack levels used: 1
  2485 ;; Hardware stack levels required when called: 1
  2486 ;; This function calls:
  2487 ;;		___wmul
  2488 ;; This function is called by:
  2489 ;;		_vfpfcnvrt
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493     0DC5                     _read_prec_or_width:	
  2494                           ;psect for function _read_prec_or_width
  2495                           
  2496                           
  2497                           ;incstack = 0
  2498                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2499                           ;read_prec_or_width@fmt stored from wreg
  2500     0DC5  00FC               	movwf	read_prec_or_width@fmt
  2501                           
  2502                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1159:     int n = 0;
  2503     0DC6  01FA               	clrf	read_prec_or_width@n
  2504     0DC7  01FB               	clrf	read_prec_or_width@n+1
  2505                           
  2506                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1160:     if ((*fmt)
      +                          [0] == '*') {
  2507     0DC8  087C               	movf	read_prec_or_width@fmt,w
  2508     0DC9  0084               	movwf	4
  2509     0DCA  0800               	movf	0,w
  2510     0DCB  0084               	movwf	4
  2511     0DCC  120A  158A  200A  120A  158A  	fcall	stringdir
  2512     0DD1  3A2A               	xorlw	42
  2513     0DD2  1D03               	skipz
  2514     0DD3  2E03               	goto	l1604
  2515                           
  2516                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1161:         ++*fmt
      +                          ;
  2517     0DD4  3001               	movlw	1
  2518     0DD5  00F8               	movwf	??_read_prec_or_width
  2519     0DD6  087C               	movf	read_prec_or_width@fmt,w
  2520     0DD7  0084               	movwf	4
  2521     0DD8  0878               	movf	??_read_prec_or_width,w
  2522     0DD9  0780               	addwf	0,f
  2523                           
  2524                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1162:         n = (*
      +                          (int *)__va_arg(*(int **)*ap, (int)0));
  2525     0DDA  0876               	movf	read_prec_or_width@ap,w
  2526     0DDB  0084               	movwf	4
  2527     0DDC  0800               	movf	0,w
  2528     0DDD  00F8               	movwf	??_read_prec_or_width
  2529     0DDE  3002               	movlw	2
  2530     0DDF  0780               	addwf	0,f
  2531     0DE0  0878               	movf	??_read_prec_or_width,w
  2532     0DE1  0084               	movwf	4
  2533     0DE2  0800               	movf	0,w
  2534     0DE3  00FA               	movwf	read_prec_or_width@n
  2535     0DE4  0A84               	incf	4,f
  2536     0DE5  0800               	movf	0,w
  2537     0DE6  00FB               	movwf	read_prec_or_width@n+1
  2538                           
  2539                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1163:     } else {
  2540     0DE7  2E12               	goto	l1606
  2541     0DE8                     l1600:
  2542                           
  2543                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1166:             n 
      +                          = n * 10 + c;
  2544     0DE8  087B               	movf	read_prec_or_width@n+1,w
  2545     0DE9  00F1               	movwf	___wmul@multiplier+1
  2546     0DEA  087A               	movf	read_prec_or_width@n,w
  2547     0DEB  00F0               	movwf	___wmul@multiplier
  2548     0DEC  300A               	movlw	10
  2549     0DED  00F2               	movwf	___wmul@multiplicand
  2550     0DEE  3000               	movlw	0
  2551     0DEF  00F3               	movwf	___wmul@multiplicand+1
  2552     0DF0  120A  158A  235E  120A  158A  	fcall	___wmul
  2553     0DF5  0879               	movf	read_prec_or_width@c,w
  2554     0DF6  0770               	addwf	?___wmul,w
  2555     0DF7  00FA               	movwf	read_prec_or_width@n
  2556     0DF8  3000               	movlw	0
  2557     0DF9  1803               	skipnc
  2558     0DFA  3001               	movlw	1
  2559     0DFB  0771               	addwf	?___wmul+1,w
  2560     0DFC  00FB               	movwf	read_prec_or_width@n+1
  2561                           
  2562                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1167:             ++
      +                          *fmt;
  2563     0DFD  3001               	movlw	1
  2564     0DFE  00F8               	movwf	??_read_prec_or_width
  2565     0DFF  087C               	movf	read_prec_or_width@fmt,w
  2566     0E00  0084               	movwf	4
  2567     0E01  0878               	movf	??_read_prec_or_width,w
  2568     0E02  0780               	addwf	0,f
  2569     0E03                     l1604:
  2570                           
  2571                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1165:         while 
      +                          ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2572     0E03  087C               	movf	read_prec_or_width@fmt,w
  2573     0E04  0084               	movwf	4
  2574     0E05  0800               	movf	0,w
  2575     0E06  0084               	movwf	4
  2576     0E07  120A  158A  200A  120A  158A  	fcall	stringdir
  2577     0E0C  3ED0               	addlw	208
  2578     0E0D  00F9               	movwf	read_prec_or_width@c
  2579     0E0E  300A               	movlw	10
  2580     0E0F  0279               	subwf	read_prec_or_width@c,w
  2581     0E10  1C03               	skipc
  2582     0E11  2DE8               	goto	l1600
  2583     0E12                     l1606:
  2584                           
  2585                           ;/Applications/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1170:     return n;
  2586     0E12  087B               	movf	read_prec_or_width@n+1,w
  2587     0E13  00F7               	movwf	?_read_prec_or_width+1
  2588     0E14  087A               	movf	read_prec_or_width@n,w
  2589     0E15  00F6               	movwf	?_read_prec_or_width
  2590     0E16  0008               	return
  2591     0E17                     __end_of_read_prec_or_width:
  2592                           
  2593                           	psect	text12
  2594     0B5E                     __ptext12:	
  2595 ;; *************** function ___wmul *****************
  2596 ;; Defined at:
  2597 ;;		line 15 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  multiplier      2    0[COMMON] unsigned int 
  2600 ;;  multiplicand    2    2[COMMON] unsigned int 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  product         2    4[COMMON] unsigned int 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  2    0[COMMON] unsigned int 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0
  2607 ;; Tracked objects:
  2608 ;;		On entry : 800/0
  2609 ;;		On exit  : 800/0
  2610 ;;		Unchanged: 800/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2612 ;;      Params:         4       0       0       0       0
  2613 ;;      Locals:         2       0       0       0       0
  2614 ;;      Temps:          0       0       0       0       0
  2615 ;;      Totals:         6       0       0       0       0
  2616 ;;Total ram usage:        6 bytes
  2617 ;; Hardware stack levels used: 1
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_read_prec_or_width
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625     0B5E                     ___wmul:	
  2626                           ;psect for function ___wmul
  2627                           
  2628                           
  2629                           ;incstack = 0
  2630                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2631     0B5E  01F4               	clrf	___wmul@product
  2632     0B5F  01F5               	clrf	___wmul@product+1
  2633     0B60                     l1486:
  2634     0B60  1C70               	btfss	___wmul@multiplier,0
  2635     0B61  2B68               	goto	l218
  2636     0B62  0872               	movf	___wmul@multiplicand,w
  2637     0B63  07F4               	addwf	___wmul@product,f
  2638     0B64  1803               	skipnc
  2639     0B65  0AF5               	incf	___wmul@product+1,f
  2640     0B66  0873               	movf	___wmul@multiplicand+1,w
  2641     0B67  07F5               	addwf	___wmul@product+1,f
  2642     0B68                     l218:
  2643     0B68  3001               	movlw	1
  2644     0B69                     u1815:
  2645     0B69  1003               	clrc
  2646     0B6A  0DF2               	rlf	___wmul@multiplicand,f
  2647     0B6B  0DF3               	rlf	___wmul@multiplicand+1,f
  2648     0B6C  3EFF               	addlw	-1
  2649     0B6D  1D03               	skipz
  2650     0B6E  2B69               	goto	u1815
  2651     0B6F  3001               	movlw	1
  2652     0B70                     u1825:
  2653     0B70  1003               	clrc
  2654     0B71  0CF1               	rrf	___wmul@multiplier+1,f
  2655     0B72  0CF0               	rrf	___wmul@multiplier,f
  2656     0B73  3EFF               	addlw	-1
  2657     0B74  1D03               	skipz
  2658     0B75  2B70               	goto	u1825
  2659     0B76  0870               	movf	___wmul@multiplier,w
  2660     0B77  0471               	iorwf	___wmul@multiplier+1,w
  2661     0B78  1D03               	btfss	3,2
  2662     0B79  2B60               	goto	l1486
  2663     0B7A  0875               	movf	___wmul@product+1,w
  2664     0B7B  00F1               	movwf	?___wmul+1
  2665     0B7C  0874               	movf	___wmul@product,w
  2666     0B7D  00F0               	movwf	?___wmul
  2667     0B7E  0008               	return
  2668     0B7F                     __end_of___wmul:
  2669                           
  2670                           	psect	text13
  2671     0AF5                     __ptext13:	
  2672 ;; *************** function _readADC *****************
  2673 ;; Defined at:
  2674 ;;		line 68 in file "newmain.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  2    0[COMMON] unsigned int 
  2681 ;; Registers used:
  2682 ;;		wreg
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 300/100
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2688 ;;      Params:         2       0       0       0       0
  2689 ;;      Locals:         0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0
  2691 ;;      Totals:         2       0       0       0       0
  2692 ;;Total ram usage:        2 bytes
  2693 ;; Hardware stack levels used: 1
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_main
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701     0AF5                     _readADC:	
  2702                           ;psect for function _readADC
  2703                           
  2704                           
  2705                           ;newmain.c: 69:     initADC();
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _readADC: [wreg]
  2709     0AF5  1283               	bcf	3,5	;RP0=0, select bank0
  2710     0AF6  1303               	bcf	3,6	;RP1=0, select bank0
  2711     0AF7  149F               	bsf	31,1	;volatile
  2712     0AF8                     l116:	
  2713                           ;newmain.c: 70:     initRPM();
  2714                           
  2715     0AF8  189F               	btfsc	31,1	;volatile
  2716     0AF9  2AF8               	goto	l116
  2717                           
  2718                           ;newmain.c: 71: 
  2719     0AFA  081E               	movf	30,w	;volatile
  2720     0AFB  00F1               	movwf	?_readADC+1
  2721     0AFC  1683               	bsf	3,5	;RP0=1, select bank1
  2722     0AFD  081E               	movf	30,w	;volatile
  2723     0AFE  00F0               	movwf	?_readADC
  2724     0AFF  0008               	return
  2725     0B00                     __end_of_readADC:
  2726                           
  2727                           	psect	text14
  2728     0086                     __ptext14:	
  2729 ;; *************** function _map *****************
  2730 ;; Defined at:
  2731 ;;		line 75 in file "newmain.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  x               4   14[BANK0 ] long 
  2734 ;;  in_min          4   18[BANK0 ] long 
  2735 ;;  in_max          4   22[BANK0 ] long 
  2736 ;;  out_min         4   26[BANK0 ] long 
  2737 ;;  out_max         4   30[BANK0 ] long 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;		None
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  4   14[BANK0 ] long 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0, pclath, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 300/0
  2746 ;;		On exit  : 300/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2749 ;;      Params:         0      20       0       0       0
  2750 ;;      Locals:         0       0       0       0       0
  2751 ;;      Temps:          0      16       0       0       0
  2752 ;;      Totals:         0      36       0       0       0
  2753 ;;Total ram usage:       36 bytes
  2754 ;; Hardware stack levels used: 1
  2755 ;; Hardware stack levels required when called: 1
  2756 ;; This function calls:
  2757 ;;		___aldiv
  2758 ;;		___lmul
  2759 ;; This function is called by:
  2760 ;;		_main
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764     0086                     _map:	
  2765                           ;psect for function _map
  2766                           
  2767                           
  2768                           ;newmain.c: 76:         .port = &PORTD,
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  2772     0086  0836               	movf	map@in_max,w
  2773     0087  00C2               	movwf	??_map
  2774     0088  0837               	movf	map@in_max+1,w
  2775     0089  00C3               	movwf	??_map+1
  2776     008A  0838               	movf	map@in_max+2,w
  2777     008B  00C4               	movwf	??_map+2
  2778     008C  0839               	movf	map@in_max+3,w
  2779     008D  00C5               	movwf	??_map+3
  2780     008E  0832               	movf	map@in_min,w
  2781     008F  02C2               	subwf	??_map,f
  2782     0090  0833               	movf	map@in_min+1,w
  2783     0091  1C03               	skipc
  2784     0092  0F33               	incfsz	map@in_min+1,w
  2785     0093  2895               	goto	u2791
  2786     0094  2896               	goto	u2792
  2787     0095                     u2791:
  2788     0095  02C3               	subwf	??_map+1,f
  2789     0096                     u2792:
  2790     0096  0834               	movf	map@in_min+2,w
  2791     0097  1C03               	skipc
  2792     0098  0F34               	incfsz	map@in_min+2,w
  2793     0099  289B               	goto	u2793
  2794     009A  289C               	goto	u2794
  2795     009B                     u2793:
  2796     009B  02C4               	subwf	??_map+2,f
  2797     009C                     u2794:
  2798     009C  0835               	movf	map@in_min+3,w
  2799     009D  1C03               	skipc
  2800     009E  0F35               	incfsz	map@in_min+3,w
  2801     009F  28A1               	goto	u2795
  2802     00A0  28A2               	goto	u2796
  2803     00A1                     u2795:
  2804     00A1  02C5               	subwf	??_map+3,f
  2805     00A2                     u2796:
  2806     00A2  0845               	movf	??_map+3,w
  2807     00A3  00A3               	movwf	___aldiv@divisor+3
  2808     00A4  0844               	movf	??_map+2,w
  2809     00A5  00A2               	movwf	___aldiv@divisor+2
  2810     00A6  0843               	movf	??_map+1,w
  2811     00A7  00A1               	movwf	___aldiv@divisor+1
  2812     00A8  0842               	movf	??_map,w
  2813     00A9  00A0               	movwf	___aldiv@divisor
  2814     00AA  082E               	movf	map@x,w
  2815     00AB  00C6               	movwf	??_map+4
  2816     00AC  082F               	movf	map@x+1,w
  2817     00AD  00C7               	movwf	??_map+5
  2818     00AE  0830               	movf	map@x+2,w
  2819     00AF  00C8               	movwf	??_map+6
  2820     00B0  0831               	movf	map@x+3,w
  2821     00B1  00C9               	movwf	??_map+7
  2822     00B2  0832               	movf	map@in_min,w
  2823     00B3  02C6               	subwf	??_map+4,f
  2824     00B4  0833               	movf	map@in_min+1,w
  2825     00B5  1C03               	skipc
  2826     00B6  0F33               	incfsz	map@in_min+1,w
  2827     00B7  28B9               	goto	u2801
  2828     00B8  28BA               	goto	u2802
  2829     00B9                     u2801:
  2830     00B9  02C7               	subwf	??_map+5,f
  2831     00BA                     u2802:
  2832     00BA  0834               	movf	map@in_min+2,w
  2833     00BB  1C03               	skipc
  2834     00BC  0F34               	incfsz	map@in_min+2,w
  2835     00BD  28BF               	goto	u2803
  2836     00BE  28C0               	goto	u2804
  2837     00BF                     u2803:
  2838     00BF  02C8               	subwf	??_map+6,f
  2839     00C0                     u2804:
  2840     00C0  0835               	movf	map@in_min+3,w
  2841     00C1  1C03               	skipc
  2842     00C2  0F35               	incfsz	map@in_min+3,w
  2843     00C3  28C5               	goto	u2805
  2844     00C4  28C6               	goto	u2806
  2845     00C5                     u2805:
  2846     00C5  02C9               	subwf	??_map+7,f
  2847     00C6                     u2806:
  2848     00C6  0849               	movf	??_map+7,w
  2849     00C7  00F3               	movwf	___lmul@multiplier+3
  2850     00C8  0848               	movf	??_map+6,w
  2851     00C9  00F2               	movwf	___lmul@multiplier+2
  2852     00CA  0847               	movf	??_map+5,w
  2853     00CB  00F1               	movwf	___lmul@multiplier+1
  2854     00CC  0846               	movf	??_map+4,w
  2855     00CD  00F0               	movwf	___lmul@multiplier
  2856     00CE  083E               	movf	map@out_max,w
  2857     00CF  00CA               	movwf	??_map+8
  2858     00D0  083F               	movf	map@out_max+1,w
  2859     00D1  00CB               	movwf	??_map+9
  2860     00D2  0840               	movf	map@out_max+2,w
  2861     00D3  00CC               	movwf	??_map+10
  2862     00D4  0841               	movf	map@out_max+3,w
  2863     00D5  00CD               	movwf	??_map+11
  2864     00D6  083A               	movf	map@out_min,w
  2865     00D7  02CA               	subwf	??_map+8,f
  2866     00D8  083B               	movf	map@out_min+1,w
  2867     00D9  1C03               	skipc
  2868     00DA  0F3B               	incfsz	map@out_min+1,w
  2869     00DB  28DD               	goto	u2811
  2870     00DC  28DE               	goto	u2812
  2871     00DD                     u2811:
  2872     00DD  02CB               	subwf	??_map+9,f
  2873     00DE                     u2812:
  2874     00DE  083C               	movf	map@out_min+2,w
  2875     00DF  1C03               	skipc
  2876     00E0  0F3C               	incfsz	map@out_min+2,w
  2877     00E1  28E3               	goto	u2813
  2878     00E2  28E4               	goto	u2814
  2879     00E3                     u2813:
  2880     00E3  02CC               	subwf	??_map+10,f
  2881     00E4                     u2814:
  2882     00E4  083D               	movf	map@out_min+3,w
  2883     00E5  1C03               	skipc
  2884     00E6  0F3D               	incfsz	map@out_min+3,w
  2885     00E7  28E9               	goto	u2815
  2886     00E8  28EA               	goto	u2816
  2887     00E9                     u2815:
  2888     00E9  02CD               	subwf	??_map+11,f
  2889     00EA                     u2816:
  2890     00EA  084D               	movf	??_map+11,w
  2891     00EB  00F7               	movwf	___lmul@multiplicand+3
  2892     00EC  084C               	movf	??_map+10,w
  2893     00ED  00F6               	movwf	___lmul@multiplicand+2
  2894     00EE  084B               	movf	??_map+9,w
  2895     00EF  00F5               	movwf	___lmul@multiplicand+1
  2896     00F0  084A               	movf	??_map+8,w
  2897     00F1  00F4               	movwf	___lmul@multiplicand
  2898     00F2  120A  158A  253B  120A  118A  	fcall	___lmul
  2899     00F7  0873               	movf	?___lmul+3,w
  2900     00F8  00A7               	movwf	___aldiv@dividend+3
  2901     00F9  0872               	movf	?___lmul+2,w
  2902     00FA  00A6               	movwf	___aldiv@dividend+2
  2903     00FB  0871               	movf	?___lmul+1,w
  2904     00FC  00A5               	movwf	___aldiv@dividend+1
  2905     00FD  0870               	movf	?___lmul,w
  2906     00FE  00A4               	movwf	___aldiv@dividend
  2907     00FF  120A  158A  26D9   	fcall	___aldiv
  2908     0102  0820               	movf	?___aldiv,w
  2909     0103  073A               	addwf	map@out_min,w
  2910     0104  00CE               	movwf	??_map+12
  2911     0105  3000               	movlw	0
  2912     0106  1803               	skipnc
  2913     0107  3001               	movlw	1
  2914     0108  0721               	addwf	?___aldiv+1,w
  2915     0109  01D0               	clrf	??_map+14
  2916     010A  1803               	skipnc
  2917     010B  0AD0               	incf	??_map+14,f
  2918     010C  073B               	addwf	map@out_min+1,w
  2919     010D  00CF               	movwf	??_map+13
  2920     010E  1803               	skipnc
  2921     010F  0AD0               	incf	??_map+14,f
  2922     0110  0822               	movf	?___aldiv+2,w
  2923     0111  0750               	addwf	??_map+14,w
  2924     0112  01D1               	clrf	??_map+15
  2925     0113  1803               	skipnc
  2926     0114  0AD1               	incf	??_map+15,f
  2927     0115  073C               	addwf	map@out_min+2,w
  2928     0116  00D0               	movwf	??_map+14
  2929     0117  1803               	skipnc
  2930     0118  0AD1               	incf	??_map+15,f
  2931     0119  0823               	movf	?___aldiv+3,w
  2932     011A  0751               	addwf	??_map+15,w
  2933     011B  073D               	addwf	map@out_min+3,w
  2934     011C  00D1               	movwf	??_map+15
  2935     011D  0851               	movf	??_map+15,w
  2936     011E  00B1               	movwf	?_map+3
  2937     011F  0850               	movf	??_map+14,w
  2938     0120  00B0               	movwf	?_map+2
  2939     0121  084F               	movf	??_map+13,w
  2940     0122  00AF               	movwf	?_map+1
  2941     0123  084E               	movf	??_map+12,w
  2942     0124  00AE               	movwf	?_map
  2943     0125  0008               	return
  2944     0126                     __end_of_map:
  2945                           
  2946                           	psect	text15
  2947     0D3B                     __ptext15:	
  2948 ;; *************** function ___lmul *****************
  2949 ;; Defined at:
  2950 ;;		line 15 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul32.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  multiplier      4    0[COMMON] unsigned long 
  2953 ;;  multiplicand    4    4[COMMON] unsigned long 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  product         4    9[COMMON] unsigned long 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  4    0[COMMON] unsigned long 
  2958 ;; Registers used:
  2959 ;;		wreg, status,2, status,0
  2960 ;; Tracked objects:
  2961 ;;		On entry : 300/0
  2962 ;;		On exit  : 300/0
  2963 ;;		Unchanged: 300/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2965 ;;      Params:         8       0       0       0       0
  2966 ;;      Locals:         4       0       0       0       0
  2967 ;;      Temps:          1       0       0       0       0
  2968 ;;      Totals:        13       0       0       0       0
  2969 ;;Total ram usage:       13 bytes
  2970 ;; Hardware stack levels used: 1
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_map
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978     0D3B                     ___lmul:	
  2979                           ;psect for function ___lmul
  2980                           
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2984     0D3B  3000               	movlw	0
  2985     0D3C  00FC               	movwf	___lmul@product+3
  2986     0D3D  3000               	movlw	0
  2987     0D3E  00FB               	movwf	___lmul@product+2
  2988     0D3F  3000               	movlw	0
  2989     0D40  00FA               	movwf	___lmul@product+1
  2990     0D41  3000               	movlw	0
  2991     0D42  00F9               	movwf	___lmul@product
  2992     0D43                     l1664:
  2993     0D43  1C70               	btfss	___lmul@multiplier,0
  2994     0D44  2D59               	goto	l1668
  2995     0D45  0874               	movf	___lmul@multiplicand,w
  2996     0D46  07F9               	addwf	___lmul@product,f
  2997     0D47  0875               	movf	___lmul@multiplicand+1,w
  2998     0D48  1103               	clrz
  2999     0D49  1803               	skipnc
  3000     0D4A  3E01               	addlw	1
  3001     0D4B  1D03               	btfss	3,2
  3002     0D4C  07FA               	addwf	___lmul@product+1,f
  3003     0D4D  0876               	movf	___lmul@multiplicand+2,w
  3004     0D4E  1103               	clrz
  3005     0D4F  1803               	skipnc
  3006     0D50  3E01               	addlw	1
  3007     0D51  1D03               	btfss	3,2
  3008     0D52  07FB               	addwf	___lmul@product+2,f
  3009     0D53  0877               	movf	___lmul@multiplicand+3,w
  3010     0D54  1103               	clrz
  3011     0D55  1803               	skipnc
  3012     0D56  3E01               	addlw	1
  3013     0D57  1D03               	btfss	3,2
  3014     0D58  07FC               	addwf	___lmul@product+3,f
  3015     0D59                     l1668:
  3016     0D59  3001               	movlw	1
  3017     0D5A  00F8               	movwf	??___lmul
  3018     0D5B                     u2575:
  3019     0D5B  1003               	clrc
  3020     0D5C  0DF4               	rlf	___lmul@multiplicand,f
  3021     0D5D  0DF5               	rlf	___lmul@multiplicand+1,f
  3022     0D5E  0DF6               	rlf	___lmul@multiplicand+2,f
  3023     0D5F  0DF7               	rlf	___lmul@multiplicand+3,f
  3024     0D60  0BF8               	decfsz	??___lmul,f
  3025     0D61  2D5B               	goto	u2575
  3026     0D62  3001               	movlw	1
  3027     0D63                     u2585:
  3028     0D63  1003               	clrc
  3029     0D64  0CF3               	rrf	___lmul@multiplier+3,f
  3030     0D65  0CF2               	rrf	___lmul@multiplier+2,f
  3031     0D66  0CF1               	rrf	___lmul@multiplier+1,f
  3032     0D67  0CF0               	rrf	___lmul@multiplier,f
  3033     0D68  3EFF               	addlw	-1
  3034     0D69  1D03               	skipz
  3035     0D6A  2D63               	goto	u2585
  3036     0D6B  0873               	movf	___lmul@multiplier+3,w
  3037     0D6C  0472               	iorwf	___lmul@multiplier+2,w
  3038     0D6D  0471               	iorwf	___lmul@multiplier+1,w
  3039     0D6E  0470               	iorwf	___lmul@multiplier,w
  3040     0D6F  1D03               	skipz
  3041     0D70  2D43               	goto	l1664
  3042     0D71  087C               	movf	___lmul@product+3,w
  3043     0D72  00F3               	movwf	?___lmul+3
  3044     0D73  087B               	movf	___lmul@product+2,w
  3045     0D74  00F2               	movwf	?___lmul+2
  3046     0D75  087A               	movf	___lmul@product+1,w
  3047     0D76  00F1               	movwf	?___lmul+1
  3048     0D77  0879               	movf	___lmul@product,w
  3049     0D78  00F0               	movwf	?___lmul
  3050     0D79  0008               	return
  3051     0D7A                     __end_of___lmul:
  3052                           
  3053                           	psect	text16
  3054     0ED9                     __ptext16:	
  3055 ;; *************** function ___aldiv *****************
  3056 ;; Defined at:
  3057 ;;		line 5 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/aldiv.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  divisor         4    0[BANK0 ] long 
  3060 ;;  dividend        4    4[BANK0 ] long 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  quotient        4   10[BANK0 ] long 
  3063 ;;  sign            1    9[BANK0 ] unsigned char 
  3064 ;;  counter         1    8[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  4    0[BANK0 ] long 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0
  3069 ;; Tracked objects:
  3070 ;;		On entry : 300/0
  3071 ;;		On exit  : 300/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3074 ;;      Params:         0       8       0       0       0
  3075 ;;      Locals:         0       6       0       0       0
  3076 ;;      Temps:          1       0       0       0       0
  3077 ;;      Totals:         1      14       0       0       0
  3078 ;;Total ram usage:       15 bytes
  3079 ;; Hardware stack levels used: 1
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_map
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087     0ED9                     ___aldiv:	
  3088                           ;psect for function ___aldiv
  3089                           
  3090                           
  3091                           ;incstack = 0
  3092                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3093     0ED9  01A9               	clrf	___aldiv@sign
  3094     0EDA  1FA3               	btfss	___aldiv@divisor+3,7
  3095     0EDB  2EE9               	goto	l283
  3096     0EDC  09A0               	comf	___aldiv@divisor,f
  3097     0EDD  09A1               	comf	___aldiv@divisor+1,f
  3098     0EDE  09A2               	comf	___aldiv@divisor+2,f
  3099     0EDF  09A3               	comf	___aldiv@divisor+3,f
  3100     0EE0  0AA0               	incf	___aldiv@divisor,f
  3101     0EE1  1903               	skipnz
  3102     0EE2  0AA1               	incf	___aldiv@divisor+1,f
  3103     0EE3  1903               	skipnz
  3104     0EE4  0AA2               	incf	___aldiv@divisor+2,f
  3105     0EE5  1903               	skipnz
  3106     0EE6  0AA3               	incf	___aldiv@divisor+3,f
  3107     0EE7  01A9               	clrf	___aldiv@sign
  3108     0EE8  0AA9               	incf	___aldiv@sign,f
  3109     0EE9                     l283:
  3110     0EE9  1FA7               	btfss	___aldiv@dividend+3,7
  3111     0EEA  2EFA               	goto	l1686
  3112     0EEB  09A4               	comf	___aldiv@dividend,f
  3113     0EEC  09A5               	comf	___aldiv@dividend+1,f
  3114     0EED  09A6               	comf	___aldiv@dividend+2,f
  3115     0EEE  09A7               	comf	___aldiv@dividend+3,f
  3116     0EEF  0AA4               	incf	___aldiv@dividend,f
  3117     0EF0  1903               	skipnz
  3118     0EF1  0AA5               	incf	___aldiv@dividend+1,f
  3119     0EF2  1903               	skipnz
  3120     0EF3  0AA6               	incf	___aldiv@dividend+2,f
  3121     0EF4  1903               	skipnz
  3122     0EF5  0AA7               	incf	___aldiv@dividend+3,f
  3123     0EF6  3001               	movlw	1
  3124     0EF7  00FD               	movwf	??___aldiv
  3125     0EF8  087D               	movf	??___aldiv,w
  3126     0EF9  06A9               	xorwf	___aldiv@sign,f
  3127     0EFA                     l1686:
  3128     0EFA  3000               	movlw	0
  3129     0EFB  00AD               	movwf	___aldiv@quotient+3
  3130     0EFC  3000               	movlw	0
  3131     0EFD  00AC               	movwf	___aldiv@quotient+2
  3132     0EFE  3000               	movlw	0
  3133     0EFF  00AB               	movwf	___aldiv@quotient+1
  3134     0F00  3000               	movlw	0
  3135     0F01  00AA               	movwf	___aldiv@quotient
  3136     0F02  0823               	movf	___aldiv@divisor+3,w
  3137     0F03  0422               	iorwf	___aldiv@divisor+2,w
  3138     0F04  0421               	iorwf	___aldiv@divisor+1,w
  3139     0F05  0420               	iorwf	___aldiv@divisor,w
  3140     0F06  1903               	skipnz
  3141     0F07  2F4F               	goto	l1708
  3142     0F08  01A8               	clrf	___aldiv@counter
  3143     0F09  0AA8               	incf	___aldiv@counter,f
  3144     0F0A                     l1694:
  3145     0F0A  1BA3               	btfsc	___aldiv@divisor+3,7
  3146     0F0B  2F1A               	goto	l1696
  3147     0F0C  3001               	movlw	1
  3148     0F0D  00FD               	movwf	??___aldiv
  3149     0F0E                     u2635:
  3150     0F0E  1003               	clrc
  3151     0F0F  0DA0               	rlf	___aldiv@divisor,f
  3152     0F10  0DA1               	rlf	___aldiv@divisor+1,f
  3153     0F11  0DA2               	rlf	___aldiv@divisor+2,f
  3154     0F12  0DA3               	rlf	___aldiv@divisor+3,f
  3155     0F13  0BFD               	decfsz	??___aldiv,f
  3156     0F14  2F0E               	goto	u2635
  3157     0F15  3001               	movlw	1
  3158     0F16  00FD               	movwf	??___aldiv
  3159     0F17  087D               	movf	??___aldiv,w
  3160     0F18  07A8               	addwf	___aldiv@counter,f
  3161     0F19  2F0A               	goto	l1694
  3162     0F1A                     l1696:
  3163     0F1A  3001               	movlw	1
  3164     0F1B  00FD               	movwf	??___aldiv
  3165     0F1C                     u2655:
  3166     0F1C  1003               	clrc
  3167     0F1D  0DAA               	rlf	___aldiv@quotient,f
  3168     0F1E  0DAB               	rlf	___aldiv@quotient+1,f
  3169     0F1F  0DAC               	rlf	___aldiv@quotient+2,f
  3170     0F20  0DAD               	rlf	___aldiv@quotient+3,f
  3171     0F21  0BFD               	decfsz	??___aldiv,f
  3172     0F22  2F1C               	goto	u2655
  3173     0F23  0823               	movf	___aldiv@divisor+3,w
  3174     0F24  0227               	subwf	___aldiv@dividend+3,w
  3175     0F25  1D03               	skipz
  3176     0F26  2F31               	goto	u2665
  3177     0F27  0822               	movf	___aldiv@divisor+2,w
  3178     0F28  0226               	subwf	___aldiv@dividend+2,w
  3179     0F29  1D03               	skipz
  3180     0F2A  2F31               	goto	u2665
  3181     0F2B  0821               	movf	___aldiv@divisor+1,w
  3182     0F2C  0225               	subwf	___aldiv@dividend+1,w
  3183     0F2D  1D03               	skipz
  3184     0F2E  2F31               	goto	u2665
  3185     0F2F  0820               	movf	___aldiv@divisor,w
  3186     0F30  0224               	subwf	___aldiv@dividend,w
  3187     0F31                     u2665:
  3188     0F31  1C03               	skipc
  3189     0F32  2F42               	goto	l1704
  3190     0F33  0820               	movf	___aldiv@divisor,w
  3191     0F34  02A4               	subwf	___aldiv@dividend,f
  3192     0F35  0821               	movf	___aldiv@divisor+1,w
  3193     0F36  1C03               	skipc
  3194     0F37  0F21               	incfsz	___aldiv@divisor+1,w
  3195     0F38  02A5               	subwf	___aldiv@dividend+1,f
  3196     0F39  0822               	movf	___aldiv@divisor+2,w
  3197     0F3A  1C03               	skipc
  3198     0F3B  0F22               	incfsz	___aldiv@divisor+2,w
  3199     0F3C  02A6               	subwf	___aldiv@dividend+2,f
  3200     0F3D  0823               	movf	___aldiv@divisor+3,w
  3201     0F3E  1C03               	skipc
  3202     0F3F  0F23               	incfsz	___aldiv@divisor+3,w
  3203     0F40  02A7               	subwf	___aldiv@dividend+3,f
  3204     0F41  142A               	bsf	___aldiv@quotient,0
  3205     0F42                     l1704:
  3206     0F42  3001               	movlw	1
  3207     0F43                     u2675:
  3208     0F43  1003               	clrc
  3209     0F44  0CA3               	rrf	___aldiv@divisor+3,f
  3210     0F45  0CA2               	rrf	___aldiv@divisor+2,f
  3211     0F46  0CA1               	rrf	___aldiv@divisor+1,f
  3212     0F47  0CA0               	rrf	___aldiv@divisor,f
  3213     0F48  3EFF               	addlw	-1
  3214     0F49  1D03               	skipz
  3215     0F4A  2F43               	goto	u2675
  3216     0F4B  3001               	movlw	1
  3217     0F4C  02A8               	subwf	___aldiv@counter,f
  3218     0F4D  1D03               	btfss	3,2
  3219     0F4E  2F1A               	goto	l1696
  3220     0F4F                     l1708:
  3221     0F4F  0829               	movf	___aldiv@sign,w
  3222     0F50  1903               	btfsc	3,2
  3223     0F51  2F5D               	goto	l1712
  3224     0F52  09AA               	comf	___aldiv@quotient,f
  3225     0F53  09AB               	comf	___aldiv@quotient+1,f
  3226     0F54  09AC               	comf	___aldiv@quotient+2,f
  3227     0F55  09AD               	comf	___aldiv@quotient+3,f
  3228     0F56  0AAA               	incf	___aldiv@quotient,f
  3229     0F57  1903               	skipnz
  3230     0F58  0AAB               	incf	___aldiv@quotient+1,f
  3231     0F59  1903               	skipnz
  3232     0F5A  0AAC               	incf	___aldiv@quotient+2,f
  3233     0F5B  1903               	skipnz
  3234     0F5C  0AAD               	incf	___aldiv@quotient+3,f
  3235     0F5D                     l1712:
  3236     0F5D  082D               	movf	___aldiv@quotient+3,w
  3237     0F5E  00A3               	movwf	?___aldiv+3
  3238     0F5F  082C               	movf	___aldiv@quotient+2,w
  3239     0F60  00A2               	movwf	?___aldiv+2
  3240     0F61  082B               	movf	___aldiv@quotient+1,w
  3241     0F62  00A1               	movwf	?___aldiv+1
  3242     0F63  082A               	movf	___aldiv@quotient,w
  3243     0F64  00A0               	movwf	?___aldiv
  3244     0F65  0008               	return
  3245     0F66                     __end_of___aldiv:
  3246                           
  3247                           	psect	text17
  3248     0AEA                     __ptext17:	
  3249 ;; *************** function _initRPM *****************
  3250 ;; Defined at:
  3251 ;;		line 30 in file "newmain.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;		None
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, status,2, status,0
  3260 ;; Tracked objects:
  3261 ;;		On entry : B00/100
  3262 ;;		On exit  : B00/0
  3263 ;;		Unchanged: 800/0
  3264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3265 ;;      Params:         0       0       0       0       0
  3266 ;;      Locals:         0       0       0       0       0
  3267 ;;      Temps:          0       0       0       0       0
  3268 ;;      Totals:         0       0       0       0       0
  3269 ;;Total ram usage:        0 bytes
  3270 ;; Hardware stack levels used: 1
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_main
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278     0AEA                     _initRPM:	
  3279                           ;psect for function _initRPM
  3280                           
  3281                           
  3282                           ;newmain.c: 32:     INTCONbits.TMR0IF = 0;
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in _initRPM: [wreg+status,2+status,0]
  3286     0AEA  1406               	bsf	6,0	;volatile
  3287                           
  3288                           ;newmain.c: 33: 
  3289     0AEB  1703               	bsf	3,6	;RP1=1, select bank3
  3290     0AEC  0189               	clrf	9	;volatile
  3291                           
  3292                           ;newmain.c: 35:         currentState = PORTBbits.RB0;
  3293     0AED  1303               	bcf	3,6	;RP1=0, select bank1
  3294     0AEE  1281               	bcf	1,5	;volatile
  3295                           
  3296                           ;newmain.c: 36: 
  3297     0AEF  1181               	bcf	1,3	;volatile
  3298                           
  3299                           ;newmain.c: 37:         if (currentState != lastState && currentState == 1) {
  3300     0AF0  3007               	movlw	7
  3301     0AF1  0481               	iorwf	1,f	;volatile
  3302                           
  3303                           ;newmain.c: 38:             pulseCount++;
  3304     0AF2  1283               	bcf	3,5	;RP0=0, select bank0
  3305     0AF3  0181               	clrf	1	;volatile
  3306     0AF4  0008               	return
  3307     0AF5                     __end_of_initRPM:
  3308                           
  3309                           	psect	text18
  3310     0B00                     __ptext18:	
  3311 ;; *************** function _initPWM *****************
  3312 ;; Defined at:
  3313 ;;		line 19 in file "newmain.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2
  3322 ;; Tracked objects:
  3323 ;;		On entry : B00/0
  3324 ;;		On exit  : B00/0
  3325 ;;		Unchanged: 800/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3327 ;;      Params:         0       0       0       0       0
  3328 ;;      Locals:         0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0
  3330 ;;      Totals:         0       0       0       0       0
  3331 ;;Total ram usage:        0 bytes
  3332 ;; Hardware stack levels used: 1
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340     0B00                     _initPWM:	
  3341                           ;psect for function _initPWM
  3342                           
  3343                           
  3344                           ;newmain.c: 20:     OPTION_REGbits.T0CS = 0;
  3345                           
  3346                           ;incstack = 0
  3347                           ; Regs used in _initPWM: [wreg+status,2]
  3348     0B00  3007               	movlw	7
  3349     0B01  0092               	movwf	18	;volatile
  3350                           
  3351                           ;newmain.c: 21:     OPTION_REGbits.PSA = 0;
  3352     0B02  30FF               	movlw	255
  3353     0B03  1683               	bsf	3,5	;RP0=1, select bank1
  3354     0B04  0092               	movwf	18	;volatile
  3355                           
  3356                           ;newmain.c: 22:     OPTION_REGbits.PS = 0b111;
  3357     0B05  300C               	movlw	12
  3358     0B06  1283               	bcf	3,5	;RP0=0, select bank0
  3359     0B07  0097               	movwf	23	;volatile
  3360                           
  3361                           ;newmain.c: 23:     TMR0 = 0;
  3362     0B08  0195               	clrf	21	;volatile
  3363                           
  3364                           ;newmain.c: 24: }
  3365     0B09  3004               	movlw	4
  3366     0B0A  0092               	movwf	18	;volatile
  3367     0B0B  0008               	return
  3368     0B0C                     __end_of_initPWM:
  3369                           
  3370                           	psect	text19
  3371     0B0C                     __ptext19:	
  3372 ;; *************** function _initADC *****************
  3373 ;; Defined at:
  3374 ;;		line 61 in file "newmain.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, status,2
  3383 ;; Tracked objects:
  3384 ;;		On entry : B00/0
  3385 ;;		On exit  : B00/100
  3386 ;;		Unchanged: 800/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3388 ;;      Params:         0       0       0       0       0
  3389 ;;      Locals:         0       0       0       0       0
  3390 ;;      Temps:          0       0       0       0       0
  3391 ;;      Totals:         0       0       0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used: 1
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401     0B0C                     _initADC:	
  3402                           ;psect for function _initADC
  3403                           
  3404                           
  3405                           ;newmain.c: 62: }
  3406                           
  3407                           ;incstack = 0
  3408                           ; Regs used in _initADC: [wreg+status,2]
  3409     0B0C  1683               	bsf	3,5	;RP0=1, select bank1
  3410     0B0D  0187               	clrf	7	;volatile
  3411                           
  3412                           ;newmain.c: 63: 
  3413     0B0E  3001               	movlw	1
  3414     0B0F  1703               	bsf	3,6	;RP1=1, select bank3
  3415     0B10  0088               	movwf	8	;volatile
  3416                           
  3417                           ;newmain.c: 64: 
  3418     0B11  3001               	movlw	1
  3419     0B12  1283               	bcf	3,5	;RP0=0, select bank0
  3420     0B13  1303               	bcf	3,6	;RP1=0, select bank0
  3421     0B14  009F               	movwf	31	;volatile
  3422                           
  3423                           ;newmain.c: 65: void main() {
  3424     0B15  3080               	movlw	128
  3425     0B16  1683               	bsf	3,5	;RP0=1, select bank1
  3426     0B17  009F               	movwf	31	;volatile
  3427     0B18  0008               	return
  3428     0B19                     __end_of_initADC:
  3429                           
  3430                           	psect	text20
  3431     0BC5                     __ptext20:	
  3432 ;; *************** function _countPulses *****************
  3433 ;; Defined at:
  3434 ;;		line 41 in file "newmain.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  pulseCount      2    2[COMMON] unsigned int 
  3439 ;;  currentState    1    5[COMMON] unsigned char 
  3440 ;;  lastState       1    4[COMMON] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  2    0[COMMON] unsigned int 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0
  3445 ;; Tracked objects:
  3446 ;;		On entry : 300/0
  3447 ;;		On exit  : 300/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3450 ;;      Params:         2       0       0       0       0
  3451 ;;      Locals:         4       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0
  3453 ;;      Totals:         6       0       0       0       0
  3454 ;;Total ram usage:        6 bytes
  3455 ;; Hardware stack levels used: 1
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_main
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463     0BC5                     _countPulses:	
  3464                           ;psect for function _countPulses
  3465                           
  3466                           
  3467                           ;newmain.c: 42: 
  3468                           
  3469                           ;incstack = 0
  3470                           ; Regs used in _countPulses: [wreg+status,2+status,0]
  3471     0BC5  01F2               	clrf	countPulses@pulseCount
  3472     0BC6  01F3               	clrf	countPulses@pulseCount+1
  3473                           
  3474                           ;newmain.c: 43:     return pulseCount;
  3475     0BC7  3000               	movlw	0
  3476     0BC8  1806               	btfsc	6,0	;volatile
  3477     0BC9  3001               	movlw	1
  3478     0BCA  00F4               	movwf	countPulses@lastState
  3479                           
  3480                           ;newmain.c: 44: };newmain.c: 46: void initADC() {
  3481     0BCB  0181               	clrf	1	;volatile
  3482                           
  3483                           ;newmain.c: 47:     TRISC = 0;
  3484     0BCC  110B               	bcf	11,2	;volatile
  3485     0BCD                     l1822:	
  3486                           ;newmain.c: 49:     ADCON0 = 0x01;
  3487                           
  3488                           
  3489                           ;newmain.c: 49:     ADCON0 = 0x01;
  3490     0BCD  190B               	btfsc	11,2	;volatile
  3491     0BCE  2BE3               	goto	l1824
  3492                           
  3493                           ;newmain.c: 50:     ADCON1 = 0x80;
  3494     0BCF  3000               	movlw	0
  3495     0BD0  1806               	btfsc	6,0	;volatile
  3496     0BD1  3001               	movlw	1
  3497     0BD2  00F5               	movwf	countPulses@currentState
  3498                           
  3499                           ;newmain.c: 52: 
  3500     0BD3  0875               	movf	countPulses@currentState,w
  3501     0BD4  0674               	xorwf	countPulses@lastState,w
  3502     0BD5  1903               	skipnz
  3503     0BD6  2BE0               	goto	l108
  3504     0BD7  0375               	decf	countPulses@currentState,w
  3505     0BD8  1D03               	btfss	3,2
  3506     0BD9  2BE0               	goto	l108
  3507                           
  3508                           ;newmain.c: 53: unsigned int readADC() {
  3509     0BDA  3001               	movlw	1
  3510     0BDB  07F2               	addwf	countPulses@pulseCount,f
  3511     0BDC  1803               	skipnc
  3512     0BDD  0AF3               	incf	countPulses@pulseCount+1,f
  3513     0BDE  3000               	movlw	0
  3514     0BDF  07F3               	addwf	countPulses@pulseCount+1,f
  3515     0BE0                     l108:	
  3516                           ;newmain.c: 54:     ADCON0bits.GO = 1;
  3517                           
  3518                           
  3519                           ;newmain.c: 55:     while (ADCON0bits.GO_nDONE);
  3520     0BE0  0875               	movf	countPulses@currentState,w
  3521     0BE1  00F4               	movwf	countPulses@lastState
  3522     0BE2  2BCD               	goto	l1822
  3523     0BE3                     l1824:
  3524                           
  3525                           ;newmain.c: 58: 
  3526     0BE3  0873               	movf	countPulses@pulseCount+1,w
  3527     0BE4  00F1               	movwf	?_countPulses+1
  3528     0BE5  0872               	movf	countPulses@pulseCount,w
  3529     0BE6  00F0               	movwf	?_countPulses
  3530     0BE7  0008               	return
  3531     0BE8                     __end_of_countPulses:
  3532                           
  3533                           	psect	text21
  3534     0126                     __ptext21:	
  3535 ;; *************** function ___xxtofl *****************
  3536 ;; Defined at:
  3537 ;;		line 10 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/xxtofl.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  sign            1    wreg     unsigned char 
  3540 ;;  val             4    0[COMMON] long 
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;  sign            1    8[COMMON] unsigned char 
  3543 ;;  arg             4   10[COMMON] unsigned long 
  3544 ;;  exp             1    9[COMMON] unsigned char 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  4    0[COMMON] unsigned char 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0
  3549 ;; Tracked objects:
  3550 ;;		On entry : 300/0
  3551 ;;		On exit  : 300/0
  3552 ;;		Unchanged: 300/0
  3553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3554 ;;      Params:         4       0       0       0       0
  3555 ;;      Locals:         6       0       0       0       0
  3556 ;;      Temps:          4       0       0       0       0
  3557 ;;      Totals:        14       0       0       0       0
  3558 ;;Total ram usage:       14 bytes
  3559 ;; Hardware stack levels used: 1
  3560 ;; This function calls:
  3561 ;;		Nothing
  3562 ;; This function is called by:
  3563 ;;		_main
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567     0126                     ___xxtofl:	
  3568                           ;psect for function ___xxtofl
  3569                           
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  3573                           ;___xxtofl@sign stored from wreg
  3574     0126  00F8               	movwf	___xxtofl@sign
  3575     0127  0878               	movf	___xxtofl@sign,w
  3576     0128  1D03               	btfss	3,2
  3577     0129  1FF3               	btfss	___xxtofl@val+3,7
  3578     012A  293B               	goto	l2040
  3579     012B  0970               	comf	___xxtofl@val,w
  3580     012C  00FA               	movwf	___xxtofl@arg
  3581     012D  0971               	comf	___xxtofl@val+1,w
  3582     012E  00FB               	movwf	___xxtofl@arg+1
  3583     012F  0972               	comf	___xxtofl@val+2,w
  3584     0130  00FC               	movwf	___xxtofl@arg+2
  3585     0131  0973               	comf	___xxtofl@val+3,w
  3586     0132  00FD               	movwf	___xxtofl@arg+3
  3587     0133  0AFA               	incf	___xxtofl@arg,f
  3588     0134  1903               	skipnz
  3589     0135  0AFB               	incf	___xxtofl@arg+1,f
  3590     0136  1903               	skipnz
  3591     0137  0AFC               	incf	___xxtofl@arg+2,f
  3592     0138  1903               	skipnz
  3593     0139  0AFD               	incf	___xxtofl@arg+3,f
  3594     013A  2943               	goto	l659
  3595     013B                     l2040:
  3596     013B  0873               	movf	___xxtofl@val+3,w
  3597     013C  00FD               	movwf	___xxtofl@arg+3
  3598     013D  0872               	movf	___xxtofl@val+2,w
  3599     013E  00FC               	movwf	___xxtofl@arg+2
  3600     013F  0871               	movf	___xxtofl@val+1,w
  3601     0140  00FB               	movwf	___xxtofl@arg+1
  3602     0141  0870               	movf	___xxtofl@val,w
  3603     0142  00FA               	movwf	___xxtofl@arg
  3604     0143                     l659:
  3605     0143  0873               	movf	___xxtofl@val+3,w
  3606     0144  0472               	iorwf	___xxtofl@val+2,w
  3607     0145  0471               	iorwf	___xxtofl@val+1,w
  3608     0146  0470               	iorwf	___xxtofl@val,w
  3609     0147  1D03               	skipz
  3610     0148  2952               	goto	l2046
  3611     0149  3000               	movlw	0
  3612     014A  00F3               	movwf	?___xxtofl+3
  3613     014B  3000               	movlw	0
  3614     014C  00F2               	movwf	?___xxtofl+2
  3615     014D  3000               	movlw	0
  3616     014E  00F1               	movwf	?___xxtofl+1
  3617     014F  3000               	movlw	0
  3618     0150  00F0               	movwf	?___xxtofl
  3619     0151  0008               	return
  3620     0152                     l2046:
  3621     0152  3096               	movlw	150
  3622     0153  00F9               	movwf	___xxtofl@exp
  3623     0154                     l2050:
  3624     0154  30FE               	movlw	254
  3625     0155  057D               	andwf	___xxtofl@arg+3,w
  3626     0156  1903               	btfsc	3,2
  3627     0157  2981               	goto	l665
  3628     0158  3001               	movlw	1
  3629     0159  00F4               	movwf	??___xxtofl
  3630     015A  0874               	movf	??___xxtofl,w
  3631     015B  07F9               	addwf	___xxtofl@exp,f
  3632     015C  3001               	movlw	1
  3633     015D                     u3315:
  3634     015D  1003               	clrc
  3635     015E  0CFD               	rrf	___xxtofl@arg+3,f
  3636     015F  0CFC               	rrf	___xxtofl@arg+2,f
  3637     0160  0CFB               	rrf	___xxtofl@arg+1,f
  3638     0161  0CFA               	rrf	___xxtofl@arg,f
  3639     0162  3EFF               	addlw	-1
  3640     0163  1D03               	skipz
  3641     0164  295D               	goto	u3315
  3642     0165  2954               	goto	l2050
  3643     0166                     l2052:
  3644     0166  3001               	movlw	1
  3645     0167  00F4               	movwf	??___xxtofl
  3646     0168  0874               	movf	??___xxtofl,w
  3647     0169  07F9               	addwf	___xxtofl@exp,f
  3648     016A  3001               	movlw	1
  3649     016B  07FA               	addwf	___xxtofl@arg,f
  3650     016C  3000               	movlw	0
  3651     016D  1803               	skipnc
  3652     016E  3001               	movlw	1
  3653     016F  07FB               	addwf	___xxtofl@arg+1,f
  3654     0170  3000               	movlw	0
  3655     0171  1803               	skipnc
  3656     0172  3001               	movlw	1
  3657     0173  07FC               	addwf	___xxtofl@arg+2,f
  3658     0174  3000               	movlw	0
  3659     0175  1803               	skipnc
  3660     0176  3001               	movlw	1
  3661     0177  07FD               	addwf	___xxtofl@arg+3,f
  3662     0178  3001               	movlw	1
  3663     0179                     u3335:
  3664     0179  1003               	clrc
  3665     017A  0CFD               	rrf	___xxtofl@arg+3,f
  3666     017B  0CFC               	rrf	___xxtofl@arg+2,f
  3667     017C  0CFB               	rrf	___xxtofl@arg+1,f
  3668     017D  0CFA               	rrf	___xxtofl@arg,f
  3669     017E  3EFF               	addlw	-1
  3670     017F  1D03               	skipz
  3671     0180  2979               	goto	u3335
  3672     0181                     l665:
  3673     0181  30FF               	movlw	255
  3674     0182  057D               	andwf	___xxtofl@arg+3,w
  3675     0183  1903               	btfsc	3,2
  3676     0184  2995               	goto	l2060
  3677     0185  2966               	goto	l2052
  3678     0186                     l2062:
  3679     0186  3002               	movlw	2
  3680     0187  0279               	subwf	___xxtofl@exp,w
  3681     0188  1C03               	btfss	3,0
  3682     0189  2997               	goto	l672
  3683     018A  3001               	movlw	1
  3684     018B  02F9               	subwf	___xxtofl@exp,f
  3685     018C  3001               	movlw	1
  3686     018D  00F4               	movwf	??___xxtofl
  3687     018E                     u3355:
  3688     018E  1003               	clrc
  3689     018F  0DFA               	rlf	___xxtofl@arg,f
  3690     0190  0DFB               	rlf	___xxtofl@arg+1,f
  3691     0191  0DFC               	rlf	___xxtofl@arg+2,f
  3692     0192  0DFD               	rlf	___xxtofl@arg+3,f
  3693     0193  0BF4               	decfsz	??___xxtofl,f
  3694     0194  298E               	goto	u3355
  3695     0195                     l2060:
  3696     0195  1FFC               	btfss	___xxtofl@arg+2,7
  3697     0196  2986               	goto	l2062
  3698     0197                     l672:
  3699     0197  1879               	btfsc	___xxtofl@exp,0
  3700     0198  29A1               	goto	l673
  3701     0199  30FF               	movlw	255
  3702     019A  05FA               	andwf	___xxtofl@arg,f
  3703     019B  30FF               	movlw	255
  3704     019C  05FB               	andwf	___xxtofl@arg+1,f
  3705     019D  307F               	movlw	127
  3706     019E  05FC               	andwf	___xxtofl@arg+2,f
  3707     019F  30FF               	movlw	255
  3708     01A0  05FD               	andwf	___xxtofl@arg+3,f
  3709     01A1                     l673:
  3710     01A1  1003               	clrc
  3711     01A2  0CF9               	rrf	___xxtofl@exp,f
  3712     01A3  0879               	movf	___xxtofl@exp,w
  3713     01A4  00F4               	movwf	??___xxtofl
  3714     01A5  01F5               	clrf	??___xxtofl+1
  3715     01A6  01F6               	clrf	??___xxtofl+2
  3716     01A7  01F7               	clrf	??___xxtofl+3
  3717     01A8  3018               	movlw	24
  3718     01A9                     u3395:
  3719     01A9  1003               	clrc
  3720     01AA  0DF4               	rlf	??___xxtofl,f
  3721     01AB  0DF5               	rlf	??___xxtofl+1,f
  3722     01AC  0DF6               	rlf	??___xxtofl+2,f
  3723     01AD  0DF7               	rlf	??___xxtofl+3,f
  3724     01AE  3EFF               	addlw	-1
  3725     01AF  1D03               	skipz
  3726     01B0  29A9               	goto	u3395
  3727     01B1  0874               	movf	??___xxtofl,w
  3728     01B2  04FA               	iorwf	___xxtofl@arg,f
  3729     01B3  0875               	movf	??___xxtofl+1,w
  3730     01B4  04FB               	iorwf	___xxtofl@arg+1,f
  3731     01B5  0876               	movf	??___xxtofl+2,w
  3732     01B6  04FC               	iorwf	___xxtofl@arg+2,f
  3733     01B7  0877               	movf	??___xxtofl+3,w
  3734     01B8  04FD               	iorwf	___xxtofl@arg+3,f
  3735     01B9  0878               	movf	___xxtofl@sign,w
  3736     01BA  1D03               	btfss	3,2
  3737     01BB  1FF3               	btfss	___xxtofl@val+3,7
  3738     01BC  29BE               	goto	l2074
  3739     01BD  17FD               	bsf	___xxtofl@arg+3,7
  3740     01BE                     l2074:
  3741     01BE  087D               	movf	___xxtofl@arg+3,w
  3742     01BF  00F3               	movwf	?___xxtofl+3
  3743     01C0  087C               	movf	___xxtofl@arg+2,w
  3744     01C1  00F2               	movwf	?___xxtofl+2
  3745     01C2  087B               	movf	___xxtofl@arg+1,w
  3746     01C3  00F1               	movwf	?___xxtofl+1
  3747     01C4  087A               	movf	___xxtofl@arg,w
  3748     01C5  00F0               	movwf	?___xxtofl
  3749     01C6  0008               	return
  3750     01C7                     __end_of___xxtofl:
  3751                           
  3752                           	psect	text22
  3753     0E72                     __ptext22:	
  3754 ;; *************** function ___fltol *****************
  3755 ;; Defined at:
  3756 ;;		line 43 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/fltol.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  f1              4   26[BANK0 ] unsigned char 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  exp1            1   35[BANK0 ] unsigned char 
  3761 ;;  sign1           1   34[BANK0 ] unsigned char 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  4   26[BANK0 ] long 
  3764 ;; Registers used:
  3765 ;;		wreg, status,2, status,0
  3766 ;; Tracked objects:
  3767 ;;		On entry : 300/0
  3768 ;;		On exit  : 300/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3771 ;;      Params:         0       4       0       0       0
  3772 ;;      Locals:         0       2       0       0       0
  3773 ;;      Temps:          0       4       0       0       0
  3774 ;;      Totals:         0      10       0       0       0
  3775 ;;Total ram usage:       10 bytes
  3776 ;; Hardware stack levels used: 1
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_main
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784     0E72                     ___fltol:	
  3785                           ;psect for function ___fltol
  3786                           
  3787                           
  3788                           ;incstack = 0
  3789                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  3790     0E72  1003               	clrc
  3791     0E73  0D3C               	rlf	___fltol@f1+2,w
  3792     0E74  0D3D               	rlf	___fltol@f1+3,w
  3793     0E75  00C3               	movwf	___fltol@exp1
  3794     0E76  0843               	movf	___fltol@exp1,w
  3795     0E77  1D03               	btfss	3,2
  3796     0E78  2E82               	goto	l1864
  3797     0E79                     l1860:
  3798     0E79  3000               	movlw	0
  3799     0E7A  00BD               	movwf	?___fltol+3
  3800     0E7B  3000               	movlw	0
  3801     0E7C  00BC               	movwf	?___fltol+2
  3802     0E7D  3000               	movlw	0
  3803     0E7E  00BB               	movwf	?___fltol+1
  3804     0E7F  3000               	movlw	0
  3805     0E80  00BA               	movwf	?___fltol
  3806     0E81  0008               	return
  3807     0E82                     l1864:
  3808     0E82  083A               	movf	___fltol@f1,w
  3809     0E83  00BE               	movwf	??___fltol
  3810     0E84  083B               	movf	___fltol@f1+1,w
  3811     0E85  00BF               	movwf	??___fltol+1
  3812     0E86  083C               	movf	___fltol@f1+2,w
  3813     0E87  00C0               	movwf	??___fltol+2
  3814     0E88  083D               	movf	___fltol@f1+3,w
  3815     0E89  00C1               	movwf	??___fltol+3
  3816     0E8A  301F               	movlw	31
  3817     0E8B                     u2835:
  3818     0E8B  1003               	clrc
  3819     0E8C  0CC1               	rrf	??___fltol+3,f
  3820     0E8D  0CC0               	rrf	??___fltol+2,f
  3821     0E8E  0CBF               	rrf	??___fltol+1,f
  3822     0E8F  0CBE               	rrf	??___fltol,f
  3823     0E90  3EFF               	addlw	-1
  3824     0E91  1D03               	skipz
  3825     0E92  2E8B               	goto	u2835
  3826     0E93  083E               	movf	??___fltol,w
  3827     0E94  00C2               	movwf	___fltol@sign1
  3828     0E95  17BC               	bsf	___fltol@f1+2,7
  3829     0E96  30FF               	movlw	255
  3830     0E97  05BA               	andwf	___fltol@f1,f
  3831     0E98  30FF               	movlw	255
  3832     0E99  05BB               	andwf	___fltol@f1+1,f
  3833     0E9A  30FF               	movlw	255
  3834     0E9B  05BC               	andwf	___fltol@f1+2,f
  3835     0E9C  3000               	movlw	0
  3836     0E9D  05BD               	andwf	___fltol@f1+3,f
  3837     0E9E  3096               	movlw	150
  3838     0E9F  02C3               	subwf	___fltol@exp1,f
  3839     0EA0  1FC3               	btfss	___fltol@exp1,7
  3840     0EA1  2EB7               	goto	l1882
  3841     0EA2  0843               	movf	___fltol@exp1,w
  3842     0EA3  3A80               	xorlw	128
  3843     0EA4  3E97               	addlw	151
  3844     0EA5  1C03               	btfss	3,0
  3845     0EA6  2E79               	goto	l1860
  3846     0EA7                     l1880:
  3847     0EA7  3001               	movlw	1
  3848     0EA8                     u2865:
  3849     0EA8  1003               	clrc
  3850     0EA9  0CBD               	rrf	___fltol@f1+3,f
  3851     0EAA  0CBC               	rrf	___fltol@f1+2,f
  3852     0EAB  0CBB               	rrf	___fltol@f1+1,f
  3853     0EAC  0CBA               	rrf	___fltol@f1,f
  3854     0EAD  3EFF               	addlw	-1
  3855     0EAE  1D03               	skipz
  3856     0EAF  2EA8               	goto	u2865
  3857     0EB0  3001               	movlw	1
  3858     0EB1  00BE               	movwf	??___fltol
  3859     0EB2  083E               	movf	??___fltol,w
  3860     0EB3  07C3               	addwf	___fltol@exp1,f
  3861     0EB4  1903               	btfsc	3,2
  3862     0EB5  2ECA               	goto	l1890
  3863     0EB6  2EA7               	goto	l1880
  3864     0EB7                     l1882:
  3865     0EB7  3020               	movlw	32
  3866     0EB8  0243               	subwf	___fltol@exp1,w
  3867     0EB9  1803               	btfsc	3,0
  3868     0EBA  2E79               	goto	l1860
  3869     0EBB                     l419:
  3870     0EBB  0843               	movf	___fltol@exp1,w
  3871     0EBC  1903               	btfsc	3,2
  3872     0EBD  2ECA               	goto	l1890
  3873     0EBE  3001               	movlw	1
  3874     0EBF  00BE               	movwf	??___fltol
  3875     0EC0                     u2895:
  3876     0EC0  1003               	clrc
  3877     0EC1  0DBA               	rlf	___fltol@f1,f
  3878     0EC2  0DBB               	rlf	___fltol@f1+1,f
  3879     0EC3  0DBC               	rlf	___fltol@f1+2,f
  3880     0EC4  0DBD               	rlf	___fltol@f1+3,f
  3881     0EC5  0BBE               	decfsz	??___fltol,f
  3882     0EC6  2EC0               	goto	u2895
  3883     0EC7  3001               	movlw	1
  3884     0EC8  02C3               	subwf	___fltol@exp1,f
  3885     0EC9  2EBB               	goto	l419
  3886     0ECA                     l1890:
  3887     0ECA  0842               	movf	___fltol@sign1,w
  3888     0ECB  1903               	btfsc	3,2
  3889     0ECC  0008               	return
  3890     0ECD  09BA               	comf	___fltol@f1,f
  3891     0ECE  09BB               	comf	___fltol@f1+1,f
  3892     0ECF  09BC               	comf	___fltol@f1+2,f
  3893     0ED0  09BD               	comf	___fltol@f1+3,f
  3894     0ED1  0ABA               	incf	___fltol@f1,f
  3895     0ED2  1903               	skipnz
  3896     0ED3  0ABB               	incf	___fltol@f1+1,f
  3897     0ED4  1903               	skipnz
  3898     0ED5  0ABC               	incf	___fltol@f1+2,f
  3899     0ED6  1903               	skipnz
  3900     0ED7  0ABD               	incf	___fltol@f1+3,f
  3901     0ED8  0008               	return
  3902     0ED9                     __end_of___fltol:
  3903                           
  3904                           	psect	text23
  3905     050E                     __ptext23:	
  3906 ;; *************** function ___flmul *****************
  3907 ;; Defined at:
  3908 ;;		line 8 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/sprcmul.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  b               4    0[BANK0 ] long 
  3911 ;;  a               4    4[BANK0 ] long 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  prod            4   20[BANK0 ] struct .
  3914 ;;  grs             4   15[BANK0 ] unsigned long 
  3915 ;;  temp            2   24[BANK0 ] struct .
  3916 ;;  bexp            1   19[BANK0 ] unsigned char 
  3917 ;;  aexp            1   14[BANK0 ] unsigned char 
  3918 ;;  sign            1   13[BANK0 ] unsigned char 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  4    0[BANK0 ] unsigned char 
  3921 ;; Registers used:
  3922 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3923 ;; Tracked objects:
  3924 ;;		On entry : 300/0
  3925 ;;		On exit  : 300/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3928 ;;      Params:         0       8       0       0       0
  3929 ;;      Locals:         0      13       0       0       0
  3930 ;;      Temps:          0       5       0       0       0
  3931 ;;      Totals:         0      26       0       0       0
  3932 ;;Total ram usage:       26 bytes
  3933 ;; Hardware stack levels used: 1
  3934 ;; Hardware stack levels required when called: 1
  3935 ;; This function calls:
  3936 ;;		__Umul8_16
  3937 ;; This function is called by:
  3938 ;;		_main
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942     050E                     ___flmul:	
  3943                           ;psect for function ___flmul
  3944                           
  3945                           
  3946                           ;incstack = 0
  3947                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3948     050E  0823               	movf	___flmul@b+3,w
  3949     050F  3980               	andlw	128
  3950     0510  00AD               	movwf	___flmul@sign
  3951     0511  0823               	movf	___flmul@b+3,w
  3952     0512  00A8               	movwf	??___flmul
  3953     0513  0728               	addwf	??___flmul,w
  3954     0514  00B3               	movwf	___flmul@bexp
  3955     0515  1BA2               	btfsc	___flmul@b+2,7
  3956     0516  1433               	bsf	___flmul@bexp,0
  3957     0517  0833               	movf	___flmul@bexp,w
  3958     0518  1903               	btfsc	3,2
  3959     0519  2D27               	goto	l1910
  3960     051A  0A33               	incf	___flmul@bexp,w
  3961     051B  1D03               	btfss	3,2
  3962     051C  2D25               	goto	l1908
  3963     051D  3000               	movlw	0
  3964     051E  00A3               	movwf	___flmul@b+3
  3965     051F  3000               	movlw	0
  3966     0520  00A2               	movwf	___flmul@b+2
  3967     0521  3000               	movlw	0
  3968     0522  00A1               	movwf	___flmul@b+1
  3969     0523  3000               	movlw	0
  3970     0524  00A0               	movwf	___flmul@b
  3971     0525                     l1908:
  3972     0525  17A2               	bsf	___flmul@b+2,7
  3973     0526  2D2F               	goto	l1912
  3974     0527                     l1910:
  3975     0527  3000               	movlw	0
  3976     0528  00A3               	movwf	___flmul@b+3
  3977     0529  3000               	movlw	0
  3978     052A  00A2               	movwf	___flmul@b+2
  3979     052B  3000               	movlw	0
  3980     052C  00A1               	movwf	___flmul@b+1
  3981     052D  3000               	movlw	0
  3982     052E  00A0               	movwf	___flmul@b
  3983     052F                     l1912:
  3984     052F  0827               	movf	___flmul@a+3,w
  3985     0530  3980               	andlw	128
  3986     0531  00A8               	movwf	??___flmul
  3987     0532  0828               	movf	??___flmul,w
  3988     0533  06AD               	xorwf	___flmul@sign,f
  3989     0534  0827               	movf	___flmul@a+3,w
  3990     0535  00A8               	movwf	??___flmul
  3991     0536  0728               	addwf	??___flmul,w
  3992     0537  00AE               	movwf	___flmul@aexp
  3993     0538  1BA6               	btfsc	___flmul@a+2,7
  3994     0539  142E               	bsf	___flmul@aexp,0
  3995     053A  082E               	movf	___flmul@aexp,w
  3996     053B  1903               	btfsc	3,2
  3997     053C  2D4A               	goto	l1928
  3998     053D  0A2E               	incf	___flmul@aexp,w
  3999     053E  1D03               	btfss	3,2
  4000     053F  2D48               	goto	l1926
  4001     0540  3000               	movlw	0
  4002     0541  00A7               	movwf	___flmul@a+3
  4003     0542  3000               	movlw	0
  4004     0543  00A6               	movwf	___flmul@a+2
  4005     0544  3000               	movlw	0
  4006     0545  00A5               	movwf	___flmul@a+1
  4007     0546  3000               	movlw	0
  4008     0547  00A4               	movwf	___flmul@a
  4009     0548                     l1926:
  4010     0548  17A6               	bsf	___flmul@a+2,7
  4011     0549  2D52               	goto	l1930
  4012     054A                     l1928:
  4013     054A  3000               	movlw	0
  4014     054B  00A7               	movwf	___flmul@a+3
  4015     054C  3000               	movlw	0
  4016     054D  00A6               	movwf	___flmul@a+2
  4017     054E  3000               	movlw	0
  4018     054F  00A5               	movwf	___flmul@a+1
  4019     0550  3000               	movlw	0
  4020     0551  00A4               	movwf	___flmul@a
  4021     0552                     l1930:
  4022     0552  082E               	movf	___flmul@aexp,w
  4023     0553  1D03               	btfss	3,2
  4024     0554  0833               	movf	___flmul@bexp,w
  4025     0555  1D03               	btfss	3,2
  4026     0556  2D60               	goto	l1938
  4027     0557  3000               	movlw	0
  4028     0558  00A3               	movwf	?___flmul+3
  4029     0559  3000               	movlw	0
  4030     055A  00A2               	movwf	?___flmul+2
  4031     055B  3000               	movlw	0
  4032     055C  00A1               	movwf	?___flmul+1
  4033     055D  3000               	movlw	0
  4034     055E  00A0               	movwf	?___flmul
  4035     055F  0008               	return
  4036     0560                     l1938:
  4037     0560  0820               	movf	___flmul@b,w
  4038     0561  00F0               	movwf	__Umul8_16@multiplicand
  4039     0562  0826               	movf	___flmul@a+2,w
  4040     0563  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4041     0568  0871               	movf	?__Umul8_16+1,w
  4042     0569  00B9               	movwf	___flmul@temp+1
  4043     056A  0870               	movf	?__Umul8_16,w
  4044     056B  00B8               	movwf	___flmul@temp
  4045     056C  0838               	movf	___flmul@temp,w
  4046     056D  00A8               	movwf	??___flmul
  4047     056E  01A9               	clrf	??___flmul+1
  4048     056F  01AA               	clrf	??___flmul+2
  4049     0570  01AB               	clrf	??___flmul+3
  4050     0571  082B               	movf	??___flmul+3,w
  4051     0572  00B2               	movwf	___flmul@grs+3
  4052     0573  082A               	movf	??___flmul+2,w
  4053     0574  00B1               	movwf	___flmul@grs+2
  4054     0575  0829               	movf	??___flmul+1,w
  4055     0576  00B0               	movwf	___flmul@grs+1
  4056     0577  0828               	movf	??___flmul,w
  4057     0578  00AF               	movwf	___flmul@grs
  4058     0579  0839               	movf	___flmul@temp+1,w
  4059     057A  00A8               	movwf	??___flmul
  4060     057B  01A9               	clrf	??___flmul+1
  4061     057C  01AA               	clrf	??___flmul+2
  4062     057D  01AB               	clrf	??___flmul+3
  4063     057E  082B               	movf	??___flmul+3,w
  4064     057F  00B7               	movwf	___flmul@prod+3
  4065     0580  082A               	movf	??___flmul+2,w
  4066     0581  00B6               	movwf	___flmul@prod+2
  4067     0582  0829               	movf	??___flmul+1,w
  4068     0583  00B5               	movwf	___flmul@prod+1
  4069     0584  0828               	movf	??___flmul,w
  4070     0585  00B4               	movwf	___flmul@prod
  4071     0586  0821               	movf	___flmul@b+1,w
  4072     0587  00F0               	movwf	__Umul8_16@multiplicand
  4073     0588  0825               	movf	___flmul@a+1,w
  4074     0589  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4075     058E  0871               	movf	?__Umul8_16+1,w
  4076     058F  00B9               	movwf	___flmul@temp+1
  4077     0590  0870               	movf	?__Umul8_16,w
  4078     0591  00B8               	movwf	___flmul@temp
  4079     0592  0838               	movf	___flmul@temp,w
  4080     0593  00A8               	movwf	??___flmul
  4081     0594  01A9               	clrf	??___flmul+1
  4082     0595  01AA               	clrf	??___flmul+2
  4083     0596  01AB               	clrf	??___flmul+3
  4084     0597  0828               	movf	??___flmul,w
  4085     0598  07AF               	addwf	___flmul@grs,f
  4086     0599  0829               	movf	??___flmul+1,w
  4087     059A  1103               	clrz
  4088     059B  1803               	skipnc
  4089     059C  3E01               	addlw	1
  4090     059D  1D03               	btfss	3,2
  4091     059E  07B0               	addwf	___flmul@grs+1,f
  4092     059F  082A               	movf	??___flmul+2,w
  4093     05A0  1103               	clrz
  4094     05A1  1803               	skipnc
  4095     05A2  3E01               	addlw	1
  4096     05A3  1D03               	btfss	3,2
  4097     05A4  07B1               	addwf	___flmul@grs+2,f
  4098     05A5  082B               	movf	??___flmul+3,w
  4099     05A6  1103               	clrz
  4100     05A7  1803               	skipnc
  4101     05A8  3E01               	addlw	1
  4102     05A9  1D03               	btfss	3,2
  4103     05AA  07B2               	addwf	___flmul@grs+3,f
  4104     05AB  0839               	movf	___flmul@temp+1,w
  4105     05AC  00A8               	movwf	??___flmul
  4106     05AD  01A9               	clrf	??___flmul+1
  4107     05AE  01AA               	clrf	??___flmul+2
  4108     05AF  01AB               	clrf	??___flmul+3
  4109     05B0  0828               	movf	??___flmul,w
  4110     05B1  07B4               	addwf	___flmul@prod,f
  4111     05B2  0829               	movf	??___flmul+1,w
  4112     05B3  1103               	clrz
  4113     05B4  1803               	skipnc
  4114     05B5  3E01               	addlw	1
  4115     05B6  1D03               	btfss	3,2
  4116     05B7  07B5               	addwf	___flmul@prod+1,f
  4117     05B8  082A               	movf	??___flmul+2,w
  4118     05B9  1103               	clrz
  4119     05BA  1803               	skipnc
  4120     05BB  3E01               	addlw	1
  4121     05BC  1D03               	btfss	3,2
  4122     05BD  07B6               	addwf	___flmul@prod+2,f
  4123     05BE  082B               	movf	??___flmul+3,w
  4124     05BF  1103               	clrz
  4125     05C0  1803               	skipnc
  4126     05C1  3E01               	addlw	1
  4127     05C2  1D03               	btfss	3,2
  4128     05C3  07B7               	addwf	___flmul@prod+3,f
  4129     05C4  0822               	movf	___flmul@b+2,w
  4130     05C5  00F0               	movwf	__Umul8_16@multiplicand
  4131     05C6  0824               	movf	___flmul@a,w
  4132     05C7  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4133     05CC  0871               	movf	?__Umul8_16+1,w
  4134     05CD  00B9               	movwf	___flmul@temp+1
  4135     05CE  0870               	movf	?__Umul8_16,w
  4136     05CF  00B8               	movwf	___flmul@temp
  4137     05D0  0838               	movf	___flmul@temp,w
  4138     05D1  00A8               	movwf	??___flmul
  4139     05D2  01A9               	clrf	??___flmul+1
  4140     05D3  01AA               	clrf	??___flmul+2
  4141     05D4  01AB               	clrf	??___flmul+3
  4142     05D5  0828               	movf	??___flmul,w
  4143     05D6  07AF               	addwf	___flmul@grs,f
  4144     05D7  0829               	movf	??___flmul+1,w
  4145     05D8  1103               	clrz
  4146     05D9  1803               	skipnc
  4147     05DA  3E01               	addlw	1
  4148     05DB  1D03               	btfss	3,2
  4149     05DC  07B0               	addwf	___flmul@grs+1,f
  4150     05DD  082A               	movf	??___flmul+2,w
  4151     05DE  1103               	clrz
  4152     05DF  1803               	skipnc
  4153     05E0  3E01               	addlw	1
  4154     05E1  1D03               	btfss	3,2
  4155     05E2  07B1               	addwf	___flmul@grs+2,f
  4156     05E3  082B               	movf	??___flmul+3,w
  4157     05E4  1103               	clrz
  4158     05E5  1803               	skipnc
  4159     05E6  3E01               	addlw	1
  4160     05E7  1D03               	btfss	3,2
  4161     05E8  07B2               	addwf	___flmul@grs+3,f
  4162     05E9  0839               	movf	___flmul@temp+1,w
  4163     05EA  00A8               	movwf	??___flmul
  4164     05EB  01A9               	clrf	??___flmul+1
  4165     05EC  01AA               	clrf	??___flmul+2
  4166     05ED  01AB               	clrf	??___flmul+3
  4167     05EE  0828               	movf	??___flmul,w
  4168     05EF  07B4               	addwf	___flmul@prod,f
  4169     05F0  0829               	movf	??___flmul+1,w
  4170     05F1  1103               	clrz
  4171     05F2  1803               	skipnc
  4172     05F3  3E01               	addlw	1
  4173     05F4  1D03               	btfss	3,2
  4174     05F5  07B5               	addwf	___flmul@prod+1,f
  4175     05F6  082A               	movf	??___flmul+2,w
  4176     05F7  1103               	clrz
  4177     05F8  1803               	skipnc
  4178     05F9  3E01               	addlw	1
  4179     05FA  1D03               	btfss	3,2
  4180     05FB  07B6               	addwf	___flmul@prod+2,f
  4181     05FC  082B               	movf	??___flmul+3,w
  4182     05FD  1103               	clrz
  4183     05FE  1803               	skipnc
  4184     05FF  3E01               	addlw	1
  4185     0600  1D03               	btfss	3,2
  4186     0601  07B7               	addwf	___flmul@prod+3,f
  4187     0602  3008               	movlw	8
  4188     0603  00A8               	movwf	??___flmul
  4189     0604                     u3045:
  4190     0604  1003               	clrc
  4191     0605  0DAF               	rlf	___flmul@grs,f
  4192     0606  0DB0               	rlf	___flmul@grs+1,f
  4193     0607  0DB1               	rlf	___flmul@grs+2,f
  4194     0608  0DB2               	rlf	___flmul@grs+3,f
  4195     0609  0BA8               	decfsz	??___flmul,f
  4196     060A  2E04               	goto	u3045
  4197     060B  0821               	movf	___flmul@b+1,w
  4198     060C  00F0               	movwf	__Umul8_16@multiplicand
  4199     060D  0824               	movf	___flmul@a,w
  4200     060E  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4201     0613  0871               	movf	?__Umul8_16+1,w
  4202     0614  00B9               	movwf	___flmul@temp+1
  4203     0615  0870               	movf	?__Umul8_16,w
  4204     0616  00B8               	movwf	___flmul@temp
  4205     0617  0838               	movf	___flmul@temp,w
  4206     0618  00A8               	movwf	??___flmul
  4207     0619  0839               	movf	___flmul@temp+1,w
  4208     061A  00A9               	movwf	??___flmul+1
  4209     061B  01AA               	clrf	??___flmul+2
  4210     061C  01AB               	clrf	??___flmul+3
  4211     061D  0828               	movf	??___flmul,w
  4212     061E  07AF               	addwf	___flmul@grs,f
  4213     061F  0829               	movf	??___flmul+1,w
  4214     0620  1103               	clrz
  4215     0621  1803               	skipnc
  4216     0622  3E01               	addlw	1
  4217     0623  1D03               	btfss	3,2
  4218     0624  07B0               	addwf	___flmul@grs+1,f
  4219     0625  082A               	movf	??___flmul+2,w
  4220     0626  1103               	clrz
  4221     0627  1803               	skipnc
  4222     0628  3E01               	addlw	1
  4223     0629  1D03               	btfss	3,2
  4224     062A  07B1               	addwf	___flmul@grs+2,f
  4225     062B  082B               	movf	??___flmul+3,w
  4226     062C  1103               	clrz
  4227     062D  1803               	skipnc
  4228     062E  3E01               	addlw	1
  4229     062F  1D03               	btfss	3,2
  4230     0630  07B2               	addwf	___flmul@grs+3,f
  4231     0631  0820               	movf	___flmul@b,w
  4232     0632  00F0               	movwf	__Umul8_16@multiplicand
  4233     0633  0825               	movf	___flmul@a+1,w
  4234     0634  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4235     0639  0871               	movf	?__Umul8_16+1,w
  4236     063A  00B9               	movwf	___flmul@temp+1
  4237     063B  0870               	movf	?__Umul8_16,w
  4238     063C  00B8               	movwf	___flmul@temp
  4239     063D  0838               	movf	___flmul@temp,w
  4240     063E  00A8               	movwf	??___flmul
  4241     063F  0839               	movf	___flmul@temp+1,w
  4242     0640  00A9               	movwf	??___flmul+1
  4243     0641  01AA               	clrf	??___flmul+2
  4244     0642  01AB               	clrf	??___flmul+3
  4245     0643  0828               	movf	??___flmul,w
  4246     0644  07AF               	addwf	___flmul@grs,f
  4247     0645  0829               	movf	??___flmul+1,w
  4248     0646  1103               	clrz
  4249     0647  1803               	skipnc
  4250     0648  3E01               	addlw	1
  4251     0649  1D03               	btfss	3,2
  4252     064A  07B0               	addwf	___flmul@grs+1,f
  4253     064B  082A               	movf	??___flmul+2,w
  4254     064C  1103               	clrz
  4255     064D  1803               	skipnc
  4256     064E  3E01               	addlw	1
  4257     064F  1D03               	btfss	3,2
  4258     0650  07B1               	addwf	___flmul@grs+2,f
  4259     0651  082B               	movf	??___flmul+3,w
  4260     0652  1103               	clrz
  4261     0653  1803               	skipnc
  4262     0654  3E01               	addlw	1
  4263     0655  1D03               	btfss	3,2
  4264     0656  07B2               	addwf	___flmul@grs+3,f
  4265     0657  3008               	movlw	8
  4266     0658  00A8               	movwf	??___flmul
  4267     0659                     u3075:
  4268     0659  1003               	clrc
  4269     065A  0DAF               	rlf	___flmul@grs,f
  4270     065B  0DB0               	rlf	___flmul@grs+1,f
  4271     065C  0DB1               	rlf	___flmul@grs+2,f
  4272     065D  0DB2               	rlf	___flmul@grs+3,f
  4273     065E  0BA8               	decfsz	??___flmul,f
  4274     065F  2E59               	goto	u3075
  4275     0660  0820               	movf	___flmul@b,w
  4276     0661  00F0               	movwf	__Umul8_16@multiplicand
  4277     0662  0824               	movf	___flmul@a,w
  4278     0663  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4279     0668  0871               	movf	?__Umul8_16+1,w
  4280     0669  00B9               	movwf	___flmul@temp+1
  4281     066A  0870               	movf	?__Umul8_16,w
  4282     066B  00B8               	movwf	___flmul@temp
  4283     066C  0838               	movf	___flmul@temp,w
  4284     066D  00A8               	movwf	??___flmul
  4285     066E  0839               	movf	___flmul@temp+1,w
  4286     066F  00A9               	movwf	??___flmul+1
  4287     0670  01AA               	clrf	??___flmul+2
  4288     0671  01AB               	clrf	??___flmul+3
  4289     0672  0828               	movf	??___flmul,w
  4290     0673  07AF               	addwf	___flmul@grs,f
  4291     0674  0829               	movf	??___flmul+1,w
  4292     0675  1103               	clrz
  4293     0676  1803               	skipnc
  4294     0677  3E01               	addlw	1
  4295     0678  1D03               	btfss	3,2
  4296     0679  07B0               	addwf	___flmul@grs+1,f
  4297     067A  082A               	movf	??___flmul+2,w
  4298     067B  1103               	clrz
  4299     067C  1803               	skipnc
  4300     067D  3E01               	addlw	1
  4301     067E  1D03               	btfss	3,2
  4302     067F  07B1               	addwf	___flmul@grs+2,f
  4303     0680  082B               	movf	??___flmul+3,w
  4304     0681  1103               	clrz
  4305     0682  1803               	skipnc
  4306     0683  3E01               	addlw	1
  4307     0684  1D03               	btfss	3,2
  4308     0685  07B2               	addwf	___flmul@grs+3,f
  4309     0686  0821               	movf	___flmul@b+1,w
  4310     0687  00F0               	movwf	__Umul8_16@multiplicand
  4311     0688  0826               	movf	___flmul@a+2,w
  4312     0689  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4313     068E  0871               	movf	?__Umul8_16+1,w
  4314     068F  00B9               	movwf	___flmul@temp+1
  4315     0690  0870               	movf	?__Umul8_16,w
  4316     0691  00B8               	movwf	___flmul@temp
  4317     0692  0838               	movf	___flmul@temp,w
  4318     0693  00A8               	movwf	??___flmul
  4319     0694  0839               	movf	___flmul@temp+1,w
  4320     0695  00A9               	movwf	??___flmul+1
  4321     0696  01AA               	clrf	??___flmul+2
  4322     0697  01AB               	clrf	??___flmul+3
  4323     0698  0828               	movf	??___flmul,w
  4324     0699  07B4               	addwf	___flmul@prod,f
  4325     069A  0829               	movf	??___flmul+1,w
  4326     069B  1103               	clrz
  4327     069C  1803               	skipnc
  4328     069D  3E01               	addlw	1
  4329     069E  1D03               	btfss	3,2
  4330     069F  07B5               	addwf	___flmul@prod+1,f
  4331     06A0  082A               	movf	??___flmul+2,w
  4332     06A1  1103               	clrz
  4333     06A2  1803               	skipnc
  4334     06A3  3E01               	addlw	1
  4335     06A4  1D03               	btfss	3,2
  4336     06A5  07B6               	addwf	___flmul@prod+2,f
  4337     06A6  082B               	movf	??___flmul+3,w
  4338     06A7  1103               	clrz
  4339     06A8  1803               	skipnc
  4340     06A9  3E01               	addlw	1
  4341     06AA  1D03               	btfss	3,2
  4342     06AB  07B7               	addwf	___flmul@prod+3,f
  4343     06AC  0822               	movf	___flmul@b+2,w
  4344     06AD  00F0               	movwf	__Umul8_16@multiplicand
  4345     06AE  0825               	movf	___flmul@a+1,w
  4346     06AF  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4347     06B4  0871               	movf	?__Umul8_16+1,w
  4348     06B5  00B9               	movwf	___flmul@temp+1
  4349     06B6  0870               	movf	?__Umul8_16,w
  4350     06B7  00B8               	movwf	___flmul@temp
  4351     06B8  0838               	movf	___flmul@temp,w
  4352     06B9  00A8               	movwf	??___flmul
  4353     06BA  0839               	movf	___flmul@temp+1,w
  4354     06BB  00A9               	movwf	??___flmul+1
  4355     06BC  01AA               	clrf	??___flmul+2
  4356     06BD  01AB               	clrf	??___flmul+3
  4357     06BE  0828               	movf	??___flmul,w
  4358     06BF  07B4               	addwf	___flmul@prod,f
  4359     06C0  0829               	movf	??___flmul+1,w
  4360     06C1  1103               	clrz
  4361     06C2  1803               	skipnc
  4362     06C3  3E01               	addlw	1
  4363     06C4  1D03               	btfss	3,2
  4364     06C5  07B5               	addwf	___flmul@prod+1,f
  4365     06C6  082A               	movf	??___flmul+2,w
  4366     06C7  1103               	clrz
  4367     06C8  1803               	skipnc
  4368     06C9  3E01               	addlw	1
  4369     06CA  1D03               	btfss	3,2
  4370     06CB  07B6               	addwf	___flmul@prod+2,f
  4371     06CC  082B               	movf	??___flmul+3,w
  4372     06CD  1103               	clrz
  4373     06CE  1803               	skipnc
  4374     06CF  3E01               	addlw	1
  4375     06D0  1D03               	btfss	3,2
  4376     06D1  07B7               	addwf	___flmul@prod+3,f
  4377     06D2  0822               	movf	___flmul@b+2,w
  4378     06D3  00F0               	movwf	__Umul8_16@multiplicand
  4379     06D4  0826               	movf	___flmul@a+2,w
  4380     06D5  120A  158A  23A2  120A  118A  	fcall	__Umul8_16
  4381     06DA  0871               	movf	?__Umul8_16+1,w
  4382     06DB  00B9               	movwf	___flmul@temp+1
  4383     06DC  0870               	movf	?__Umul8_16,w
  4384     06DD  00B8               	movwf	___flmul@temp
  4385     06DE  0838               	movf	___flmul@temp,w
  4386     06DF  00A8               	movwf	??___flmul
  4387     06E0  0839               	movf	___flmul@temp+1,w
  4388     06E1  00A9               	movwf	??___flmul+1
  4389     06E2  01AA               	clrf	??___flmul+2
  4390     06E3  01AB               	clrf	??___flmul+3
  4391     06E4  3008               	movlw	8
  4392     06E5                     u3115:
  4393     06E5  1003               	clrc
  4394     06E6  0DA8               	rlf	??___flmul,f
  4395     06E7  0DA9               	rlf	??___flmul+1,f
  4396     06E8  0DAA               	rlf	??___flmul+2,f
  4397     06E9  0DAB               	rlf	??___flmul+3,f
  4398     06EA  3EFF               	addlw	-1
  4399     06EB  1D03               	skipz
  4400     06EC  2EE5               	goto	u3115
  4401     06ED  0828               	movf	??___flmul,w
  4402     06EE  07B4               	addwf	___flmul@prod,f
  4403     06EF  0829               	movf	??___flmul+1,w
  4404     06F0  1103               	clrz
  4405     06F1  1803               	skipnc
  4406     06F2  3E01               	addlw	1
  4407     06F3  1D03               	btfss	3,2
  4408     06F4  07B5               	addwf	___flmul@prod+1,f
  4409     06F5  082A               	movf	??___flmul+2,w
  4410     06F6  1103               	clrz
  4411     06F7  1803               	skipnc
  4412     06F8  3E01               	addlw	1
  4413     06F9  1D03               	btfss	3,2
  4414     06FA  07B6               	addwf	___flmul@prod+2,f
  4415     06FB  082B               	movf	??___flmul+3,w
  4416     06FC  1103               	clrz
  4417     06FD  1803               	skipnc
  4418     06FE  3E01               	addlw	1
  4419     06FF  1D03               	btfss	3,2
  4420     0700  07B7               	addwf	___flmul@prod+3,f
  4421     0701  0832               	movf	___flmul@grs+3,w
  4422     0702  00A8               	movwf	??___flmul
  4423     0703  01A9               	clrf	??___flmul+1
  4424     0704  01AA               	clrf	??___flmul+2
  4425     0705  01AB               	clrf	??___flmul+3
  4426     0706  0828               	movf	??___flmul,w
  4427     0707  07B4               	addwf	___flmul@prod,f
  4428     0708  0829               	movf	??___flmul+1,w
  4429     0709  1103               	clrz
  4430     070A  1803               	skipnc
  4431     070B  3E01               	addlw	1
  4432     070C  1D03               	btfss	3,2
  4433     070D  07B5               	addwf	___flmul@prod+1,f
  4434     070E  082A               	movf	??___flmul+2,w
  4435     070F  1103               	clrz
  4436     0710  1803               	skipnc
  4437     0711  3E01               	addlw	1
  4438     0712  1D03               	btfss	3,2
  4439     0713  07B6               	addwf	___flmul@prod+2,f
  4440     0714  082B               	movf	??___flmul+3,w
  4441     0715  1103               	clrz
  4442     0716  1803               	skipnc
  4443     0717  3E01               	addlw	1
  4444     0718  1D03               	btfss	3,2
  4445     0719  07B7               	addwf	___flmul@prod+3,f
  4446     071A  3008               	movlw	8
  4447     071B  00A8               	movwf	??___flmul
  4448     071C                     u3145:
  4449     071C  1003               	clrc
  4450     071D  0DAF               	rlf	___flmul@grs,f
  4451     071E  0DB0               	rlf	___flmul@grs+1,f
  4452     071F  0DB1               	rlf	___flmul@grs+2,f
  4453     0720  0DB2               	rlf	___flmul@grs+3,f
  4454     0721  0BA8               	decfsz	??___flmul,f
  4455     0722  2F1C               	goto	u3145
  4456     0723  0833               	movf	___flmul@bexp,w
  4457     0724  072E               	addwf	___flmul@aexp,w
  4458     0725  00A8               	movwf	??___flmul
  4459     0726  01A9               	clrf	??___flmul+1
  4460     0727  0DA9               	rlf	??___flmul+1,f
  4461     0728  0828               	movf	??___flmul,w
  4462     0729  3E82               	addlw	130
  4463     072A  00B8               	movwf	___flmul@temp
  4464     072B  0829               	movf	??___flmul+1,w
  4465     072C  1803               	skipnc
  4466     072D  3E01               	addlw	1
  4467     072E  3EFF               	addlw	255
  4468     072F  00B9               	movwf	___flmul@temp+1
  4469     0730                     l1990:
  4470     0730  1BB6               	btfsc	___flmul@prod+2,7
  4471     0731  2F4D               	goto	l1992
  4472     0732  3001               	movlw	1
  4473     0733  00A8               	movwf	??___flmul
  4474     0734                     u3155:
  4475     0734  1003               	clrc
  4476     0735  0DB4               	rlf	___flmul@prod,f
  4477     0736  0DB5               	rlf	___flmul@prod+1,f
  4478     0737  0DB6               	rlf	___flmul@prod+2,f
  4479     0738  0DB7               	rlf	___flmul@prod+3,f
  4480     0739  0BA8               	decfsz	??___flmul,f
  4481     073A  2F34               	goto	u3155
  4482     073B  1BB2               	btfsc	___flmul@grs+3,7
  4483     073C  1434               	bsf	___flmul@prod,0
  4484     073D  3001               	movlw	1
  4485     073E  00A8               	movwf	??___flmul
  4486     073F                     u3175:
  4487     073F  1003               	clrc
  4488     0740  0DAF               	rlf	___flmul@grs,f
  4489     0741  0DB0               	rlf	___flmul@grs+1,f
  4490     0742  0DB1               	rlf	___flmul@grs+2,f
  4491     0743  0DB2               	rlf	___flmul@grs+3,f
  4492     0744  0BA8               	decfsz	??___flmul,f
  4493     0745  2F3F               	goto	u3175
  4494     0746  30FF               	movlw	255
  4495     0747  07B8               	addwf	___flmul@temp,f
  4496     0748  1803               	skipnc
  4497     0749  0AB9               	incf	___flmul@temp+1,f
  4498     074A  30FF               	movlw	255
  4499     074B  07B9               	addwf	___flmul@temp+1,f
  4500     074C  2F30               	goto	l1990
  4501     074D                     l1992:
  4502     074D  01AE               	clrf	___flmul@aexp
  4503     074E  1FB2               	btfss	___flmul@grs+3,7
  4504     074F  2F66               	goto	l2002
  4505     0750  30FF               	movlw	255
  4506     0751  052F               	andwf	___flmul@grs,w
  4507     0752  00A8               	movwf	??___flmul
  4508     0753  30FF               	movlw	255
  4509     0754  0530               	andwf	___flmul@grs+1,w
  4510     0755  00A9               	movwf	??___flmul+1
  4511     0756  30FF               	movlw	255
  4512     0757  0531               	andwf	___flmul@grs+2,w
  4513     0758  00AA               	movwf	??___flmul+2
  4514     0759  307F               	movlw	127
  4515     075A  0532               	andwf	___flmul@grs+3,w
  4516     075B  00AB               	movwf	??___flmul+3
  4517     075C  082B               	movf	??___flmul+3,w
  4518     075D  042A               	iorwf	??___flmul+2,w
  4519     075E  0429               	iorwf	??___flmul+1,w
  4520     075F  0428               	iorwf	??___flmul,w
  4521     0760  1903               	skipnz
  4522     0761  1834               	btfsc	___flmul@prod,0
  4523     0762  2F64               	goto	l1998
  4524     0763  2F66               	goto	l2002
  4525     0764                     l1998:
  4526     0764  01AE               	clrf	___flmul@aexp
  4527     0765  0AAE               	incf	___flmul@aexp,f
  4528     0766                     l2002:
  4529     0766  082E               	movf	___flmul@aexp,w
  4530     0767  1903               	btfsc	3,2
  4531     0768  2F98               	goto	l2012
  4532     0769  3001               	movlw	1
  4533     076A  07B4               	addwf	___flmul@prod,f
  4534     076B  3000               	movlw	0
  4535     076C  1803               	skipnc
  4536     076D  3001               	movlw	1
  4537     076E  07B5               	addwf	___flmul@prod+1,f
  4538     076F  3000               	movlw	0
  4539     0770  1803               	skipnc
  4540     0771  3001               	movlw	1
  4541     0772  07B6               	addwf	___flmul@prod+2,f
  4542     0773  3000               	movlw	0
  4543     0774  1803               	skipnc
  4544     0775  3001               	movlw	1
  4545     0776  07B7               	addwf	___flmul@prod+3,f
  4546     0777  1C37               	btfss	___flmul@prod+3,0
  4547     0778  2F98               	goto	l2012
  4548     0779  0834               	movf	___flmul@prod,w
  4549     077A  00A8               	movwf	??___flmul
  4550     077B  0835               	movf	___flmul@prod+1,w
  4551     077C  00A9               	movwf	??___flmul+1
  4552     077D  0836               	movf	___flmul@prod+2,w
  4553     077E  00AA               	movwf	??___flmul+2
  4554     077F  0837               	movf	___flmul@prod+3,w
  4555     0780  00AB               	movwf	??___flmul+3
  4556     0781  3001               	movlw	1
  4557     0782  00AC               	movwf	??___flmul+4
  4558     0783                     u3245:
  4559     0783  0D2B               	rlf	??___flmul+3,w
  4560     0784  0CAB               	rrf	??___flmul+3,f
  4561     0785  0CAA               	rrf	??___flmul+2,f
  4562     0786  0CA9               	rrf	??___flmul+1,f
  4563     0787  0CA8               	rrf	??___flmul,f
  4564     0788  0BAC               	decfsz	??___flmul+4,f
  4565     0789  2F83               	goto	u3245
  4566     078A  082B               	movf	??___flmul+3,w
  4567     078B  00B7               	movwf	___flmul@prod+3
  4568     078C  082A               	movf	??___flmul+2,w
  4569     078D  00B6               	movwf	___flmul@prod+2
  4570     078E  0829               	movf	??___flmul+1,w
  4571     078F  00B5               	movwf	___flmul@prod+1
  4572     0790  0828               	movf	??___flmul,w
  4573     0791  00B4               	movwf	___flmul@prod
  4574     0792  3001               	movlw	1
  4575     0793  07B8               	addwf	___flmul@temp,f
  4576     0794  1803               	skipnc
  4577     0795  0AB9               	incf	___flmul@temp+1,f
  4578     0796  3000               	movlw	0
  4579     0797  07B9               	addwf	___flmul@temp+1,f
  4580     0798                     l2012:
  4581     0798  0839               	movf	___flmul@temp+1,w
  4582     0799  3A80               	xorlw	128
  4583     079A  00FF               	movwf	127
  4584     079B  3080               	movlw	128
  4585     079C  027F               	subwf	127,w
  4586     079D  1D03               	skipz
  4587     079E  2FA1               	goto	u3255
  4588     079F  30FF               	movlw	255
  4589     07A0  0238               	subwf	___flmul@temp,w
  4590     07A1                     u3255:
  4591     07A1  1C03               	skipc
  4592     07A2  2FAE               	goto	l2016
  4593     07A3  307F               	movlw	127
  4594     07A4  1283               	bcf	3,5	;RP0=0, select bank0
  4595     07A5  1303               	bcf	3,6	;RP1=0, select bank0
  4596     07A6  00B7               	movwf	___flmul@prod+3
  4597     07A7  3080               	movlw	128
  4598     07A8  00B6               	movwf	___flmul@prod+2
  4599     07A9  3000               	movlw	0
  4600     07AA  00B5               	movwf	___flmul@prod+1
  4601     07AB  3000               	movlw	0
  4602     07AC  00B4               	movwf	___flmul@prod
  4603     07AD  2FDA               	goto	l627
  4604     07AE                     l2016:
  4605     07AE  1283               	bcf	3,5	;RP0=0, select bank0
  4606     07AF  1303               	bcf	3,6	;RP1=0, select bank0
  4607     07B0  0839               	movf	___flmul@temp+1,w
  4608     07B1  3A80               	xorlw	128
  4609     07B2  00FF               	movwf	127
  4610     07B3  3080               	movlw	128
  4611     07B4  027F               	subwf	127,w
  4612     07B5  1D03               	skipz
  4613     07B6  2FB9               	goto	u3265
  4614     07B7  3001               	movlw	1
  4615     07B8  0238               	subwf	___flmul@temp,w
  4616     07B9                     u3265:
  4617     07B9  1803               	skipnc
  4618     07BA  2FC7               	goto	l2022
  4619     07BB  3000               	movlw	0
  4620     07BC  1283               	bcf	3,5	;RP0=0, select bank0
  4621     07BD  1303               	bcf	3,6	;RP1=0, select bank0
  4622     07BE  00B7               	movwf	___flmul@prod+3
  4623     07BF  3000               	movlw	0
  4624     07C0  00B6               	movwf	___flmul@prod+2
  4625     07C1  3000               	movlw	0
  4626     07C2  00B5               	movwf	___flmul@prod+1
  4627     07C3  3000               	movlw	0
  4628     07C4  00B4               	movwf	___flmul@prod
  4629     07C5  01AD               	clrf	___flmul@sign
  4630     07C6  2FDA               	goto	l627
  4631     07C7                     l2022:
  4632     07C7  1283               	bcf	3,5	;RP0=0, select bank0
  4633     07C8  1303               	bcf	3,6	;RP1=0, select bank0
  4634     07C9  0838               	movf	___flmul@temp,w
  4635     07CA  00B3               	movwf	___flmul@bexp
  4636     07CB  30FF               	movlw	255
  4637     07CC  05B4               	andwf	___flmul@prod,f
  4638     07CD  30FF               	movlw	255
  4639     07CE  05B5               	andwf	___flmul@prod+1,f
  4640     07CF  307F               	movlw	127
  4641     07D0  05B6               	andwf	___flmul@prod+2,f
  4642     07D1  3000               	movlw	0
  4643     07D2  05B7               	andwf	___flmul@prod+3,f
  4644     07D3  1833               	btfsc	___flmul@bexp,0
  4645     07D4  17B6               	bsf	___flmul@prod+2,7
  4646     07D5  0833               	movf	___flmul@bexp,w
  4647     07D6  00A8               	movwf	??___flmul
  4648     07D7  1003               	clrc
  4649     07D8  0C28               	rrf	??___flmul,w
  4650     07D9  00B7               	movwf	___flmul@prod+3
  4651     07DA                     l627:
  4652     07DA  082D               	movf	___flmul@sign,w
  4653     07DB  00A8               	movwf	??___flmul
  4654     07DC  0828               	movf	??___flmul,w
  4655     07DD  04B7               	iorwf	___flmul@prod+3,f
  4656     07DE  0837               	movf	___flmul@prod+3,w
  4657     07DF  00A3               	movwf	?___flmul+3
  4658     07E0  0836               	movf	___flmul@prod+2,w
  4659     07E1  00A2               	movwf	?___flmul+2
  4660     07E2  0835               	movf	___flmul@prod+1,w
  4661     07E3  00A1               	movwf	?___flmul+1
  4662     07E4  0834               	movf	___flmul@prod,w
  4663     07E5  00A0               	movwf	?___flmul
  4664     07E6  0008               	return
  4665     07E7                     __end_of___flmul:
  4666                           
  4667                           	psect	text24
  4668     0BA2                     __ptext24:	
  4669 ;; *************** function __Umul8_16 *****************
  4670 ;; Defined at:
  4671 ;;		line 4 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul8_16.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  multiplier      1    wreg     unsigned char 
  4674 ;;  multiplicand    1    0[COMMON] unsigned char 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;  multiplier      1    8[COMMON] unsigned char 
  4677 ;;  word_mpld       2    6[COMMON] unsigned short 
  4678 ;;  product         2    4[COMMON] unsigned short 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  2    0[COMMON] unsigned int 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0
  4683 ;; Tracked objects:
  4684 ;;		On entry : 300/0
  4685 ;;		On exit  : 300/0
  4686 ;;		Unchanged: 300/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4688 ;;      Params:         2       0       0       0       0
  4689 ;;      Locals:         5       0       0       0       0
  4690 ;;      Temps:          2       0       0       0       0
  4691 ;;      Totals:         9       0       0       0       0
  4692 ;;Total ram usage:        9 bytes
  4693 ;; Hardware stack levels used: 1
  4694 ;; This function calls:
  4695 ;;		Nothing
  4696 ;; This function is called by:
  4697 ;;		___flmul
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701     0BA2                     __Umul8_16:	
  4702                           ;psect for function __Umul8_16
  4703                           
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4707                           ;__Umul8_16@multiplier stored from wreg
  4708     0BA2  00F8               	movwf	__Umul8_16@multiplier
  4709     0BA3  01F4               	clrf	__Umul8_16@product
  4710     0BA4  01F5               	clrf	__Umul8_16@product+1
  4711     0BA5  0870               	movf	__Umul8_16@multiplicand,w
  4712     0BA6  00F2               	movwf	??__Umul8_16
  4713     0BA7  01F3               	clrf	??__Umul8_16+1
  4714     0BA8  0872               	movf	??__Umul8_16,w
  4715     0BA9  00F6               	movwf	__Umul8_16@word_mpld
  4716     0BAA  0873               	movf	??__Umul8_16+1,w
  4717     0BAB  00F7               	movwf	__Umul8_16@word_mpld+1
  4718     0BAC                     l1720:
  4719     0BAC  1C78               	btfss	__Umul8_16@multiplier,0
  4720     0BAD  2BB4               	goto	l634
  4721     0BAE  0876               	movf	__Umul8_16@word_mpld,w
  4722     0BAF  07F4               	addwf	__Umul8_16@product,f
  4723     0BB0  1803               	skipnc
  4724     0BB1  0AF5               	incf	__Umul8_16@product+1,f
  4725     0BB2  0877               	movf	__Umul8_16@word_mpld+1,w
  4726     0BB3  07F5               	addwf	__Umul8_16@product+1,f
  4727     0BB4                     l634:
  4728     0BB4  3001               	movlw	1
  4729     0BB5                     u2715:
  4730     0BB5  1003               	clrc
  4731     0BB6  0DF6               	rlf	__Umul8_16@word_mpld,f
  4732     0BB7  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  4733     0BB8  3EFF               	addlw	-1
  4734     0BB9  1D03               	skipz
  4735     0BBA  2BB5               	goto	u2715
  4736     0BBB  1003               	clrc
  4737     0BBC  0CF8               	rrf	__Umul8_16@multiplier,f
  4738     0BBD  0878               	movf	__Umul8_16@multiplier,w
  4739     0BBE  1D03               	btfss	3,2
  4740     0BBF  2BAC               	goto	l1720
  4741     0BC0  0875               	movf	__Umul8_16@product+1,w
  4742     0BC1  00F1               	movwf	?__Umul8_16+1
  4743     0BC2  0874               	movf	__Umul8_16@product,w
  4744     0BC3  00F0               	movwf	?__Umul8_16
  4745     0BC4  0008               	return
  4746     0BC5                     __end_of__Umul8_16:
  4747                           
  4748                           	psect	text25
  4749     0C0D                     __ptext25:	
  4750 ;; *************** function _Lcd_WriteString *****************
  4751 ;; Defined at:
  4752 ;;		line 102 in file "../../pic16flcd.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  config          1    wreg     PTR struct .
  4755 ;;		 -> main@lcd(8), 
  4756 ;;  str             2    0[BANK0 ] PTR unsigned char 
  4757 ;;		 -> main@rpm(10), STR_2(6), STR_1(19), 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  config          1   13[COMMON] PTR struct .
  4760 ;;		 -> main@lcd(8), 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  1    wreg      void 
  4763 ;; Registers used:
  4764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4765 ;; Tracked objects:
  4766 ;;		On entry : 300/0
  4767 ;;		On exit  : 300/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4770 ;;      Params:         0       2       0       0       0
  4771 ;;      Locals:         1       0       0       0       0
  4772 ;;      Temps:          0       0       0       0       0
  4773 ;;      Totals:         1       2       0       0       0
  4774 ;;Total ram usage:        3 bytes
  4775 ;; Hardware stack levels used: 1
  4776 ;; Hardware stack levels required when called: 3
  4777 ;; This function calls:
  4778 ;;		_Lcd_WriteChar
  4779 ;; This function is called by:
  4780 ;;		_main
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784     0C0D                     _Lcd_WriteString:	
  4785                           ;psect for function _Lcd_WriteString
  4786                           
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _Lcd_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4790                           ;Lcd_WriteString@config stored from wreg
  4791     0C0D  00FD               	movwf	Lcd_WriteString@config
  4792     0C0E                     l1746:	
  4793                           ;../../pic16flcd.c: 103:     while(*str != '\0') {
  4794                           
  4795                           
  4796                           ;../../pic16flcd.c: 103:     while(*str != '\0') {
  4797     0C0E  0821               	movf	Lcd_WriteString@str+1,w
  4798     0C0F  00FF               	movwf	127
  4799     0C10  0820               	movf	Lcd_WriteString@str,w
  4800     0C11  0084               	movwf	4
  4801     0C12  120A  158A  2000  120A  158A  	fcall	stringtab
  4802     0C17  3A00               	xorlw	0
  4803     0C18  1903               	btfsc	3,2
  4804     0C19  0008               	return
  4805                           
  4806                           ;../../pic16flcd.c: 104:         Lcd_WriteChar(config, (unsigned char)(*str));
  4807     0C1A  0821               	movf	Lcd_WriteString@str+1,w
  4808     0C1B  00FF               	movwf	127
  4809     0C1C  0820               	movf	Lcd_WriteString@str,w
  4810     0C1D  0084               	movwf	4
  4811     0C1E  120A  158A  2000  120A  158A  	fcall	stringtab
  4812     0C23  00F9               	movwf	Lcd_WriteChar@data
  4813     0C24  087D               	movf	Lcd_WriteString@config,w
  4814     0C25  120A  118A  23ED  120A  158A  	fcall	_Lcd_WriteChar
  4815                           
  4816                           ;../../pic16flcd.c: 105:         str++;
  4817     0C2A  3001               	movlw	1
  4818     0C2B  1283               	bcf	3,5	;RP0=0, select bank0
  4819     0C2C  1303               	bcf	3,6	;RP1=0, select bank0
  4820     0C2D  07A0               	addwf	Lcd_WriteString@str,f
  4821     0C2E  1803               	skipnc
  4822     0C2F  0AA1               	incf	Lcd_WriteString@str+1,f
  4823     0C30  3000               	movlw	0
  4824     0C31  07A1               	addwf	Lcd_WriteString@str+1,f
  4825     0C32  2C0E               	goto	l1746
  4826     0C33                     __end_of_Lcd_WriteString:
  4827                           
  4828                           	psect	text26
  4829     03ED                     __ptext26:	
  4830 ;; *************** function _Lcd_WriteChar *****************
  4831 ;; Defined at:
  4832 ;;		line 77 in file "../../pic16flcd.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  config          1    wreg     PTR struct .
  4835 ;;		 -> main@lcd(8), 
  4836 ;;  data            1    9[COMMON] unsigned char 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  config          1   12[COMMON] PTR struct .
  4839 ;;		 -> main@lcd(8), 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 300/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4849 ;;      Params:         1       0       0       0       0
  4850 ;;      Locals:         1       0       0       0       0
  4851 ;;      Temps:          2       0       0       0       0
  4852 ;;      Totals:         4       0       0       0       0
  4853 ;;Total ram usage:        4 bytes
  4854 ;; Hardware stack levels used: 1
  4855 ;; Hardware stack levels required when called: 2
  4856 ;; This function calls:
  4857 ;;		_PulseEnable
  4858 ;;		_SetBit
  4859 ;; This function is called by:
  4860 ;;		_Lcd_WriteString
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864     03ED                     _Lcd_WriteChar:	
  4865                           ;psect for function _Lcd_WriteChar
  4866                           
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4870                           ;Lcd_WriteChar@config stored from wreg
  4871     03ED  00FC               	movwf	Lcd_WriteChar@config
  4872                           
  4873                           ;../../pic16flcd.c: 79:     SetBit(config->port, config->d4_pin, (data >> 4) & 0x01);
  4874     03EE  087C               	movf	Lcd_WriteChar@config,w
  4875     03EF  0084               	movwf	4
  4876     03F0  1383               	bcf	3,7	;select IRP bank0
  4877     03F1  0800               	movf	0,w
  4878     03F2  00F0               	movwf	SetBit@port
  4879     03F3  0A84               	incf	4,f
  4880     03F4  0800               	movf	0,w
  4881     03F5  0384               	decf	4,f
  4882     03F6  00F1               	movwf	SetBit@port+1
  4883     03F7  087C               	movf	Lcd_WriteChar@config,w
  4884     03F8  3E04               	addlw	4
  4885     03F9  0084               	movwf	4
  4886     03FA  0800               	movf	0,w
  4887     03FB  00F2               	movwf	SetBit@pin
  4888     03FC  0879               	movf	Lcd_WriteChar@data,w
  4889     03FD  00FB               	movwf	??_Lcd_WriteChar+1
  4890     03FE  3004               	movlw	4
  4891     03FF                     u2325:
  4892     03FF  1003               	clrc
  4893     0400  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4894     0401  3EFF               	addlw	-1
  4895     0402  1D03               	skipz
  4896     0403  2BFF               	goto	u2325
  4897     0404  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4898     0405  2C08               	goto	u2330
  4899     0406  3001               	movlw	1
  4900     0407  2C09               	goto	u2340
  4901     0408                     u2330:
  4902     0408  3000               	movlw	0
  4903     0409                     u2340:
  4904     0409  00F3               	movwf	SetBit@value
  4905     040A  120A  158A  2433  120A  118A  	fcall	_SetBit
  4906                           
  4907                           ;../../pic16flcd.c: 80:     SetBit(config->port, config->d5_pin, (data >> 5) & 0x01);
  4908     040F  087C               	movf	Lcd_WriteChar@config,w
  4909     0410  0084               	movwf	4
  4910     0411  1383               	bcf	3,7	;select IRP bank0
  4911     0412  0800               	movf	0,w
  4912     0413  00F0               	movwf	SetBit@port
  4913     0414  0A84               	incf	4,f
  4914     0415  0800               	movf	0,w
  4915     0416  0384               	decf	4,f
  4916     0417  00F1               	movwf	SetBit@port+1
  4917     0418  087C               	movf	Lcd_WriteChar@config,w
  4918     0419  3E05               	addlw	5
  4919     041A  0084               	movwf	4
  4920     041B  0800               	movf	0,w
  4921     041C  00F2               	movwf	SetBit@pin
  4922     041D  0879               	movf	Lcd_WriteChar@data,w
  4923     041E  00FB               	movwf	??_Lcd_WriteChar+1
  4924     041F  3005               	movlw	5
  4925     0420                     u2355:
  4926     0420  1003               	clrc
  4927     0421  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4928     0422  3EFF               	addlw	-1
  4929     0423  1D03               	skipz
  4930     0424  2C20               	goto	u2355
  4931     0425  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4932     0426  2C29               	goto	u2360
  4933     0427  3001               	movlw	1
  4934     0428  2C2A               	goto	u2370
  4935     0429                     u2360:
  4936     0429  3000               	movlw	0
  4937     042A                     u2370:
  4938     042A  00F3               	movwf	SetBit@value
  4939     042B  120A  158A  2433  120A  118A  	fcall	_SetBit
  4940                           
  4941                           ;../../pic16flcd.c: 81:     SetBit(config->port, config->d6_pin, (data >> 6) & 0x01);
  4942     0430  087C               	movf	Lcd_WriteChar@config,w
  4943     0431  0084               	movwf	4
  4944     0432  1383               	bcf	3,7	;select IRP bank0
  4945     0433  0800               	movf	0,w
  4946     0434  00F0               	movwf	SetBit@port
  4947     0435  0A84               	incf	4,f
  4948     0436  0800               	movf	0,w
  4949     0437  0384               	decf	4,f
  4950     0438  00F1               	movwf	SetBit@port+1
  4951     0439  087C               	movf	Lcd_WriteChar@config,w
  4952     043A  3E06               	addlw	6
  4953     043B  0084               	movwf	4
  4954     043C  0800               	movf	0,w
  4955     043D  00F2               	movwf	SetBit@pin
  4956     043E  0879               	movf	Lcd_WriteChar@data,w
  4957     043F  00FB               	movwf	??_Lcd_WriteChar+1
  4958     0440  3006               	movlw	6
  4959     0441                     u2385:
  4960     0441  1003               	clrc
  4961     0442  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4962     0443  3EFF               	addlw	-1
  4963     0444  1D03               	skipz
  4964     0445  2C41               	goto	u2385
  4965     0446  1C7B               	btfss	??_Lcd_WriteChar+1,0
  4966     0447  2C4A               	goto	u2390
  4967     0448  3001               	movlw	1
  4968     0449  2C4B               	goto	u2400
  4969     044A                     u2390:
  4970     044A  3000               	movlw	0
  4971     044B                     u2400:
  4972     044B  00F3               	movwf	SetBit@value
  4973     044C  120A  158A  2433  120A  118A  	fcall	_SetBit
  4974                           
  4975                           ;../../pic16flcd.c: 82:     SetBit(config->port, config->d7_pin, (data >> 7) & 0x01);
  4976     0451  087C               	movf	Lcd_WriteChar@config,w
  4977     0452  0084               	movwf	4
  4978     0453  1383               	bcf	3,7	;select IRP bank0
  4979     0454  0800               	movf	0,w
  4980     0455  00F0               	movwf	SetBit@port
  4981     0456  0A84               	incf	4,f
  4982     0457  0800               	movf	0,w
  4983     0458  0384               	decf	4,f
  4984     0459  00F1               	movwf	SetBit@port+1
  4985     045A  087C               	movf	Lcd_WriteChar@config,w
  4986     045B  3E07               	addlw	7
  4987     045C  0084               	movwf	4
  4988     045D  0800               	movf	0,w
  4989     045E  00F2               	movwf	SetBit@pin
  4990     045F  0879               	movf	Lcd_WriteChar@data,w
  4991     0460  00FB               	movwf	??_Lcd_WriteChar+1
  4992     0461  3007               	movlw	7
  4993     0462                     u2415:
  4994     0462  1003               	clrc
  4995     0463  0CFB               	rrf	??_Lcd_WriteChar+1,f
  4996     0464  3EFF               	addlw	-1
  4997     0465  1D03               	skipz
  4998     0466  2C62               	goto	u2415
  4999     0467  1C7B               	btfss	??_Lcd_WriteChar+1,0
  5000     0468  2C6B               	goto	u2420
  5001     0469  3001               	movlw	1
  5002     046A  2C6C               	goto	u2430
  5003     046B                     u2420:
  5004     046B  3000               	movlw	0
  5005     046C                     u2430:
  5006     046C  00F3               	movwf	SetBit@value
  5007     046D  120A  158A  2433  120A  118A  	fcall	_SetBit
  5008                           
  5009                           ;../../pic16flcd.c: 84:     SetBit(config->port, config->rs_pin, 1);
  5010     0472  087C               	movf	Lcd_WriteChar@config,w
  5011     0473  0084               	movwf	4
  5012     0474  1383               	bcf	3,7	;select IRP bank0
  5013     0475  0800               	movf	0,w
  5014     0476  00F0               	movwf	SetBit@port
  5015     0477  0A84               	incf	4,f
  5016     0478  0800               	movf	0,w
  5017     0479  0384               	decf	4,f
  5018     047A  00F1               	movwf	SetBit@port+1
  5019     047B  087C               	movf	Lcd_WriteChar@config,w
  5020     047C  3E02               	addlw	2
  5021     047D  0084               	movwf	4
  5022     047E  0800               	movf	0,w
  5023     047F  00F2               	movwf	SetBit@pin
  5024     0480  01F3               	clrf	SetBit@value
  5025     0481  0AF3               	incf	SetBit@value,f
  5026     0482  120A  158A  2433  120A  118A  	fcall	_SetBit
  5027                           
  5028                           ;../../pic16flcd.c: 85:     PulseEnable(config);
  5029     0487  087C               	movf	Lcd_WriteChar@config,w
  5030     0488  120A  158A  245D  120A  118A  	fcall	_PulseEnable
  5031                           
  5032                           ;../../pic16flcd.c: 88:     SetBit(config->port, config->d4_pin, data & 0x01);
  5033     048D  087C               	movf	Lcd_WriteChar@config,w
  5034     048E  0084               	movwf	4
  5035     048F  1383               	bcf	3,7	;select IRP bank0
  5036     0490  0800               	movf	0,w
  5037     0491  00F0               	movwf	SetBit@port
  5038     0492  0A84               	incf	4,f
  5039     0493  0800               	movf	0,w
  5040     0494  0384               	decf	4,f
  5041     0495  00F1               	movwf	SetBit@port+1
  5042     0496  087C               	movf	Lcd_WriteChar@config,w
  5043     0497  3E04               	addlw	4
  5044     0498  0084               	movwf	4
  5045     0499  0800               	movf	0,w
  5046     049A  00F2               	movwf	SetBit@pin
  5047     049B  1C79               	btfss	Lcd_WriteChar@data,0
  5048     049C  2C9F               	goto	u2440
  5049     049D  3001               	movlw	1
  5050     049E  2CA0               	goto	u2450
  5051     049F                     u2440:
  5052     049F  3000               	movlw	0
  5053     04A0                     u2450:
  5054     04A0  00F3               	movwf	SetBit@value
  5055     04A1  120A  158A  2433  120A  118A  	fcall	_SetBit
  5056                           
  5057                           ;../../pic16flcd.c: 89:     SetBit(config->port, config->d5_pin, (data >> 1) & 0x01);
  5058     04A6  087C               	movf	Lcd_WriteChar@config,w
  5059     04A7  0084               	movwf	4
  5060     04A8  1383               	bcf	3,7	;select IRP bank0
  5061     04A9  0800               	movf	0,w
  5062     04AA  00F0               	movwf	SetBit@port
  5063     04AB  0A84               	incf	4,f
  5064     04AC  0800               	movf	0,w
  5065     04AD  0384               	decf	4,f
  5066     04AE  00F1               	movwf	SetBit@port+1
  5067     04AF  087C               	movf	Lcd_WriteChar@config,w
  5068     04B0  3E05               	addlw	5
  5069     04B1  0084               	movwf	4
  5070     04B2  0800               	movf	0,w
  5071     04B3  00F2               	movwf	SetBit@pin
  5072     04B4  0879               	movf	Lcd_WriteChar@data,w
  5073     04B5  00FB               	movwf	??_Lcd_WriteChar+1
  5074     04B6  3001               	movlw	1
  5075     04B7                     u2465:
  5076     04B7  1003               	clrc
  5077     04B8  0CFB               	rrf	??_Lcd_WriteChar+1,f
  5078     04B9  3EFF               	addlw	-1
  5079     04BA  1D03               	skipz
  5080     04BB  2CB7               	goto	u2465
  5081     04BC  1C7B               	btfss	??_Lcd_WriteChar+1,0
  5082     04BD  2CC0               	goto	u2470
  5083     04BE  3001               	movlw	1
  5084     04BF  2CC1               	goto	u2480
  5085     04C0                     u2470:
  5086     04C0  3000               	movlw	0
  5087     04C1                     u2480:
  5088     04C1  00F3               	movwf	SetBit@value
  5089     04C2  120A  158A  2433  120A  118A  	fcall	_SetBit
  5090                           
  5091                           ;../../pic16flcd.c: 90:     SetBit(config->port, config->d6_pin, (data >> 2) & 0x01);
  5092     04C7  087C               	movf	Lcd_WriteChar@config,w
  5093     04C8  0084               	movwf	4
  5094     04C9  1383               	bcf	3,7	;select IRP bank0
  5095     04CA  0800               	movf	0,w
  5096     04CB  00F0               	movwf	SetBit@port
  5097     04CC  0A84               	incf	4,f
  5098     04CD  0800               	movf	0,w
  5099     04CE  0384               	decf	4,f
  5100     04CF  00F1               	movwf	SetBit@port+1
  5101     04D0  087C               	movf	Lcd_WriteChar@config,w
  5102     04D1  3E06               	addlw	6
  5103     04D2  0084               	movwf	4
  5104     04D3  0800               	movf	0,w
  5105     04D4  00F2               	movwf	SetBit@pin
  5106     04D5  0879               	movf	Lcd_WriteChar@data,w
  5107     04D6  00FB               	movwf	??_Lcd_WriteChar+1
  5108     04D7  3002               	movlw	2
  5109     04D8                     u2495:
  5110     04D8  1003               	clrc
  5111     04D9  0CFB               	rrf	??_Lcd_WriteChar+1,f
  5112     04DA  3EFF               	addlw	-1
  5113     04DB  1D03               	skipz
  5114     04DC  2CD8               	goto	u2495
  5115     04DD  1C7B               	btfss	??_Lcd_WriteChar+1,0
  5116     04DE  2CE1               	goto	u2500
  5117     04DF  3001               	movlw	1
  5118     04E0  2CE2               	goto	u2510
  5119     04E1                     u2500:
  5120     04E1  3000               	movlw	0
  5121     04E2                     u2510:
  5122     04E2  00F3               	movwf	SetBit@value
  5123     04E3  120A  158A  2433  120A  118A  	fcall	_SetBit
  5124                           
  5125                           ;../../pic16flcd.c: 91:     SetBit(config->port, config->d7_pin, (data >> 3) & 0x01);
  5126     04E8  087C               	movf	Lcd_WriteChar@config,w
  5127     04E9  0084               	movwf	4
  5128     04EA  1383               	bcf	3,7	;select IRP bank0
  5129     04EB  0800               	movf	0,w
  5130     04EC  00F0               	movwf	SetBit@port
  5131     04ED  0A84               	incf	4,f
  5132     04EE  0800               	movf	0,w
  5133     04EF  0384               	decf	4,f
  5134     04F0  00F1               	movwf	SetBit@port+1
  5135     04F1  087C               	movf	Lcd_WriteChar@config,w
  5136     04F2  3E07               	addlw	7
  5137     04F3  0084               	movwf	4
  5138     04F4  0800               	movf	0,w
  5139     04F5  00F2               	movwf	SetBit@pin
  5140     04F6  0879               	movf	Lcd_WriteChar@data,w
  5141     04F7  00FB               	movwf	??_Lcd_WriteChar+1
  5142     04F8  3003               	movlw	3
  5143     04F9                     u2525:
  5144     04F9  1003               	clrc
  5145     04FA  0CFB               	rrf	??_Lcd_WriteChar+1,f
  5146     04FB  3EFF               	addlw	-1
  5147     04FC  1D03               	skipz
  5148     04FD  2CF9               	goto	u2525
  5149     04FE  1C7B               	btfss	??_Lcd_WriteChar+1,0
  5150     04FF  2D02               	goto	u2530
  5151     0500  3001               	movlw	1
  5152     0501  2D03               	goto	u2540
  5153     0502                     u2530:
  5154     0502  3000               	movlw	0
  5155     0503                     u2540:
  5156     0503  00F3               	movwf	SetBit@value
  5157     0504  120A  158A  2433  120A  118A  	fcall	_SetBit
  5158                           
  5159                           ;../../pic16flcd.c: 93:     PulseEnable(config);
  5160     0509  087C               	movf	Lcd_WriteChar@config,w
  5161     050A  120A  158A  245D   	fcall	_PulseEnable
  5162     050D  0008               	return
  5163     050E                     __end_of_Lcd_WriteChar:
  5164                           
  5165                           	psect	text27
  5166     0B7F                     __ptext27:	
  5167 ;; *************** function _Lcd_SetCursor *****************
  5168 ;; Defined at:
  5169 ;;		line 148 in file "../../pic16flcd.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  config          1    wreg     PTR struct .
  5172 ;;		 -> main@lcd(8), 
  5173 ;;  row             1    0[BANK0 ] unsigned char 
  5174 ;;  column          1    1[BANK0 ] unsigned char 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  config          1    5[BANK0 ] PTR struct .
  5177 ;;		 -> main@lcd(8), 
  5178 ;;  address         1    4[BANK0 ] unsigned char 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      void 
  5181 ;; Registers used:
  5182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 300/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5188 ;;      Params:         0       2       0       0       0
  5189 ;;      Locals:         0       2       0       0       0
  5190 ;;      Temps:          0       2       0       0       0
  5191 ;;      Totals:         0       6       0       0       0
  5192 ;;Total ram usage:        6 bytes
  5193 ;; Hardware stack levels used: 1
  5194 ;; Hardware stack levels required when called: 3
  5195 ;; This function calls:
  5196 ;;		_Lcd_Command
  5197 ;; This function is called by:
  5198 ;;		_main
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202     0B7F                     _Lcd_SetCursor:	
  5203                           ;psect for function _Lcd_SetCursor
  5204                           
  5205                           
  5206                           ;incstack = 0
  5207                           ; Regs used in _Lcd_SetCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5208                           ;Lcd_SetCursor@config stored from wreg
  5209     0B7F  00A5               	movwf	Lcd_SetCursor@config
  5210                           
  5211                           ;../../pic16flcd.c: 149:     unsigned char address;;../../pic16flcd.c: 152:     switch(r
      +                          ow) {
  5212     0B80  2B86               	goto	l1776
  5213     0B81                     l1770:
  5214                           
  5215                           ;../../pic16flcd.c: 154:             address = 0x80;
  5216     0B81  3080               	movlw	128
  5217     0B82  2B84               	goto	L1
  5218     0B83                     l1772:	
  5219                           ;../../pic16flcd.c: 155:             break;
  5220                           
  5221                           
  5222                           ;../../pic16flcd.c: 157:             address = 0xC0;
  5223     0B83  30C0               	movlw	192
  5224     0B84                     L1:
  5225     0B84  00A4               	movwf	Lcd_SetCursor@address
  5226                           
  5227                           ;../../pic16flcd.c: 158:             break;
  5228     0B85  2B96               	goto	l1778
  5229     0B86                     l1776:
  5230     0B86  0820               	movf	Lcd_SetCursor@row,w
  5231     0B87  00A2               	movwf	??_Lcd_SetCursor
  5232     0B88  01A3               	clrf	??_Lcd_SetCursor+1
  5233                           
  5234                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5235                           ; Switch size 1, requested type "simple"
  5236                           ; Number of cases is 1, Range of values is 0 to 0
  5237                           ; switch strategies available:
  5238                           ; Name         Instructions Cycles
  5239                           ; simple_byte            4     3 (average)
  5240                           ; direct_byte           11     8 (fixed)
  5241                           ; jumptable            260     6 (fixed)
  5242                           ;	Chosen strategy is simple_byte
  5243     0B89  0823               	movf	??_Lcd_SetCursor+1,w
  5244     0B8A  3A00               	xorlw	0	; case 0
  5245     0B8B  1903               	skipnz
  5246     0B8C  2B8E               	goto	l2154
  5247     0B8D  2B81               	goto	l1770
  5248     0B8E                     l2154:
  5249                           
  5250                           ; Switch size 1, requested type "simple"
  5251                           ; Number of cases is 2, Range of values is 1 to 2
  5252                           ; switch strategies available:
  5253                           ; Name         Instructions Cycles
  5254                           ; simple_byte            7     4 (average)
  5255                           ; direct_byte           17    11 (fixed)
  5256                           ; jumptable            263     9 (fixed)
  5257                           ;	Chosen strategy is simple_byte
  5258     0B8E  0822               	movf	??_Lcd_SetCursor,w
  5259     0B8F  3A01               	xorlw	1	; case 1
  5260     0B90  1903               	skipnz
  5261     0B91  2B81               	goto	l1770
  5262     0B92  3A03               	xorlw	3	; case 2
  5263     0B93  1903               	skipnz
  5264     0B94  2B83               	goto	l1772
  5265     0B95  2B81               	goto	l1770
  5266     0B96                     l1778:
  5267                           
  5268                           ;../../pic16flcd.c: 164:     address += (column - 1);
  5269     0B96  0821               	movf	Lcd_SetCursor@column,w
  5270     0B97  3EFF               	addlw	255
  5271     0B98  00A2               	movwf	??_Lcd_SetCursor
  5272     0B99  0822               	movf	??_Lcd_SetCursor,w
  5273     0B9A  07A4               	addwf	Lcd_SetCursor@address,f
  5274                           
  5275                           ;../../pic16flcd.c: 167:     Lcd_Command(config, address);
  5276     0B9B  0824               	movf	Lcd_SetCursor@address,w
  5277     0B9C  00F9               	movwf	Lcd_Command@cmd
  5278     0B9D  0825               	movf	Lcd_SetCursor@config,w
  5279     0B9E  120A  118A  22CD   	fcall	_Lcd_Command
  5280     0BA1  0008               	return
  5281     0BA2                     __end_of_Lcd_SetCursor:
  5282                           
  5283                           	psect	text28
  5284     001B                     __ptext28:	
  5285 ;; *************** function _Lcd_Init *****************
  5286 ;; Defined at:
  5287 ;;		line 110 in file "../../pic16flcd.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  config          1    wreg     PTR struct .
  5290 ;;		 -> main@lcd(8), 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  config          1    4[BANK0 ] PTR struct .
  5293 ;;		 -> main@lcd(8), 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : B00/100
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5303 ;;      Params:         0       0       0       0       0
  5304 ;;      Locals:         0       1       0       0       0
  5305 ;;      Temps:          0       2       0       0       0
  5306 ;;      Totals:         0       3       0       0       0
  5307 ;;Total ram usage:        3 bytes
  5308 ;; Hardware stack levels used: 1
  5309 ;; Hardware stack levels required when called: 4
  5310 ;; This function calls:
  5311 ;;		_Lcd_Clear
  5312 ;;		_Lcd_Command
  5313 ;; This function is called by:
  5314 ;;		_main
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318     001B                     _Lcd_Init:	
  5319                           ;psect for function _Lcd_Init
  5320                           
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _Lcd_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5324                           ;Lcd_Init@config stored from wreg
  5325     001B  1283               	bcf	3,5	;RP0=0, select bank0
  5326     001C  00A4               	movwf	Lcd_Init@config
  5327                           
  5328                           ;../../pic16flcd.c: 116:     _delay((unsigned long)((15)*(4000000/4000.0)));
  5329     001D  3014               	movlw	20
  5330     001E  1283               	bcf	3,5	;RP0=0, select bank0
  5331     001F  1303               	bcf	3,6	;RP1=0, select bank0
  5332     0020  00A3               	movwf	??_Lcd_Init+1
  5333     0021  3079               	movlw	121
  5334     0022  00A2               	movwf	??_Lcd_Init
  5335     0023                     u3447:
  5336     0023  0BA2               	decfsz	??_Lcd_Init,f
  5337     0024  2823               	goto	u3447
  5338     0025  0BA3               	decfsz	??_Lcd_Init+1,f
  5339     0026  2823               	goto	u3447
  5340                           
  5341                           ;../../pic16flcd.c: 117:     Lcd_Command(config, 0x03);
  5342     0027  3003               	movlw	3
  5343     0028  00F9               	movwf	Lcd_Command@cmd
  5344     0029  1283               	bcf	3,5	;RP0=0, select bank0
  5345     002A  1303               	bcf	3,6	;RP1=0, select bank0
  5346     002B  0824               	movf	Lcd_Init@config,w
  5347     002C  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5348                           
  5349                           ;../../pic16flcd.c: 118:     _delay((unsigned long)((5)*(4000000/4000.0)));
  5350     0031  3007               	movlw	7
  5351     0032  1283               	bcf	3,5	;RP0=0, select bank0
  5352     0033  1303               	bcf	3,6	;RP1=0, select bank0
  5353     0034  00A3               	movwf	??_Lcd_Init+1
  5354     0035  307C               	movlw	124
  5355     0036  00A2               	movwf	??_Lcd_Init
  5356     0037                     u3457:
  5357     0037  0BA2               	decfsz	??_Lcd_Init,f
  5358     0038  2837               	goto	u3457
  5359     0039  0BA3               	decfsz	??_Lcd_Init+1,f
  5360     003A  2837               	goto	u3457
  5361     003B  0000               	nop
  5362                           
  5363                           ;../../pic16flcd.c: 119:     Lcd_Command(config, 0x03);
  5364     003C  3003               	movlw	3
  5365     003D  00F9               	movwf	Lcd_Command@cmd
  5366     003E  1283               	bcf	3,5	;RP0=0, select bank0
  5367     003F  1303               	bcf	3,6	;RP1=0, select bank0
  5368     0040  0824               	movf	Lcd_Init@config,w
  5369     0041  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5370                           
  5371                           ;../../pic16flcd.c: 120:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  5372     0046  3020               	movlw	32
  5373     0047  1283               	bcf	3,5	;RP0=0, select bank0
  5374     0048  1303               	bcf	3,6	;RP1=0, select bank0
  5375     0049  00A2               	movwf	??_Lcd_Init
  5376     004A                     u3467:
  5377     004A  0BA2               	decfsz	??_Lcd_Init,f
  5378     004B  284A               	goto	u3467
  5379     004C  0000               	nop
  5380                           
  5381                           ;../../pic16flcd.c: 121:     Lcd_Command(config, 0x03);
  5382     004D  3003               	movlw	3
  5383     004E  00F9               	movwf	Lcd_Command@cmd
  5384     004F  1283               	bcf	3,5	;RP0=0, select bank0
  5385     0050  1303               	bcf	3,6	;RP1=0, select bank0
  5386     0051  0824               	movf	Lcd_Init@config,w
  5387     0052  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5388                           
  5389                           ;../../pic16flcd.c: 122:     Lcd_Command(config, 0x02);
  5390     0057  3002               	movlw	2
  5391     0058  00F9               	movwf	Lcd_Command@cmd
  5392     0059  1283               	bcf	3,5	;RP0=0, select bank0
  5393     005A  1303               	bcf	3,6	;RP1=0, select bank0
  5394     005B  0824               	movf	Lcd_Init@config,w
  5395     005C  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5396                           
  5397                           ;../../pic16flcd.c: 124:     Lcd_Command(config, 0x28);
  5398     0061  3028               	movlw	40
  5399     0062  00F9               	movwf	Lcd_Command@cmd
  5400     0063  1283               	bcf	3,5	;RP0=0, select bank0
  5401     0064  1303               	bcf	3,6	;RP1=0, select bank0
  5402     0065  0824               	movf	Lcd_Init@config,w
  5403     0066  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5404                           
  5405                           ;../../pic16flcd.c: 125:     Lcd_Command(config, 0x0C);
  5406     006B  300C               	movlw	12
  5407     006C  00F9               	movwf	Lcd_Command@cmd
  5408     006D  1283               	bcf	3,5	;RP0=0, select bank0
  5409     006E  1303               	bcf	3,6	;RP1=0, select bank0
  5410     006F  0824               	movf	Lcd_Init@config,w
  5411     0070  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5412                           
  5413                           ;../../pic16flcd.c: 126:     Lcd_Command(config, 0x06);
  5414     0075  3006               	movlw	6
  5415     0076  00F9               	movwf	Lcd_Command@cmd
  5416     0077  1283               	bcf	3,5	;RP0=0, select bank0
  5417     0078  1303               	bcf	3,6	;RP1=0, select bank0
  5418     0079  0824               	movf	Lcd_Init@config,w
  5419     007A  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5420                           
  5421                           ;../../pic16flcd.c: 127:     Lcd_Clear(config);
  5422     007F  1283               	bcf	3,5	;RP0=0, select bank0
  5423     0080  1303               	bcf	3,6	;RP1=0, select bank0
  5424     0081  0824               	movf	Lcd_Init@config,w
  5425     0082  120A  118A  2007   	fcall	_Lcd_Clear
  5426     0085  0008               	return
  5427     0086                     __end_of_Lcd_Init:
  5428                           
  5429                           	psect	text29
  5430     0007                     __ptext29:	
  5431 ;; *************** function _Lcd_Clear *****************
  5432 ;; Defined at:
  5433 ;;		line 135 in file "../../pic16flcd.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;  config          1    wreg     PTR struct .
  5436 ;;		 -> main@lcd(8), 
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;  config          1   13[COMMON] PTR struct .
  5439 ;;		 -> main@lcd(8), 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/100
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5449 ;;      Params:         0       0       0       0       0
  5450 ;;      Locals:         1       0       0       0       0
  5451 ;;      Temps:          0       2       0       0       0
  5452 ;;      Totals:         1       2       0       0       0
  5453 ;;Total ram usage:        3 bytes
  5454 ;; Hardware stack levels used: 1
  5455 ;; Hardware stack levels required when called: 3
  5456 ;; This function calls:
  5457 ;;		_Lcd_Command
  5458 ;; This function is called by:
  5459 ;;		_Lcd_Init
  5460 ;;		_main
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464     0007                     _Lcd_Clear:	
  5465                           ;psect for function _Lcd_Clear
  5466                           
  5467                           
  5468                           ;incstack = 0
  5469                           ; Regs used in _Lcd_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5470                           ;Lcd_Clear@config stored from wreg
  5471     0007  00FD               	movwf	Lcd_Clear@config
  5472                           
  5473                           ;../../pic16flcd.c: 136:     Lcd_Command(config, 0x01);
  5474     0008  01F9               	clrf	Lcd_Command@cmd
  5475     0009  0AF9               	incf	Lcd_Command@cmd,f
  5476     000A  087D               	movf	Lcd_Clear@config,w
  5477     000B  120A  118A  22CD  120A  118A  	fcall	_Lcd_Command
  5478                           
  5479                           ;../../pic16flcd.c: 137:     _delay((unsigned long)((2)*(4000000/4000.0)));
  5480     0010  3003               	movlw	3
  5481     0011  1283               	bcf	3,5	;RP0=0, select bank0
  5482     0012  1303               	bcf	3,6	;RP1=0, select bank0
  5483     0013  00A1               	movwf	??_Lcd_Clear+1
  5484     0014  3097               	movlw	151
  5485     0015  00A0               	movwf	??_Lcd_Clear
  5486     0016                     u3477:
  5487     0016  0BA0               	decfsz	??_Lcd_Clear,f
  5488     0017  2816               	goto	u3477
  5489     0018  0BA1               	decfsz	??_Lcd_Clear+1,f
  5490     0019  2816               	goto	u3477
  5491     001A  0008               	return
  5492     001B                     __end_of_Lcd_Clear:
  5493                           
  5494                           	psect	text30
  5495     02CD                     __ptext30:	
  5496 ;; *************** function _Lcd_Command *****************
  5497 ;; Defined at:
  5498 ;;		line 51 in file "../../pic16flcd.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  config          1    wreg     PTR struct .
  5501 ;;		 -> main@lcd(8), 
  5502 ;;  cmd             1    9[COMMON] unsigned char 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  config          1   12[COMMON] PTR struct .
  5505 ;;		 -> main@lcd(8), 
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      void 
  5508 ;; Registers used:
  5509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5515 ;;      Params:         1       0       0       0       0
  5516 ;;      Locals:         1       0       0       0       0
  5517 ;;      Temps:          2       0       0       0       0
  5518 ;;      Totals:         4       0       0       0       0
  5519 ;;Total ram usage:        4 bytes
  5520 ;; Hardware stack levels used: 1
  5521 ;; Hardware stack levels required when called: 2
  5522 ;; This function calls:
  5523 ;;		_PulseEnable
  5524 ;;		_SetBit
  5525 ;; This function is called by:
  5526 ;;		_Lcd_Init
  5527 ;;		_Lcd_Clear
  5528 ;;		_Lcd_SetCursor
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532     02CD                     _Lcd_Command:	
  5533                           ;psect for function _Lcd_Command
  5534                           
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in _Lcd_Command: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5538                           ;Lcd_Command@config stored from wreg
  5539     02CD  00FC               	movwf	Lcd_Command@config
  5540                           
  5541                           ;../../pic16flcd.c: 53:     SetBit(config->port, config->d4_pin, (cmd >> 4) & 0x01);
  5542     02CE  087C               	movf	Lcd_Command@config,w
  5543     02CF  0084               	movwf	4
  5544     02D0  1383               	bcf	3,7	;select IRP bank0
  5545     02D1  0800               	movf	0,w
  5546     02D2  00F0               	movwf	SetBit@port
  5547     02D3  0A84               	incf	4,f
  5548     02D4  0800               	movf	0,w
  5549     02D5  0384               	decf	4,f
  5550     02D6  00F1               	movwf	SetBit@port+1
  5551     02D7  087C               	movf	Lcd_Command@config,w
  5552     02D8  3E04               	addlw	4
  5553     02D9  0084               	movwf	4
  5554     02DA  0800               	movf	0,w
  5555     02DB  00F2               	movwf	SetBit@pin
  5556     02DC  0879               	movf	Lcd_Command@cmd,w
  5557     02DD  00FB               	movwf	??_Lcd_Command+1
  5558     02DE  3004               	movlw	4
  5559     02DF                     u2065:
  5560     02DF  1003               	clrc
  5561     02E0  0CFB               	rrf	??_Lcd_Command+1,f
  5562     02E1  3EFF               	addlw	-1
  5563     02E2  1D03               	skipz
  5564     02E3  2ADF               	goto	u2065
  5565     02E4  1C7B               	btfss	??_Lcd_Command+1,0
  5566     02E5  2AE8               	goto	u2070
  5567     02E6  3001               	movlw	1
  5568     02E7  2AE9               	goto	u2080
  5569     02E8                     u2070:
  5570     02E8  3000               	movlw	0
  5571     02E9                     u2080:
  5572     02E9  00F3               	movwf	SetBit@value
  5573     02EA  120A  158A  2433  120A  118A  	fcall	_SetBit
  5574                           
  5575                           ;../../pic16flcd.c: 54:     SetBit(config->port, config->d5_pin, (cmd >> 5) & 0x01);
  5576     02EF  087C               	movf	Lcd_Command@config,w
  5577     02F0  0084               	movwf	4
  5578     02F1  1383               	bcf	3,7	;select IRP bank0
  5579     02F2  0800               	movf	0,w
  5580     02F3  00F0               	movwf	SetBit@port
  5581     02F4  0A84               	incf	4,f
  5582     02F5  0800               	movf	0,w
  5583     02F6  0384               	decf	4,f
  5584     02F7  00F1               	movwf	SetBit@port+1
  5585     02F8  087C               	movf	Lcd_Command@config,w
  5586     02F9  3E05               	addlw	5
  5587     02FA  0084               	movwf	4
  5588     02FB  0800               	movf	0,w
  5589     02FC  00F2               	movwf	SetBit@pin
  5590     02FD  0879               	movf	Lcd_Command@cmd,w
  5591     02FE  00FB               	movwf	??_Lcd_Command+1
  5592     02FF  3005               	movlw	5
  5593     0300                     u2095:
  5594     0300  1003               	clrc
  5595     0301  0CFB               	rrf	??_Lcd_Command+1,f
  5596     0302  3EFF               	addlw	-1
  5597     0303  1D03               	skipz
  5598     0304  2B00               	goto	u2095
  5599     0305  1C7B               	btfss	??_Lcd_Command+1,0
  5600     0306  2B09               	goto	u2100
  5601     0307  3001               	movlw	1
  5602     0308  2B0A               	goto	u2110
  5603     0309                     u2100:
  5604     0309  3000               	movlw	0
  5605     030A                     u2110:
  5606     030A  00F3               	movwf	SetBit@value
  5607     030B  120A  158A  2433  120A  118A  	fcall	_SetBit
  5608                           
  5609                           ;../../pic16flcd.c: 55:     SetBit(config->port, config->d6_pin, (cmd >> 6) & 0x01);
  5610     0310  087C               	movf	Lcd_Command@config,w
  5611     0311  0084               	movwf	4
  5612     0312  1383               	bcf	3,7	;select IRP bank0
  5613     0313  0800               	movf	0,w
  5614     0314  00F0               	movwf	SetBit@port
  5615     0315  0A84               	incf	4,f
  5616     0316  0800               	movf	0,w
  5617     0317  0384               	decf	4,f
  5618     0318  00F1               	movwf	SetBit@port+1
  5619     0319  087C               	movf	Lcd_Command@config,w
  5620     031A  3E06               	addlw	6
  5621     031B  0084               	movwf	4
  5622     031C  0800               	movf	0,w
  5623     031D  00F2               	movwf	SetBit@pin
  5624     031E  0879               	movf	Lcd_Command@cmd,w
  5625     031F  00FB               	movwf	??_Lcd_Command+1
  5626     0320  3006               	movlw	6
  5627     0321                     u2125:
  5628     0321  1003               	clrc
  5629     0322  0CFB               	rrf	??_Lcd_Command+1,f
  5630     0323  3EFF               	addlw	-1
  5631     0324  1D03               	skipz
  5632     0325  2B21               	goto	u2125
  5633     0326  1C7B               	btfss	??_Lcd_Command+1,0
  5634     0327  2B2A               	goto	u2130
  5635     0328  3001               	movlw	1
  5636     0329  2B2B               	goto	u2140
  5637     032A                     u2130:
  5638     032A  3000               	movlw	0
  5639     032B                     u2140:
  5640     032B  00F3               	movwf	SetBit@value
  5641     032C  120A  158A  2433  120A  118A  	fcall	_SetBit
  5642                           
  5643                           ;../../pic16flcd.c: 56:     SetBit(config->port, config->d7_pin, (cmd >> 7) & 0x01);
  5644     0331  087C               	movf	Lcd_Command@config,w
  5645     0332  0084               	movwf	4
  5646     0333  1383               	bcf	3,7	;select IRP bank0
  5647     0334  0800               	movf	0,w
  5648     0335  00F0               	movwf	SetBit@port
  5649     0336  0A84               	incf	4,f
  5650     0337  0800               	movf	0,w
  5651     0338  0384               	decf	4,f
  5652     0339  00F1               	movwf	SetBit@port+1
  5653     033A  087C               	movf	Lcd_Command@config,w
  5654     033B  3E07               	addlw	7
  5655     033C  0084               	movwf	4
  5656     033D  0800               	movf	0,w
  5657     033E  00F2               	movwf	SetBit@pin
  5658     033F  0879               	movf	Lcd_Command@cmd,w
  5659     0340  00FB               	movwf	??_Lcd_Command+1
  5660     0341  3007               	movlw	7
  5661     0342                     u2155:
  5662     0342  1003               	clrc
  5663     0343  0CFB               	rrf	??_Lcd_Command+1,f
  5664     0344  3EFF               	addlw	-1
  5665     0345  1D03               	skipz
  5666     0346  2B42               	goto	u2155
  5667     0347  1C7B               	btfss	??_Lcd_Command+1,0
  5668     0348  2B4B               	goto	u2160
  5669     0349  3001               	movlw	1
  5670     034A  2B4C               	goto	u2170
  5671     034B                     u2160:
  5672     034B  3000               	movlw	0
  5673     034C                     u2170:
  5674     034C  00F3               	movwf	SetBit@value
  5675     034D  120A  158A  2433  120A  118A  	fcall	_SetBit
  5676                           
  5677                           ;../../pic16flcd.c: 58:     SetBit(config->port, config->rs_pin, 0);
  5678     0352  087C               	movf	Lcd_Command@config,w
  5679     0353  0084               	movwf	4
  5680     0354  1383               	bcf	3,7	;select IRP bank0
  5681     0355  0800               	movf	0,w
  5682     0356  00F0               	movwf	SetBit@port
  5683     0357  0A84               	incf	4,f
  5684     0358  0800               	movf	0,w
  5685     0359  0384               	decf	4,f
  5686     035A  00F1               	movwf	SetBit@port+1
  5687     035B  087C               	movf	Lcd_Command@config,w
  5688     035C  3E02               	addlw	2
  5689     035D  0084               	movwf	4
  5690     035E  0800               	movf	0,w
  5691     035F  00F2               	movwf	SetBit@pin
  5692     0360  01F3               	clrf	SetBit@value
  5693     0361  120A  158A  2433  120A  118A  	fcall	_SetBit
  5694                           
  5695                           ;../../pic16flcd.c: 59:     PulseEnable(config);
  5696     0366  087C               	movf	Lcd_Command@config,w
  5697     0367  120A  158A  245D  120A  118A  	fcall	_PulseEnable
  5698                           
  5699                           ;../../pic16flcd.c: 62:     SetBit(config->port, config->d4_pin, cmd & 0x01);
  5700     036C  087C               	movf	Lcd_Command@config,w
  5701     036D  0084               	movwf	4
  5702     036E  1383               	bcf	3,7	;select IRP bank0
  5703     036F  0800               	movf	0,w
  5704     0370  00F0               	movwf	SetBit@port
  5705     0371  0A84               	incf	4,f
  5706     0372  0800               	movf	0,w
  5707     0373  0384               	decf	4,f
  5708     0374  00F1               	movwf	SetBit@port+1
  5709     0375  087C               	movf	Lcd_Command@config,w
  5710     0376  3E04               	addlw	4
  5711     0377  0084               	movwf	4
  5712     0378  0800               	movf	0,w
  5713     0379  00F2               	movwf	SetBit@pin
  5714     037A  1C79               	btfss	Lcd_Command@cmd,0
  5715     037B  2B7E               	goto	u2180
  5716     037C  3001               	movlw	1
  5717     037D  2B7F               	goto	u2190
  5718     037E                     u2180:
  5719     037E  3000               	movlw	0
  5720     037F                     u2190:
  5721     037F  00F3               	movwf	SetBit@value
  5722     0380  120A  158A  2433  120A  118A  	fcall	_SetBit
  5723                           
  5724                           ;../../pic16flcd.c: 63:     SetBit(config->port, config->d5_pin, (cmd >> 1) & 0x01);
  5725     0385  087C               	movf	Lcd_Command@config,w
  5726     0386  0084               	movwf	4
  5727     0387  1383               	bcf	3,7	;select IRP bank0
  5728     0388  0800               	movf	0,w
  5729     0389  00F0               	movwf	SetBit@port
  5730     038A  0A84               	incf	4,f
  5731     038B  0800               	movf	0,w
  5732     038C  0384               	decf	4,f
  5733     038D  00F1               	movwf	SetBit@port+1
  5734     038E  087C               	movf	Lcd_Command@config,w
  5735     038F  3E05               	addlw	5
  5736     0390  0084               	movwf	4
  5737     0391  0800               	movf	0,w
  5738     0392  00F2               	movwf	SetBit@pin
  5739     0393  0879               	movf	Lcd_Command@cmd,w
  5740     0394  00FB               	movwf	??_Lcd_Command+1
  5741     0395  3001               	movlw	1
  5742     0396                     u2205:
  5743     0396  1003               	clrc
  5744     0397  0CFB               	rrf	??_Lcd_Command+1,f
  5745     0398  3EFF               	addlw	-1
  5746     0399  1D03               	skipz
  5747     039A  2B96               	goto	u2205
  5748     039B  1C7B               	btfss	??_Lcd_Command+1,0
  5749     039C  2B9F               	goto	u2210
  5750     039D  3001               	movlw	1
  5751     039E  2BA0               	goto	u2220
  5752     039F                     u2210:
  5753     039F  3000               	movlw	0
  5754     03A0                     u2220:
  5755     03A0  00F3               	movwf	SetBit@value
  5756     03A1  120A  158A  2433  120A  118A  	fcall	_SetBit
  5757                           
  5758                           ;../../pic16flcd.c: 64:     SetBit(config->port, config->d6_pin, (cmd >> 2) & 0x01);
  5759     03A6  087C               	movf	Lcd_Command@config,w
  5760     03A7  0084               	movwf	4
  5761     03A8  1383               	bcf	3,7	;select IRP bank0
  5762     03A9  0800               	movf	0,w
  5763     03AA  00F0               	movwf	SetBit@port
  5764     03AB  0A84               	incf	4,f
  5765     03AC  0800               	movf	0,w
  5766     03AD  0384               	decf	4,f
  5767     03AE  00F1               	movwf	SetBit@port+1
  5768     03AF  087C               	movf	Lcd_Command@config,w
  5769     03B0  3E06               	addlw	6
  5770     03B1  0084               	movwf	4
  5771     03B2  0800               	movf	0,w
  5772     03B3  00F2               	movwf	SetBit@pin
  5773     03B4  0879               	movf	Lcd_Command@cmd,w
  5774     03B5  00FB               	movwf	??_Lcd_Command+1
  5775     03B6  3002               	movlw	2
  5776     03B7                     u2235:
  5777     03B7  1003               	clrc
  5778     03B8  0CFB               	rrf	??_Lcd_Command+1,f
  5779     03B9  3EFF               	addlw	-1
  5780     03BA  1D03               	skipz
  5781     03BB  2BB7               	goto	u2235
  5782     03BC  1C7B               	btfss	??_Lcd_Command+1,0
  5783     03BD  2BC0               	goto	u2240
  5784     03BE  3001               	movlw	1
  5785     03BF  2BC1               	goto	u2250
  5786     03C0                     u2240:
  5787     03C0  3000               	movlw	0
  5788     03C1                     u2250:
  5789     03C1  00F3               	movwf	SetBit@value
  5790     03C2  120A  158A  2433  120A  118A  	fcall	_SetBit
  5791                           
  5792                           ;../../pic16flcd.c: 65:     SetBit(config->port, config->d7_pin, (cmd >> 3) & 0x01);
  5793     03C7  087C               	movf	Lcd_Command@config,w
  5794     03C8  0084               	movwf	4
  5795     03C9  1383               	bcf	3,7	;select IRP bank0
  5796     03CA  0800               	movf	0,w
  5797     03CB  00F0               	movwf	SetBit@port
  5798     03CC  0A84               	incf	4,f
  5799     03CD  0800               	movf	0,w
  5800     03CE  0384               	decf	4,f
  5801     03CF  00F1               	movwf	SetBit@port+1
  5802     03D0  087C               	movf	Lcd_Command@config,w
  5803     03D1  3E07               	addlw	7
  5804     03D2  0084               	movwf	4
  5805     03D3  0800               	movf	0,w
  5806     03D4  00F2               	movwf	SetBit@pin
  5807     03D5  0879               	movf	Lcd_Command@cmd,w
  5808     03D6  00FB               	movwf	??_Lcd_Command+1
  5809     03D7  3003               	movlw	3
  5810     03D8                     u2265:
  5811     03D8  1003               	clrc
  5812     03D9  0CFB               	rrf	??_Lcd_Command+1,f
  5813     03DA  3EFF               	addlw	-1
  5814     03DB  1D03               	skipz
  5815     03DC  2BD8               	goto	u2265
  5816     03DD  1C7B               	btfss	??_Lcd_Command+1,0
  5817     03DE  2BE1               	goto	u2270
  5818     03DF  3001               	movlw	1
  5819     03E0  2BE2               	goto	u2280
  5820     03E1                     u2270:
  5821     03E1  3000               	movlw	0
  5822     03E2                     u2280:
  5823     03E2  00F3               	movwf	SetBit@value
  5824     03E3  120A  158A  2433  120A  118A  	fcall	_SetBit
  5825                           
  5826                           ;../../pic16flcd.c: 67:     PulseEnable(config);
  5827     03E8  087C               	movf	Lcd_Command@config,w
  5828     03E9  120A  158A  245D   	fcall	_PulseEnable
  5829     03EC  0008               	return
  5830     03ED                     __end_of_Lcd_Command:
  5831                           
  5832                           	psect	text31
  5833     0C5D                     __ptext31:	
  5834 ;; *************** function _PulseEnable *****************
  5835 ;; Defined at:
  5836 ;;		line 37 in file "../../pic16flcd.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  config          1    wreg     PTR struct .
  5839 ;;		 -> main@lcd(8), 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;  config          1    8[COMMON] PTR struct .
  5842 ;;		 -> main@lcd(8), 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5852 ;;      Params:         0       0       0       0       0
  5853 ;;      Locals:         1       0       0       0       0
  5854 ;;      Temps:          2       0       0       0       0
  5855 ;;      Totals:         3       0       0       0       0
  5856 ;;Total ram usage:        3 bytes
  5857 ;; Hardware stack levels used: 1
  5858 ;; Hardware stack levels required when called: 1
  5859 ;; This function calls:
  5860 ;;		_SetBit
  5861 ;; This function is called by:
  5862 ;;		_Lcd_Command
  5863 ;;		_Lcd_WriteChar
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867     0C5D                     _PulseEnable:	
  5868                           ;psect for function _PulseEnable
  5869                           
  5870                           
  5871                           ;incstack = 0
  5872                           ; Regs used in _PulseEnable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5873                           ;PulseEnable@config stored from wreg
  5874     0C5D  00F8               	movwf	PulseEnable@config
  5875                           
  5876                           ;../../pic16flcd.c: 38:     SetBit(config->port, config->en_pin, 1);
  5877     0C5E  0878               	movf	PulseEnable@config,w
  5878     0C5F  0084               	movwf	4
  5879     0C60  1383               	bcf	3,7	;select IRP bank0
  5880     0C61  0800               	movf	0,w
  5881     0C62  00F0               	movwf	SetBit@port
  5882     0C63  0A84               	incf	4,f
  5883     0C64  0800               	movf	0,w
  5884     0C65  0384               	decf	4,f
  5885     0C66  00F1               	movwf	SetBit@port+1
  5886     0C67  0878               	movf	PulseEnable@config,w
  5887     0C68  3E03               	addlw	3
  5888     0C69  0084               	movwf	4
  5889     0C6A  0800               	movf	0,w
  5890     0C6B  00F2               	movwf	SetBit@pin
  5891     0C6C  01F3               	clrf	SetBit@value
  5892     0C6D  0AF3               	incf	SetBit@value,f
  5893     0C6E  120A  158A  2433  120A  158A  	fcall	_SetBit
  5894                           
  5895                           ;../../pic16flcd.c: 39:     _delay((unsigned long)((2)*(4000000/4000.0)));
  5896     0C73  3003               	movlw	3
  5897     0C74  00F7               	movwf	??_PulseEnable+1
  5898     0C75  3097               	movlw	151
  5899     0C76  00F6               	movwf	??_PulseEnable
  5900     0C77                     u3487:
  5901     0C77  0BF6               	decfsz	??_PulseEnable,f
  5902     0C78  2C77               	goto	u3487
  5903     0C79  0BF7               	decfsz	??_PulseEnable+1,f
  5904     0C7A  2C77               	goto	u3487
  5905     0C7B  2C7C               	nop2
  5906                           
  5907                           ;../../pic16flcd.c: 40:     SetBit(config->port, config->en_pin, 0);
  5908     0C7C  0878               	movf	PulseEnable@config,w
  5909     0C7D  0084               	movwf	4
  5910     0C7E  1383               	bcf	3,7	;select IRP bank0
  5911     0C7F  0800               	movf	0,w
  5912     0C80  00F0               	movwf	SetBit@port
  5913     0C81  0A84               	incf	4,f
  5914     0C82  0800               	movf	0,w
  5915     0C83  0384               	decf	4,f
  5916     0C84  00F1               	movwf	SetBit@port+1
  5917     0C85  0878               	movf	PulseEnable@config,w
  5918     0C86  3E03               	addlw	3
  5919     0C87  0084               	movwf	4
  5920     0C88  0800               	movf	0,w
  5921     0C89  00F2               	movwf	SetBit@pin
  5922     0C8A  01F3               	clrf	SetBit@value
  5923     0C8B  120A  158A  2433   	fcall	_SetBit
  5924     0C8E  0008               	return
  5925     0C8F                     __end_of_PulseEnable:
  5926                           
  5927                           	psect	text32
  5928     0C33                     __ptext32:	
  5929 ;; *************** function _SetBit *****************
  5930 ;; Defined at:
  5931 ;;		line 23 in file "../../pic16flcd.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;  port            2    0[COMMON] PTR volatile unsigned ch
  5934 ;;		 -> PORTD(1), 
  5935 ;;  pin             1    2[COMMON] unsigned char 
  5936 ;;  value           1    3[COMMON] _Bool 
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      void 
  5941 ;; Registers used:
  5942 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5943 ;; Tracked objects:
  5944 ;;		On entry : 800/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5948 ;;      Params:         4       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0
  5950 ;;      Temps:          2       0       0       0       0
  5951 ;;      Totals:         6       0       0       0       0
  5952 ;;Total ram usage:        6 bytes
  5953 ;; Hardware stack levels used: 1
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_PulseEnable
  5958 ;;		_Lcd_Command
  5959 ;;		_Lcd_WriteChar
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963     0C33                     _SetBit:	
  5964                           ;psect for function _SetBit
  5965                           
  5966                           
  5967                           ;../../pic16flcd.c: 24:     if (value) {
  5968                           
  5969                           ;incstack = 0
  5970                           ; Regs used in _SetBit: [wreg-fsr0h+status,2+status,0]
  5971     0C33  0873               	movf	SetBit@value,w
  5972     0C34  1903               	btfsc	3,2
  5973     0C35  2C49               	goto	l1482
  5974                           
  5975                           ;../../pic16flcd.c: 25:         *port |= (1 << pin);
  5976     0C36  3001               	movlw	1
  5977     0C37  00F4               	movwf	??_SetBit
  5978     0C38  0A72               	incf	SetBit@pin,w
  5979     0C39  2C3C               	goto	u1784
  5980     0C3A                     u1785:
  5981     0C3A  1003               	clrc
  5982     0C3B  0DF4               	rlf	??_SetBit,f
  5983     0C3C                     u1784:
  5984     0C3C  3EFF               	addlw	-1
  5985     0C3D  1D03               	skipz
  5986     0C3E  2C3A               	goto	u1785
  5987     0C3F  0874               	movf	??_SetBit,w
  5988     0C40  00F5               	movwf	??_SetBit+1
  5989     0C41  0870               	movf	SetBit@port,w
  5990     0C42  0084               	movwf	4
  5991     0C43  1783               	bsf	3,7
  5992     0C44  1C71               	btfss	SetBit@port+1,0
  5993     0C45  1383               	bcf	3,7
  5994     0C46  0875               	movf	??_SetBit+1,w
  5995     0C47  0480               	iorwf	0,f
  5996                           
  5997                           ;../../pic16flcd.c: 26:     } else {
  5998     0C48  0008               	return
  5999     0C49                     l1482:
  6000                           
  6001                           ;../../pic16flcd.c: 27:         *port &= ~(1 << pin);
  6002     0C49  3001               	movlw	1
  6003     0C4A  00F4               	movwf	??_SetBit
  6004     0C4B  0A72               	incf	SetBit@pin,w
  6005     0C4C  2C4F               	goto	u1794
  6006     0C4D                     u1795:
  6007     0C4D  1003               	clrc
  6008     0C4E  0DF4               	rlf	??_SetBit,f
  6009     0C4F                     u1794:
  6010     0C4F  3EFF               	addlw	-1
  6011     0C50  1D03               	skipz
  6012     0C51  2C4D               	goto	u1795
  6013     0C52  0874               	movf	??_SetBit,w
  6014     0C53  3AFF               	xorlw	255
  6015     0C54  00F5               	movwf	??_SetBit+1
  6016     0C55  0870               	movf	SetBit@port,w
  6017     0C56  0084               	movwf	4
  6018     0C57  1783               	bsf	3,7
  6019     0C58  1C71               	btfss	SetBit@port+1,0
  6020     0C59  1383               	bcf	3,7
  6021     0C5A  0875               	movf	??_SetBit+1,w
  6022     0C5B  0580               	andwf	0,f
  6023     0C5C  0008               	return
  6024     0C5D                     __end_of_SetBit:
  6025     007E                     btemp	set	126	;btemp
  6026     007E                     wtemp0	set	126
  6027                           
  6028                           	psect	config
  6029                           
  6030                           ;Config register CONFIG1 @ 0x2007
  6031                           ;	Oscillator Selection bits
  6032                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  6033                           ;	Watchdog Timer Enable bit
  6034                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  6035                           ;	Power-up Timer Enable bit
  6036                           ;	PWRTE = OFF, PWRT disabled
  6037                           ;	RE3/MCLR pin function select bit
  6038                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  6039                           ;	Code Protection bit
  6040                           ;	CP = OFF, Program memory code protection is disabled
  6041                           ;	Data Code Protection bit
  6042                           ;	CPD = OFF, Data memory code protection is disabled
  6043                           ;	Brown Out Reset Selection bits
  6044                           ;	BOREN = ON, BOR enabled
  6045                           ;	Internal External Switchover bit
  6046                           ;	IESO = 0x1, unprogrammed default
  6047                           ;	Fail-Safe Clock Monitor Enabled bit
  6048                           ;	FCMEN = 0x1, unprogrammed default
  6049                           ;	Low Voltage Programming Enable bit
  6050                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  6051                           ;	In-Circuit Debugger Mode bit
  6052                           ;	DEBUG = 0x1, unprogrammed default
  6053     2007                     	org	8199
  6054     2007  2FF4               	dw	12276

Data Sizes:
    Strings     29
    Constant    0
    Data        8
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      0      44
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    F1791$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    lcd$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_Clear@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_Clear@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_Command@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_Command@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_Init@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_Init@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_SetCursor@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_SetCursor@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_WriteChar@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_WriteChar@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_WriteString@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    Lcd_WriteString@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    Lcd_WriteString@str	PTR unsigned char  size(2) Largest target is 19
		 -> main@rpm(BANK0[10]), STR_1(CODE[19]), STR_2(CODE[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    PulseEnable@config	PTR struct . size(1) Largest target is 8
		 -> main@lcd(BANK0[8]), 

    PulseEnable@config$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S22$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    S796$buffer	PTR unsigned char  size(1) Largest target is 0

    S796$source	PTR const unsigned char  size(1) Largest target is 0

    SetBit@port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@rpm(BANK0[10]), 

    utoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Clear
    _main->_Lcd_WriteString
    _main->___xxtofl
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    _map->___aldiv
    ___aldiv->___lmul
    ___fltol->___xxtofl
    ___flmul->___xxtofl
    _Lcd_WriteString->_Lcd_WriteChar
    _Lcd_WriteChar->_PulseEnable
    _Lcd_SetCursor->_Lcd_Command
    _Lcd_Init->_Lcd_Clear
    _Lcd_Clear->_Lcd_Command
    _Lcd_Command->_PulseEnable
    _PulseEnable->_SetBit

Critical Paths under _main in BANK0

    _main->_map
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _map->___aldiv
    ___fltol->___flmul
    _Lcd_Init->_Lcd_Clear

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   67098
                                             50 BANK0     28    28      0
                          _Lcd_Clear
                           _Lcd_Init
                      _Lcd_SetCursor
                    _Lcd_WriteString
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _countPulses
                            _initADC
                            _initPWM
                            _initRPM
                                _map
                            _readADC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    16      3    5381
                                             30 BANK0     17    14      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    5071
                                             26 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12    10      2    4758
                                             16 BANK0     10     8      2
                              _fputc
                 _read_prec_or_width
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 8     6      2    3004
                                              8 BANK0      8     6      2
                            ___lwdiv
                            ___lwmod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    2043
                                             11 COMMON     3     0      3
                                              4 BANK0      4     4      0
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1     997
                                              8 COMMON     3     2      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3     682
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     311
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   7     5      2     533
                                              6 COMMON     7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 36    16     20    1230
                                             14 BANK0     36    16     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initRPM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _countPulses                                          6     4      2     115
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     398
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (1) ___fltol                                             10     6      4     305
                                             26 BANK0     10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) ___flmul                                             26    18      8    2418
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_WriteString                                      3     1      2   10871
                                             13 COMMON     1     1      0
                                              0 BANK0      2     0      2
                      _Lcd_WriteChar
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     3      1   10477
                                              9 COMMON     4     3      1
                        _PulseEnable
                             _SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_SetCursor                                        6     4      2   11900
                                              0 BANK0      6     4      2
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0   22803
                                              2 BANK0      3     3      0
                          _Lcd_Clear
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            3     3      0   11341
                                             13 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          4     3      1   11253
                                              9 COMMON     4     3      1
                        _PulseEnable
                             _SetBit
 ---------------------------------------------------------------------------------
 (3) _PulseEnable                                          3     3      0    4890
                                              6 COMMON     3     3      0
                             _SetBit
 ---------------------------------------------------------------------------------
 (3) _SetBit                                               6     2      4    4670
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Command
       _PulseEnable
         _SetBit
       _SetBit
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Command
   _Lcd_SetCursor
     _Lcd_Command
   _Lcd_WriteString
     _Lcd_WriteChar
       _PulseEnable
       _SetBit
   ___flmul
     __Umul8_16
     ___xxtofl (ARG)
   ___fltol
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _countPulses
   _initADC
   _initPWM
   _initRPM
   _map
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _readADC
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _read_prec_or_width
           ___wmul
         _utoa
           ___lwdiv
           ___lwmod
           _pad
             _fputc
             _fputs
               _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      2C       7       55.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4E      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      89      12        0.0%
ABS                  0      0      89       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Jan  4 13:30:43 2024

                         pc 0002              Lcd_Init@config 0024                          fsr 0004  
       ___wmul@multiplicand 0072         __Umul8_16@word_mpld 0076                         l108 0BE0  
                       l116 0AF8                         l218 0B68                         l419 0EBB  
                       l283 0EE9                         l702 0D30                         l634 0BB4  
                       l627 07DA                         l672 0197                         l673 01A1  
                       l665 0181                         l659 0143                         l699 0D0C  
                       _PR2 0092                         _pad 0CFD                         _map 0086  
                       fsr0 0004            ?_Lcd_WriteString 0020                         indf 0000  
              ___flmul@aexp 002E                ___flmul@bexp 0033         __end_of_Lcd_Command 03ED  
              ___flmul@sign 002D                ___flmul@temp 0038                ___flmul@prod 0034  
              ___fltol@exp1 0043                        l2002 0766                        l2012 0798  
                      l2022 07C7                        l2016 07AE                        l2040 013B  
                      l2050 0154                        l2060 0195                        l2052 0166  
                      l2062 0186                        l2046 0152                        l1510 0CD7  
                      l1600 0DE8                        l1520 0CF8                        l2152 0FDA  
                      l2154 0B8E                        l2074 01BE                        l1604 0E03  
                      l1516 0CED                        l1508 0CC9                        l1532 0C95  
                      l1606 0E12                        l1534 0CA3                        l1542 0CBC  
                      l1462 0D84                        l1550 0D08                        l1720 0BAC  
                      l1712 0F5D                        l1704 0F42                        l1640 0FCC  
                      l2096 0227                        l1482 0C49                        l1538 0CB1  
                      l1466 0DAD                        l1634 0FC3                        l1642 0FDF  
                      l1708 0F4F                        l1476 0BEB                        l1628 0FA1  
                      l1910 0527                        l1822 0BCD                        l1486 0B60  
                      l1558 0D0E                        l1590 0E66                        l1646 0FE9  
                      l1734 0B46                        l1912 052F                        l1824 0BE3  
                      l1664 0D43                        l1584 0E61                        l1736 0B5B  
                      l1770 0B81                        l1746 0C0E                        l1930 0552  
                      l1586 0E29                        l1772 0B83                        l1908 0525  
                      l1860 0E79                        l1668 0D59                        l1926 0548  
                      l1694 0F0A                        l1686 0EFA                        l1776 0B86  
                      l1928 054A                        l1880 0EA7                        l1864 0E82  
                      l1696 0F1A                        l1778 0B96                        l1938 0560  
                      l1890 0ECA                        l1882 0EB7                        l1990 0730  
                      ?_map 002E                        ?_pad 007B                        l1992 074D  
                      l1998 0764                        STR_1 0810                        STR_2 0823  
                      STR_3 0829                        u2100 0309                        u2110 030A  
                      u2210 039F                        u2130 032A                        u2220 03A0  
                      u2140 032B                        u2205 0396                        u2125 0321  
                      u2070 02E8                        u2240 03C0                        u2160 034B  
                      u2080 02E9                        u2400 044B                        u2065 02DF  
                      u2250 03C1                        u2170 034C                        u2330 0408  
                      u2235 03B7                        u2155 0342                        u3115 06E5  
                      u2180 037E                        u2500 04E1                        u2420 046B  
                      u2340 0409                        u2325 03FF                        u3045 0604  
                      u2270 03E1                        u2190 037F                        u2510 04E2  
                      u2430 046C                        u2095 0300                        u2415 0462  
                      u2280 03E2                        u2440 049F                        u2360 0429  
                      u2265 03D8                        u3145 071C                        u2530 0502  
                      u2450 04A0                        u2370 042A                        u2355 0420  
                      u3155 0734                        u3075 0659                        u3315 015D  
                      u2540 0503                        u3420 01DE                        u2525 04F9  
                      u3245 0783                        u2470 04C0                        u2390 044A  
                      u3255 07A1                        u3175 073F                        u3335 0179  
                      u1815 0B69                        u2480 04C1                        u2465 04B7  
                      u2385 0441                        u3265 07B9                        u2801 00B9  
                      u1825 0B70                        u2802 00BA                        u2715 0BB5  
                      u3355 018E                        u2635 0F0E                        u2811 00DD  
                      u2803 00BF                        u1755 0DAB                        u2812 00DE  
                      u2804 00C0                        u2813 00E3                        u2805 00C5  
                      u1925 0C98                        u3437 02C8                        u2814 00E4  
                      u2806 00C6                        u3447 0023                        u2495 04D8  
                      u2655 0F1C                        u2575 0D5B                        u2815 00E9  
                      u1855 0CCC                        u1784 0C3C                        u2816 00EA  
                      u1785 0C3A                        u3457 0037                        u2665 0F31  
                      u2585 0D63                        u1945 0CA9                        u1794 0C4F  
                      u1795 0C4D                        u3467 004A                        u2835 0E8B  
                      u3395 01A9                        u2675 0F43                        u1875 0CD8  
                      u1955 0CB2                        u3477 0016                        u1885 0CE4  
                      u3487 0C77                        u2791 0095                        u1895 0CEE  
                      u2792 0096                        u2865 0EA8                        u2793 009B  
                      u2794 009C                        u2795 00A1                        u1995 0D18  
                      u2796 00A2                        u2895 0EC0                        _TMR0 0001  
        Lcd_WriteString@str 0020                ?_countPulses 0070                        _dbuf 00A4  
                      _main 01C7                        _prec 00A2                        pad@i 0025  
                      pad@p 007C                        map@x 002E                        btemp 007E  
                      _utoa 0E17                        start 0000                       ??_map 0042  
                     ??_pad 0024               ___fltol@sign1 0042             __end_of___aldiv 0F66  
                     ?_main 0070             __end_of___flmul 07E7             __end_of___fltol 0ED9  
                     _ANSEL 0188                       ?_utoa 0028                       _T2CON 0012  
           __end_of___lwdiv 0CFD             __end_of___lwmod 0CC1                vfpfcnvrt@fmt 0030  
                     _PORTD 0008                       _TRISC 0087                       _TRISD 0088  
       ___lmul@multiplicand 0074             __end_of_initADC 0B19             __end_of_readADC 0B00  
           __end_of_initRPM 0AF5             __end_of_initPWM 0B0C                       _flags 006E  
       read_prec_or_width@c 0079         read_prec_or_width@n 007A                       _fputc 0D7A  
                     _fputs 0BE8                       pad@fp 0027                  SetBit@port 0070  
                     _width 00A0                       _putch 0006                       pclath 000A  
             main@adcResult 0060                       utoa@d 0028                       utoa@i 002E  
                     utoa@p 002D                       utoa@w 002A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 0B43            __end_of_Lcd_Init 0086  
         PulseEnable@config 0078             __initialization 07E7                __end_of_main 02CD  
              __end_of_utoa 0E72                 _Lcd_Command 02CD                      ??_main 0052  
                    ??_utoa 007E  __end_of_read_prec_or_width 0E17                      _ADCON0 001F  
                    _ADCON1 009F       __end_of_Lcd_SetCursor 0BA2                      ?_fputc 0070  
                    ?_fputs 0078                      _ADRESH 001E                      _ADRESL 009E  
                    _CCPR1L 0015                      ?_putch 0070                      _ANSELH 0189  
          __end_of___xxtofl 01C7                      _SetBit 0C33        Lcd_SetCursor@address 0024  
              vfprintf@cfmt 003D                      ___lmul 0D3B                   ??___aldiv 007D  
                    ___wmul 0B5E                   ??___flmul 0028                   ??___fltol 003E  
                 ??___lwdiv 0074                   ??___lwmod 0074        read_prec_or_width@ap 0076  
               SetBit@value 0073                      pad@buf 007B       __end_of_Lcd_WriteChar 050E  
                 ??_initADC 0070                   ??_readADC 0072                   ??_initRPM 0070  
                 ??_initPWM 0070                      fputc@c 0070                      fputs@c 0020  
                    fputs@i 0021                      fputs@s 0023                      putch@c 0070  
          __end_of_vfprintf 0B5E                      utoa@fp 002C                   ??_sprintf 0041  
              ___xxtofl@arg 007A                ___xxtofl@exp 0079                ___xxtofl@val 0070  
   __end_of__initialization 07FC               ??_PulseEnable 0076           __end_of_Lcd_Clear 001B  
                ___fltol@f1 003A              __pcstackCOMMON 0070                __pidataBANK1 0AE2  
             __end_of_fputc 0DC5               __end_of_fputs 0C0D               __end_of_putch 0007  
            _OPTION_REGbits 0081                   ?_Lcd_Init 0070                     ??_fputc 0073  
                   ??_fputs 0079                     ??_putch 0070                  __pbssBANK0 006E  
                __pbssBANK1 00A0           __end_of__Umul8_16 0BC5                     ?_SetBit 0070  
                __pmaintext 01C7                     ?___lmul 0070                     ?___wmul 0070  
       __end_of_PulseEnable 0C8F        countPulses@lastState 0074                     _CCP1CON 0017  
            ___lmul@product 0079                   ?___xxtofl 0070                  ??_Lcd_Init 0022  
     Lcd_WriteString@config 007D                  __stringtab 0800                     ___aldiv 0ED9  
         Lcd_WriteChar@data 0079                     ___flmul 050E                     ___fltol 0E72  
                   ___lwdiv 0CC1                     ___lwmod 0C8F                   ?_vfprintf 003A  
              ?_Lcd_Command 0079                     __ptext1 0B2A                     __ptext2 0B43  
                   __ptext3 0F66                     __ptext4 0E17                     __ptext5 0CFD  
                   __ptext6 0BE8                     __ptext7 0D7A                     __ptext8 0006  
                   __ptext9 0C8F                     _initADC 0B0C                     _readADC 0AF5  
                   _initRPM 0AEA                     _initPWM 0B00       read_prec_or_width@fmt 007C  
                ??___xxtofl 0074            ___aldiv@dividend 0024                     main@lcd 0066  
                   _sprintf 0B2A                     clrloop0 0ADB                     main@rpm 0056  
      end_of_initialization 07FC                     fputc@fp 0072            Lcd_SetCursor@row 0020  
                   fputs@fp 0078          _read_prec_or_width 0DC5                 _PulseEnable 0C5D  
         __end_of_vfpfcnvrt 1000            ___aldiv@quotient 002A         ?_read_prec_or_width 0076  
          vfpfcnvrt@convarg 0034                  ??_vfprintf 007E                   _PORTBbits 0006  
             ___xxtofl@sign 0078                   _TRISBbits 0086        ??_read_prec_or_width 0078  
                map@out_max 003E                  map@out_min 003A                  main@fanRPM 0064  
               ___flmul@grs 002F                  main@pulses 0062           ??_Lcd_WriteString 007D  
                 _Lcd_Clear 0007              __end_of_SetBit 0C5D              __end_of___lmul 0D7A  
               vfpfcnvrt@ap 0031                 vfpfcnvrt@cp 0039                 vfpfcnvrt@fp 0038  
            __end_of___wmul 0B7F                   SetBit@pin 0072         start_initialization 07E7  
               __end_of_map 0126                 __end_of_pad 0D3B               ??_countPulses 0072  
                  ??_SetBit 0074                 vfprintf@fmt 003A                  ?_Lcd_Clear 0070  
       Lcd_SetCursor@config 0025                    ??___lmul 0078         Lcd_SetCursor@column 0021  
                  ??___wmul 0074                  init_fetch0 0B19                   __Umul8_16 0BA2  
               __pdataBANK1 00C4           Lcd_Command@config 007C                   ___flmul@a 0024  
                 ___flmul@b 0020         Lcd_WriteChar@config 007C                   ___latbits 0002  
             __pcstackBANK0 0020               _Lcd_SetCursor 0B7F            ___lwdiv@dividend 0072  
       __end_of_countPulses 0BE8                    ?___aldiv 0020                    ?___flmul 0020  
                  ?___fltol 003A                  ?__Umul8_16 0070                    ?___lwdiv 0070  
                  ?___lwmod 0070                   __pstrings 0800                    ?_initADC 0070  
                  ?_readADC 0070               _Lcd_WriteChar 03ED                    ?_initRPM 0070  
                  ?_initPWM 0070            ___lwdiv@quotient 0075              ?_Lcd_SetCursor 0020  
                  ?_sprintf 003E             ___aldiv@divisor 0020             ___aldiv@counter 0028  
            ___wmul@product 0074                   clear_ram0 0ADA                ?_PulseEnable 0070  
               ??_Lcd_Clear 0020             Lcd_Clear@config 007D                   main@F1791 00C4  
                 _vfpfcnvrt 0F66                   map@in_max 0036                   map@in_min 0032  
                _ADCON0bits 001F                 __stringbase 080F              ?_Lcd_WriteChar 0079  
         ___wmul@multiplier 0070                    _Lcd_Init 001B           ___lmul@multiplier 0070  
           _Lcd_WriteString 0C0D                 _countPulses 0BC5       countPulses@pulseCount 0072  
   countPulses@currentState 0075                  vfprintf@ap 003B                  vfprintf@fp 003C  
               ??__Umul8_16 0072                  ?_vfpfcnvrt 0030          __end_of__stringtab 0810  
                sprintf@fmt 003E                    ___xxtofl 0126             ??_Lcd_SetCursor 0022  
           ___lwdiv@divisor 0070             ___lwdiv@counter 0077                    __ptext10 0CC1  
                  __ptext11 0DC5                    __ptext20 0BC5                    __ptext12 0B5E  
                  __ptext21 0126                    __ptext13 0AF5                    __ptext30 02CD  
                  __ptext22 0E72                    __ptext14 0086                    __ptext31 0C5D  
                  __ptext23 050E                    __ptext15 0D3B                    __ptext32 0C33  
                  __ptext24 0BA2                    __ptext16 0ED9                    __ptext25 0C0D  
                  __ptext17 0AEA                    __ptext26 03ED                    __ptext18 0B00  
                  __ptext27 0B7F                    __ptext19 0B0C                    __ptext28 001B  
                  __ptext29 0007                    _vfprintf 0B43             ??_Lcd_WriteChar 007A  
   __end_of_Lcd_WriteString 0C33                  _INTCONbits 000B                    init_ram0 0B1D  
                 sprintf@ap 0042            ___lwmod@dividend 0072                   stringcode 080A  
               ??_vfpfcnvrt 0032               ??_Lcd_Command 007A              Lcd_Command@cmd 0079  
    __Umul8_16@multiplicand 0070                    sprintf@f 0044                    sprintf@s 0043  
           ___lwmod@divisor 0070             ___lwmod@counter 0075                    stringdir 080A  
                  stringtab 0800                ___aldiv@sign 0029        __Umul8_16@multiplier 0078  
         __Umul8_16@product 0074  
